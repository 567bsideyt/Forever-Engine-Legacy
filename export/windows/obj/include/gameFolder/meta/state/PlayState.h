// Generated by Haxe 4.1.5
#ifndef INCLUDED_gameFolder_meta_state_PlayState
#define INCLUDED_gameFolder_meta_state_PlayState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_gameFolder_meta_MusicBeatState
#include <gameFolder/meta/MusicBeatState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxSubState)
HX_DECLARE_CLASS3(flixel,addons,transition,FlxTransitionableState)
HX_DECLARE_CLASS3(flixel,addons,transition,TransitionData)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIState)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,ui,FlxBar)
HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(gameFolder,gameObjects,Boyfriend)
HX_DECLARE_CLASS2(gameFolder,gameObjects,Character)
HX_DECLARE_CLASS2(gameFolder,gameObjects,Note)
HX_DECLARE_CLASS2(gameFolder,gameObjects,Stage)
HX_DECLARE_CLASS3(gameFolder,gameObjects,userInterface,ClassHUD)
HX_DECLARE_CLASS3(gameFolder,gameObjects,userInterface,UIBabyArrow)
HX_DECLARE_CLASS2(gameFolder,meta,MusicBeatState)
HX_DECLARE_CLASS3(gameFolder,meta,state,PlayState)

namespace gameFolder{
namespace meta{
namespace state{


class HXCPP_CLASS_ATTRIBUTES PlayState_obj : public  ::gameFolder::meta::MusicBeatState_obj
{
	public:
		typedef  ::gameFolder::meta::MusicBeatState_obj super;
		typedef PlayState_obj OBJ_;
		PlayState_obj();

	public:
		enum { _hx_ClassId = 0x0d918779 };

		void __construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="gameFolder.meta.state.PlayState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"gameFolder.meta.state.PlayState"); }
		static ::hx::ObjectPtr< PlayState_obj > __new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		static ::hx::ObjectPtr< PlayState_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PlayState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PlayState",5d,83,c2,46); }

		static void __boot();
		static ::String curStage;
		static  ::Dynamic SONG;
		static bool isStoryMode;
		static int storyWeek;
		static ::Array< ::String > storyPlaylist;
		static int storyDifficulty;
		static  ::flixel::FlxObject prevCamFollow;
		static Float defaultCamZoom;
		static int songScore;
		static Float daPixelZoom;
		 ::flixel::util::FlxTimer startTimer;
		 ::flixel::_hx_system::FlxSound vocals;
		 ::gameFolder::gameObjects::Character dadOpponent;
		 ::gameFolder::gameObjects::Character gf;
		 ::gameFolder::gameObjects::Boyfriend boyfriend;
		bool boyfriendAutoplay;
		bool dadAutoplay;
		 ::flixel::group::FlxTypedGroup notes;
		::Array< ::Dynamic> unspawnNotes;
		::Array< bool > holdControls;
		::Array< bool > pressControls;
		::Array< bool > releaseControls;
		int curSection;
		 ::flixel::FlxObject camFollow;
		 ::flixel::group::FlxTypedGroup strumLine;
		 ::flixel::group::FlxTypedGroup strumLineNotes;
		 ::flixel::group::FlxTypedGroup boyfriendStrums;
		 ::flixel::group::FlxTypedGroup dadStrums;
		::String curSong;
		int gfSpeed;
		Float health;
		int combo;
		 ::flixel::FlxSprite healthBarBG;
		 ::flixel::ui::FlxBar healthBar;
		bool generatedMusic;
		bool startingSong;
		bool paused;
		bool startedCountdown;
		bool canPause;
		int previousFrameTime;
		int lastReportedPlayheadPosition;
		Float songTime;
		 ::flixel::FlxCamera camHUD;
		 ::flixel::FlxCamera camGame;
		Float camDisplaceX;
		Float camDisplaceY;
		bool camZooming;
		::String storyDifficultyText;
		::String iconRPC;
		Float songLength;
		 ::gameFolder::gameObjects::Stage stageBuild;
		 ::gameFolder::gameObjects::userInterface::ClassHUD uiHud;
		void create();

		bool canAscend;
		void update(Float elapsed);

		void mainControls( ::gameFolder::gameObjects::Note daNote, ::gameFolder::gameObjects::Character _hx_char,bool autoplay, ::Dynamic otherSide);
		::Dynamic mainControls_dyn();

		void strumCallsAuto( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum, ::Dynamic callType, ::gameFolder::gameObjects::Note daNote);
		::Dynamic strumCallsAuto_dyn();

		void strumCameraRoll( ::flixel::group::FlxTypedGroup cStrum,bool mustHit);
		::Dynamic strumCameraRoll_dyn();

		void noteCalls();
		::Dynamic noteCalls_dyn();

		void controlPlayer( ::gameFolder::gameObjects::Character character,bool autoplay, ::flixel::group::FlxTypedGroup characterStrums,::Array< bool > holdControls,::Array< bool > pressControls,::Array< bool > releaseControls, ::Dynamic mustPress);
		::Dynamic controlPlayer_dyn();

		void popUpScore(Float strumTime);
		::Dynamic popUpScore_dyn();

		void goodNoteHit( ::gameFolder::gameObjects::Note coolNote, ::gameFolder::gameObjects::Character character, ::flixel::group::FlxTypedGroup characterStrums);
		::Dynamic goodNoteHit_dyn();

		void missNoteCheck(::hx::Null< int >  direction,::Array< bool > pressControls, ::gameFolder::gameObjects::Character character);
		::Dynamic missNoteCheck_dyn();

		void startSong();
		::Dynamic startSong_dyn();

		void generateSong(::String dataPath);
		::Dynamic generateSong_dyn();

		int sortByShit( ::gameFolder::gameObjects::Note Obj1, ::gameFolder::gameObjects::Note Obj2);
		::Dynamic sortByShit_dyn();

		void startCountdown();
		::Dynamic startCountdown_dyn();

		void generateStaticArrows(int player);
		::Dynamic generateStaticArrows_dyn();

		void resyncVocals();
		::Dynamic resyncVocals_dyn();

		void stepHit();

		void beatHit();

		void openSubState( ::flixel::FlxSubState SubState);

		void closeSubState();

};

} // end namespace gameFolder
} // end namespace meta
} // end namespace state

#endif /* INCLUDED_gameFolder_meta_state_PlayState */ 
