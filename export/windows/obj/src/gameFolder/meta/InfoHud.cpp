// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_gameFolder_meta_InfoHud
#include <gameFolder/meta/InfoHud.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2aa354fbf0de73e5_29_new,"gameFolder.meta.InfoHud","new",0xe8534f00,"gameFolder.meta.InfoHud.new","gameFolder/meta/InfoHud.hx",29,0x055e24d0)
HX_LOCAL_STACK_FRAME(_hx_pos_2aa354fbf0de73e5_63___enterFrame,"gameFolder.meta.InfoHud","__enterFrame",0xb08f2c75,"gameFolder.meta.InfoHud.__enterFrame","gameFolder/meta/InfoHud.hx",63,0x055e24d0)
HX_LOCAL_STACK_FRAME(_hx_pos_2aa354fbf0de73e5_91_getFrames,"gameFolder.meta.InfoHud","getFrames",0x27f86f7c,"gameFolder.meta.InfoHud.getFrames","gameFolder/meta/InfoHud.hx",91,0x055e24d0)
HX_LOCAL_STACK_FRAME(_hx_pos_2aa354fbf0de73e5_97_getMemoryUsage,"gameFolder.meta.InfoHud","getMemoryUsage",0xfe7096ca,"gameFolder.meta.InfoHud.getMemoryUsage","gameFolder/meta/InfoHud.hx",97,0x055e24d0)
namespace gameFolder{
namespace meta{

void InfoHud_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_hudDisplay){
            		Float x = __o_x.Default(10);
            		Float y = __o_y.Default(10);
            		int color = __o_color.Default(0);
            		bool hudDisplay = __o_hudDisplay.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_2aa354fbf0de73e5_29_new)
HXLINE(  30)		super::__construct();
HXLINE(  32)		this->display = hudDisplay;
HXLINE(  34)		this->set_x(x);
HXLINE(  35)		this->set_y(y);
HXLINE(  37)		::gameFolder::meta::InfoHud_obj::currentFPS = 0;
HXLINE(  38)		this->set_selectable(false);
HXLINE(  39)		this->mouseEnabled = false;
HXLINE(  41)		this->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("_sans",32,a0,5e,ff),12,color,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  43)		this->set_width(( (Float)(::Main_obj::gameWidth) ));
HXLINE(  44)		this->set_height(( (Float)(::Main_obj::gameHeight) ));
HXLINE(  46)		this->set_text(HX_("FPS: \nState: \nMemory:",eb,dc,82,38));
HXLINE(  48)		this->cacheCount = 0;
HXLINE(  49)		this->currentTime = ( (Float)(0) );
HXLINE(  50)		this->times = ::Array_obj< Float >::__new(0);
            	}

Dynamic InfoHud_obj::__CreateEmpty() { return new InfoHud_obj; }

void *InfoHud_obj::_hx_vtable = 0;

Dynamic InfoHud_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InfoHud_obj > _hx_result = new InfoHud_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool InfoHud_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5799bce4) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x5799bce4;
		}
	} else {
		return inClassId==(int)0x6b353933 || inClassId==(int)0x7f0de750;
	}
}

void InfoHud_obj::_hx___enterFrame(int _tmp_deltaTime){
            	HX_STACKFRAME(&_hx_pos_2aa354fbf0de73e5_63___enterFrame)
HXLINE(  64)		Float deltaTime = ( (Float)(_tmp_deltaTime) );
HXDLIN(  64)		 ::gameFolder::meta::InfoHud _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  64)		_hx_tmp->currentTime = (_hx_tmp->currentTime + deltaTime);
HXLINE(  65)		this->times->push(this->currentTime);
HXLINE(  67)		while((this->times->__get(0) < (this->currentTime - ( (Float)(1000) )))){
HXLINE(  69)			this->times->shift();
            		}
HXLINE(  72)		int currentCount = this->times->length;
HXLINE(  73)		::gameFolder::meta::InfoHud_obj::currentFPS = ::Math_obj::round((( (Float)((currentCount + this->cacheCount)) ) / ( (Float)(2) )));
HXLINE(  74)		::gameFolder::meta::InfoHud_obj::memoryUsage = ( (Float)(::Math_obj::round((( (Float)(::openfl::_hx_system::System_obj::get_totalMemory()) ) / ((Float)1e+6)))) );
HXLINE(  79)		::String _hx_tmp1 = ((HX_("FPS: ",af,da,2c,83) + ::gameFolder::meta::InfoHud_obj::currentFPS) + HX_("\nState: ",0d,ac,ab,3f));
HXDLIN(  79)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(::Main_obj::mainClassState)) + HX_("\nMemory: ",11,56,a9,a3));
HXDLIN(  79)		this->set_text(((_hx_tmp2 + ::gameFolder::meta::InfoHud_obj::memoryUsage) + HX_(" mb",75,a7,18,00)));
HXLINE(  82)		if (!(this->display)) {
HXLINE(  83)			this->set_text(HX_("",00,00,00,00));
            		}
HXLINE(  85)		this->cacheCount = currentCount;
            	}


int InfoHud_obj::currentFPS;

Float InfoHud_obj::memoryUsage;

Float InfoHud_obj::getFrames(){
            	HX_STACKFRAME(&_hx_pos_2aa354fbf0de73e5_91_getFrames)
HXDLIN(  91)		return ( (Float)(::gameFolder::meta::InfoHud_obj::currentFPS) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(InfoHud_obj,getFrames,return )

Float InfoHud_obj::getMemoryUsage(){
            	HX_STACKFRAME(&_hx_pos_2aa354fbf0de73e5_97_getMemoryUsage)
HXDLIN(  97)		return ::gameFolder::meta::InfoHud_obj::memoryUsage;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(InfoHud_obj,getMemoryUsage,return )


::hx::ObjectPtr< InfoHud_obj > InfoHud_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_hudDisplay) {
	::hx::ObjectPtr< InfoHud_obj > __this = new InfoHud_obj();
	__this->__construct(__o_x,__o_y,__o_color,__o_hudDisplay);
	return __this;
}

::hx::ObjectPtr< InfoHud_obj > InfoHud_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color,::hx::Null< bool >  __o_hudDisplay) {
	InfoHud_obj *__this = (InfoHud_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InfoHud_obj), true, "gameFolder.meta.InfoHud"));
	*(void **)__this = InfoHud_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_color,__o_hudDisplay);
	return __this;
}

InfoHud_obj::InfoHud_obj()
{
}

void InfoHud_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InfoHud);
	HX_MARK_MEMBER_NAME(cacheCount,"cacheCount");
	HX_MARK_MEMBER_NAME(currentTime,"currentTime");
	HX_MARK_MEMBER_NAME(times,"times");
	HX_MARK_MEMBER_NAME(display,"display");
	 ::openfl::text::TextField_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void InfoHud_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cacheCount,"cacheCount");
	HX_VISIT_MEMBER_NAME(currentTime,"currentTime");
	HX_VISIT_MEMBER_NAME(times,"times");
	HX_VISIT_MEMBER_NAME(display,"display");
	 ::openfl::text::TextField_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val InfoHud_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { return ::hx::Val( times ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { return ::hx::Val( display ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cacheCount") ) { return ::hx::Val( cacheCount ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { return ::hx::Val( currentTime ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return ::hx::Val( _hx___enterFrame_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool InfoHud_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"getFrames") ) { outValue = getFrames_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentFPS") ) { outValue = ( currentFPS ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"memoryUsage") ) { outValue = ( memoryUsage ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getMemoryUsage") ) { outValue = getMemoryUsage_dyn(); return true; }
	}
	return false;
}

::hx::Val InfoHud_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { times=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { display=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cacheCount") ) { cacheCount=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { currentTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool InfoHud_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"currentFPS") ) { currentFPS=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"memoryUsage") ) { memoryUsage=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void InfoHud_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cacheCount",2d,ab,1b,8d));
	outFields->push(HX_("currentTime",e6,a4,8e,85));
	outFields->push(HX_("times",c6,bf,35,10));
	outFields->push(HX_("display",42,2a,4a,bb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InfoHud_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(InfoHud_obj,cacheCount),HX_("cacheCount",2d,ab,1b,8d)},
	{::hx::fsFloat,(int)offsetof(InfoHud_obj,currentTime),HX_("currentTime",e6,a4,8e,85)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(InfoHud_obj,times),HX_("times",c6,bf,35,10)},
	{::hx::fsBool,(int)offsetof(InfoHud_obj,display),HX_("display",42,2a,4a,bb)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo InfoHud_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &InfoHud_obj::currentFPS,HX_("currentFPS",30,71,28,c7)},
	{::hx::fsFloat,(void *) &InfoHud_obj::memoryUsage,HX_("memoryUsage",60,7e,d8,7c)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String InfoHud_obj_sMemberFields[] = {
	HX_("cacheCount",2d,ab,1b,8d),
	HX_("currentTime",e6,a4,8e,85),
	HX_("times",c6,bf,35,10),
	HX_("display",42,2a,4a,bb),
	HX_("__enterFrame",15,7f,e3,3a),
	::String(null()) };

static void InfoHud_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InfoHud_obj::currentFPS,"currentFPS");
	HX_MARK_MEMBER_NAME(InfoHud_obj::memoryUsage,"memoryUsage");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InfoHud_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InfoHud_obj::currentFPS,"currentFPS");
	HX_VISIT_MEMBER_NAME(InfoHud_obj::memoryUsage,"memoryUsage");
};

#endif

::hx::Class InfoHud_obj::__mClass;

static ::String InfoHud_obj_sStaticFields[] = {
	HX_("currentFPS",30,71,28,c7),
	HX_("memoryUsage",60,7e,d8,7c),
	HX_("getFrames",dc,38,dc,28),
	HX_("getMemoryUsage",6a,d1,76,04),
	::String(null())
};

void InfoHud_obj::__register()
{
	InfoHud_obj _hx_dummy;
	InfoHud_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gameFolder.meta.InfoHud",0e,0f,48,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &InfoHud_obj::__GetStatic;
	__mClass->mSetStaticField = &InfoHud_obj::__SetStatic;
	__mClass->mMarkFunc = InfoHud_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(InfoHud_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InfoHud_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InfoHud_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InfoHud_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InfoHud_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InfoHud_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gameFolder
} // end namespace meta
