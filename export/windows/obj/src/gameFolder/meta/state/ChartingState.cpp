// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameFolder_gameObjects_Note
#include <gameFolder/gameObjects/Note.h>
#endif
#ifndef INCLUDED_gameFolder_gameObjects_userInterface_HealthIcon
#include <gameFolder/gameObjects/userInterface/HealthIcon.h>
#endif
#ifndef INCLUDED_gameFolder_meta_Conductor
#include <gameFolder/meta/Conductor.h>
#endif
#ifndef INCLUDED_gameFolder_meta_CoolUtil
#include <gameFolder/meta/CoolUtil.h>
#endif
#ifndef INCLUDED_gameFolder_meta_MusicBeatState
#include <gameFolder/meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_gameFolder_meta_data_Song
#include <gameFolder/meta/data/Song.h>
#endif
#ifndef INCLUDED_gameFolder_meta_state_ChartingState
#include <gameFolder/meta/state/ChartingState.h>
#endif
#ifndef INCLUDED_gameFolder_meta_state_PlayState
#include <gameFolder/meta/state/PlayState.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fae24b05502c86ba_46_new,"gameFolder.meta.state.ChartingState","new",0x4fc3bea7,"gameFolder.meta.state.ChartingState.new","gameFolder/meta/state/ChartingState.hx",46,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_97_create,"gameFolder.meta.state.ChartingState","create",0xbbb65f15,"gameFolder.meta.state.ChartingState.create","gameFolder/meta/state/ChartingState.hx",97,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_198_addSongUI,"gameFolder.meta.state.ChartingState","addSongUI",0x6f375ff1,"gameFolder.meta.state.ChartingState.addSongUI","gameFolder/meta/state/ChartingState.hx",198,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_206_addSongUI,"gameFolder.meta.state.ChartingState","addSongUI",0x6f375ff1,"gameFolder.meta.state.ChartingState.addSongUI","gameFolder/meta/state/ChartingState.hx",206,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_217_addSongUI,"gameFolder.meta.state.ChartingState","addSongUI",0x6f375ff1,"gameFolder.meta.state.ChartingState.addSongUI","gameFolder/meta/state/ChartingState.hx",217,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_228_addSongUI,"gameFolder.meta.state.ChartingState","addSongUI",0x6f375ff1,"gameFolder.meta.state.ChartingState.addSongUI","gameFolder/meta/state/ChartingState.hx",228,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_233_addSongUI,"gameFolder.meta.state.ChartingState","addSongUI",0x6f375ff1,"gameFolder.meta.state.ChartingState.addSongUI","gameFolder/meta/state/ChartingState.hx",233,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_260_addSongUI,"gameFolder.meta.state.ChartingState","addSongUI",0x6f375ff1,"gameFolder.meta.state.ChartingState.addSongUI","gameFolder/meta/state/ChartingState.hx",260,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_265_addSongUI,"gameFolder.meta.state.ChartingState","addSongUI",0x6f375ff1,"gameFolder.meta.state.ChartingState.addSongUI","gameFolder/meta/state/ChartingState.hx",265,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_272_addSongUI,"gameFolder.meta.state.ChartingState","addSongUI",0x6f375ff1,"gameFolder.meta.state.ChartingState.addSongUI","gameFolder/meta/state/ChartingState.hx",272,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_190_addSongUI,"gameFolder.meta.state.ChartingState","addSongUI",0x6f375ff1,"gameFolder.meta.state.ChartingState.addSongUI","gameFolder/meta/state/ChartingState.hx",190,0x93f0890a)
static const ::String _hx_array_data_2defdf35_11[] = {
	HX_("default",c1,d8,c3,9b),HX_("spooky",eb,bd,9e,c1),HX_("philly",28,77,5e,ef),HX_("highway",0d,b3,8f,73),HX_("mall",d4,3a,56,48),HX_("school",74,b8,c8,40),HX_("evilschool",08,52,2f,5a),HX_("military",cd,eb,5c,59),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_324_addSectionUI,"gameFolder.meta.state.ChartingState","addSectionUI",0xe26f05f1,"gameFolder.meta.state.ChartingState.addSectionUI","gameFolder/meta/state/ChartingState.hx",324,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_331_addSectionUI,"gameFolder.meta.state.ChartingState","addSectionUI",0xe26f05f1,"gameFolder.meta.state.ChartingState.addSectionUI","gameFolder/meta/state/ChartingState.hx",331,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_308_addSectionUI,"gameFolder.meta.state.ChartingState","addSectionUI",0xe26f05f1,"gameFolder.meta.state.ChartingState.addSectionUI","gameFolder/meta/state/ChartingState.hx",308,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_368_addNoteUI,"gameFolder.meta.state.ChartingState","addNoteUI",0x7364554e,"gameFolder.meta.state.ChartingState.addNoteUI","gameFolder/meta/state/ChartingState.hx",368,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_411_loadSong,"gameFolder.meta.state.ChartingState","loadSong",0x6e5fe574,"gameFolder.meta.state.ChartingState.loadSong","gameFolder/meta/state/ChartingState.hx",411,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_394_loadSong,"gameFolder.meta.state.ChartingState","loadSong",0x6e5fe574,"gameFolder.meta.state.ChartingState.loadSong","gameFolder/meta/state/ChartingState.hx",394,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_421_generateUI,"gameFolder.meta.state.ChartingState","generateUI",0x1de81962,"gameFolder.meta.state.ChartingState.generateUI","gameFolder/meta/state/ChartingState.hx",421,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_441_getEvent,"gameFolder.meta.state.ChartingState","getEvent",0x8703c7fd,"gameFolder.meta.state.ChartingState.getEvent","gameFolder/meta/state/ChartingState.hx",441,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_502_sectionStartTime,"gameFolder.meta.state.ChartingState","sectionStartTime",0xdea52c43,"gameFolder.meta.state.ChartingState.sectionStartTime","gameFolder/meta/state/ChartingState.hx",502,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_517_update,"gameFolder.meta.state.ChartingState","update",0xc6ac7e22,"gameFolder.meta.state.ChartingState.update","gameFolder/meta/state/ChartingState.hx",517,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_548_update,"gameFolder.meta.state.ChartingState","update",0xc6ac7e22,"gameFolder.meta.state.ChartingState.update","gameFolder/meta/state/ChartingState.hx",548,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_719_changeNoteSustain,"gameFolder.meta.state.ChartingState","changeNoteSustain",0x503e27c8,"gameFolder.meta.state.ChartingState.changeNoteSustain","gameFolder/meta/state/ChartingState.hx",719,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_734_recalculateSteps,"gameFolder.meta.state.ChartingState","recalculateSteps",0x3a39ccad,"gameFolder.meta.state.ChartingState.recalculateSteps","gameFolder/meta/state/ChartingState.hx",734,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_753_resetSection,"gameFolder.meta.state.ChartingState","resetSection",0x2a7fdcaf,"gameFolder.meta.state.ChartingState.resetSection","gameFolder/meta/state/ChartingState.hx",753,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_776_changeSection,"gameFolder.meta.state.ChartingState","changeSection",0xd441d75c,"gameFolder.meta.state.ChartingState.changeSection","gameFolder/meta/state/ChartingState.hx",776,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_809_copySection,"gameFolder.meta.state.ChartingState","copySection",0x7aee8ff7,"gameFolder.meta.state.ChartingState.copySection","gameFolder/meta/state/ChartingState.hx",809,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_824_updateSectionUI,"gameFolder.meta.state.ChartingState","updateSectionUI",0x5edbe0f7,"gameFolder.meta.state.ChartingState.updateSectionUI","gameFolder/meta/state/ChartingState.hx",824,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_838_updateHeads,"gameFolder.meta.state.ChartingState","updateHeads",0xd15349d1,"gameFolder.meta.state.ChartingState.updateHeads","gameFolder/meta/state/ChartingState.hx",838,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_852_updateNoteUI,"gameFolder.meta.state.ChartingState","updateNoteUI",0x8c42fa88,"gameFolder.meta.state.ChartingState.updateNoteUI","gameFolder/meta/state/ChartingState.hx",852,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_857_updateGrid,"gameFolder.meta.state.ChartingState","updateGrid",0xcca83a08,"gameFolder.meta.state.ChartingState.updateGrid","gameFolder/meta/state/ChartingState.hx",857,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_929_addSection,"gameFolder.meta.state.ChartingState","addSection",0x94e9aa5d,"gameFolder.meta.state.ChartingState.addSection","gameFolder/meta/state/ChartingState.hx",929,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_944_selectNote,"gameFolder.meta.state.ChartingState","selectNote",0x872d05a7,"gameFolder.meta.state.ChartingState.selectNote","gameFolder/meta/state/ChartingState.hx",944,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_962_deleteNote,"gameFolder.meta.state.ChartingState","deleteNote",0x6bde6e56,"gameFolder.meta.state.ChartingState.deleteNote","gameFolder/meta/state/ChartingState.hx",962,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_976_clearSection,"gameFolder.meta.state.ChartingState","clearSection",0x942048b1,"gameFolder.meta.state.ChartingState.clearSection","gameFolder/meta/state/ChartingState.hx",976,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_983_clearSong,"gameFolder.meta.state.ChartingState","clearSong",0x49a36989,"gameFolder.meta.state.ChartingState.clearSong","gameFolder/meta/state/ChartingState.hx",983,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_993_addNote,"gameFolder.meta.state.ChartingState","addNote",0xf7b9787a,"gameFolder.meta.state.ChartingState.addNote","gameFolder/meta/state/ChartingState.hx",993,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1019_getStrumTime,"gameFolder.meta.state.ChartingState","getStrumTime",0x5e415b59,"gameFolder.meta.state.ChartingState.getStrumTime","gameFolder/meta/state/ChartingState.hx",1019,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1024_getYfromStrum,"gameFolder.meta.state.ChartingState","getYfromStrum",0x8ddb7923,"gameFolder.meta.state.ChartingState.getYfromStrum","gameFolder/meta/state/ChartingState.hx",1024,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1054_loadLevel,"gameFolder.meta.state.ChartingState","loadLevel",0x1724bf05,"gameFolder.meta.state.ChartingState.loadLevel","gameFolder/meta/state/ChartingState.hx",1054,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1058_getNotes,"gameFolder.meta.state.ChartingState","getNotes",0xb109dc24,"gameFolder.meta.state.ChartingState.getNotes","gameFolder/meta/state/ChartingState.hx",1058,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1070_loadJson,"gameFolder.meta.state.ChartingState","loadJson",0x687003c7,"gameFolder.meta.state.ChartingState.loadJson","gameFolder/meta/state/ChartingState.hx",1070,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1076_loadAutosave,"gameFolder.meta.state.ChartingState","loadAutosave",0x58cccb4b,"gameFolder.meta.state.ChartingState.loadAutosave","gameFolder/meta/state/ChartingState.hx",1076,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1082_autosaveSong,"gameFolder.meta.state.ChartingState","autosaveSong",0xc275b4fa,"gameFolder.meta.state.ChartingState.autosaveSong","gameFolder/meta/state/ChartingState.hx",1082,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1090_saveLevel,"gameFolder.meta.state.ChartingState","saveLevel",0x8a9a7a8e,"gameFolder.meta.state.ChartingState.saveLevel","gameFolder/meta/state/ChartingState.hx",1090,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1108_onSaveComplete,"gameFolder.meta.state.ChartingState","onSaveComplete",0x8931e5ee,"gameFolder.meta.state.ChartingState.onSaveComplete","gameFolder/meta/state/ChartingState.hx",1108,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1120_onSaveCancel,"gameFolder.meta.state.ChartingState","onSaveCancel",0x33faab6f,"gameFolder.meta.state.ChartingState.onSaveCancel","gameFolder/meta/state/ChartingState.hx",1120,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_1131_onSaveError,"gameFolder.meta.state.ChartingState","onSaveError",0xeb1bc373,"gameFolder.meta.state.ChartingState.onSaveError","gameFolder/meta/state/ChartingState.hx",1131,0x93f0890a)
HX_LOCAL_STACK_FRAME(_hx_pos_fae24b05502c86ba_61_boot,"gameFolder.meta.state.ChartingState","boot",0x739c140b,"gameFolder.meta.state.ChartingState.boot","gameFolder/meta/state/ChartingState.hx",61,0x93f0890a)
namespace gameFolder{
namespace meta{
namespace state{

void ChartingState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_46_new)
HXLINE(1050)		this->daSpacing = ((Float)0.3);
HXLINE( 491)		this->updatedSection = false;
HXLINE(  89)		this->tempBpm = 0;
HXLINE(  72)		this->GRID_SIZE = 40;
HXLINE(  67)		this->amountSteps = 0;
HXLINE(  66)		this->curSong = HX_("Dadbattle",9f,4a,7c,48);
HXLINE(  59)		this->curNoteType = ((Float)0);
HXLINE(  57)		this->curSection = 0;
HXLINE(  46)		super::__construct(TransIn,TransOut);
            	}

Dynamic ChartingState_obj::__CreateEmpty() { return new ChartingState_obj; }

void *ChartingState_obj::_hx_vtable = 0;

Dynamic ChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartingState_obj > _hx_result = new ChartingState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2fb722a9) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x14ebff83) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x14ebff83;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x2fb722a9;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ChartingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_97_create)
HXLINE(  98)		this->curSection = ::gameFolder::meta::state::ChartingState_obj::lastSection;
HXLINE( 100)		this->gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(this->GRID_SIZE,this->GRID_SIZE,(this->GRID_SIZE * 8),(this->GRID_SIZE * 16),null(),null(),null());
HXLINE( 101)		this->add(this->gridBG);
HXLINE( 103)		Float gridBlackLine = this->gridBG->x;
HXDLIN( 103)		 ::flixel::FlxSprite gridBlackLine1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(gridBlackLine + (this->gridBG->get_width() / ( (Float)(2) ))),null(),null());
HXDLIN( 103)		 ::flixel::FlxSprite gridBlackLine2 = gridBlackLine1->makeGraphic(2,::Std_obj::_hx_int(this->gridBG->get_height()),-16777216,null(),null());
HXLINE( 104)		this->add(gridBlackLine2);
HXLINE( 106)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 107)		this->curRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 109)		if (::hx::IsNotNull( ::gameFolder::meta::state::PlayState_obj::SONG )) {
HXLINE( 110)			this->_song = ::gameFolder::meta::state::PlayState_obj::SONG;
            		}
            		else {
HXLINE( 113)			this->_song =  ::Dynamic(::hx::Anon_obj::Create(10)
            				->setFixed(0,HX_("speed",87,97,69,81),( (Float)(1) ))
            				->setFixed(1,HX_("stage",be,6a,0b,84),HX_("default",c1,d8,c3,9b))
            				->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            				->setFixed(3,HX_("player2",b1,09,15,8a),HX_("dad",47,36,4c,00))
            				->setFixed(4,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(5,HX_("validScore",b6,dc,18,c7),false)
            				->setFixed(6,HX_("bpm",df,be,4a,00),150)
            				->setFixed(7,HX_("needsVoices",be,05,e9,0d),true)
            				->setFixed(8,HX_("song",d5,23,58,4c),HX_("Test",72,f4,d2,37))
            				->setFixed(9,HX_("noteSkin",8f,3b,88,5b),HX_("default",c1,d8,c3,9b)));
            		}
HXLINE( 127)		this->leftIcon =  ::gameFolder::gameObjects::userInterface::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 128)		this->rightIcon =  ::gameFolder::gameObjects::userInterface::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 129)		this->leftIcon->scrollFactor->set(1,1);
HXLINE( 130)		this->rightIcon->scrollFactor->set(1,1);
HXLINE( 132)		this->leftIcon->setGraphicSize(0,45);
HXLINE( 133)		this->rightIcon->setGraphicSize(0,45);
HXLINE( 135)		this->add(this->leftIcon);
HXLINE( 136)		this->add(this->rightIcon);
HXLINE( 138)		this->leftIcon->setPosition(0,-100);
HXLINE( 139)		 ::gameFolder::gameObjects::userInterface::HealthIcon _hx_tmp = this->rightIcon;
HXDLIN( 139)		_hx_tmp->setPosition((this->gridBG->get_width() / ( (Float)(2) )),-100);
HXLINE( 141)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 142)		::flixel::FlxG_obj::save->bind(HX_("funkin",31,b2,4f,6f),HX_("ninjamuffin99",f7,4c,e5,00));
HXLINE( 144)		this->tempBpm = ( (int)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 146)		this->addSection(null());
HXLINE( 150)		this->updateGrid();
HXLINE( 152)		this->loadSong(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 153)		::gameFolder::meta::Conductor_obj::changeBPM(( (int)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 154)		::gameFolder::meta::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 156)		this->bpmTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1000,50,0,HX_("",00,00,00,00),16,null());
HXLINE( 157)		this->bpmTxt->scrollFactor->set(null(),null());
HXLINE( 158)		this->add(this->bpmTxt);
HXLINE( 160)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null());
HXDLIN( 160)		this->strumLine = _hx_tmp1->makeGraphic(::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))),4,null(),null(),null());
HXLINE( 161)		this->add(this->strumLine);
HXLINE( 163)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(this->GRID_SIZE,this->GRID_SIZE,null(),null(),null());
HXLINE( 164)		this->add(this->dummyArrow);
HXLINE( 166)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(3)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Song",f5,4f,31,37))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song",f5,4f,31,37))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Section",c5,2d,29,2b))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Section",c5,2d,29,2b))))->init(2, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Note",12,44,e3,33))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Note",12,44,e3,33))));
HXLINE( 172)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 174)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 175)		this->UI_box->set_x((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )));
HXLINE( 176)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 177)		this->add(this->UI_box);
HXLINE( 179)		this->addSongUI();
HXLINE( 180)		this->addSectionUI();
HXLINE( 181)		this->addNoteUI();
HXLINE( 183)		this->add(this->curRenderedNotes);
HXLINE( 184)		this->add(this->curRenderedSustains);
HXLINE( 186)		this->super::create();
            	}


void ChartingState_obj::addSongUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::gameFolder::meta::state::ChartingState,_gthis, ::flixel::addons::ui::FlxUICheckBox,check_voices) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_198_addSongUI)
HXLINE( 199)			_gthis->_song->__SetField(HX_("needsVoices",be,05,e9,0d),check_voices->checked,::hx::paccDynamic);
HXLINE( 200)			::haxe::Log_obj::trace(HX_("CHECKED!",3a,9f,7d,06),::hx::SourceInfo(HX_("source/gameFolder/meta/state/ChartingState.hx",fe,96,99,22),200,HX_("gameFolder.meta.state.ChartingState",35,df,ef,2d),HX_("addSongUI",6a,02,ad,e5)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUICheckBox,check_mute_inst) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_206_addSongUI)
HXLINE( 207)			Float vol = ( (Float)(1) );
HXLINE( 209)			if (check_mute_inst->checked) {
HXLINE( 210)				vol = ( (Float)(0) );
            			}
HXLINE( 212)			::flixel::FlxG_obj::sound->music->set_volume(vol);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::gameFolder::meta::state::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_217_addSongUI)
HXLINE( 217)			_gthis->saveLevel();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::gameFolder::meta::state::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_228_addSongUI)
HXLINE( 228)			_gthis->loadSong(( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::gameFolder::meta::state::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_233_addSongUI)
HXLINE( 233)			 ::gameFolder::meta::state::ChartingState _gthis1 = _gthis;
HXDLIN( 233)			_gthis1->loadJson(( (::String)(_gthis->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5,::Array< ::String >,stages, ::gameFolder::meta::state::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String stage){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_260_addSongUI)
HXLINE( 260)			::Array< ::String > stages1 = stages;
HXDLIN( 260)			 ::Dynamic curStageDropDown = ::Std_obj::parseInt(stage);
HXDLIN( 260)			_gthis->_song->__SetField(HX_("stage",be,6a,0b,84),stages1->__get(( (int)(curStageDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::gameFolder::meta::state::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_265_addSongUI)
HXLINE( 266)			::Array< ::String > characters1 = characters;
HXDLIN( 266)			 ::Dynamic player1DropDown = ::Std_obj::parseInt(character);
HXDLIN( 266)			_gthis->_song->__SetField(HX_("player1",b0,09,15,8a),characters1->__get(( (int)(player1DropDown) )),::hx::paccDynamic);
HXLINE( 267)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_7, ::gameFolder::meta::state::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_272_addSongUI)
HXLINE( 273)			::Array< ::String > characters1 = characters;
HXDLIN( 273)			 ::Dynamic player2DropDown = ::Std_obj::parseInt(character);
HXDLIN( 273)			_gthis->_song->__SetField(HX_("player2",b1,09,15,8a),characters1->__get(( (int)(player2DropDown) )),::hx::paccDynamic);
HXLINE( 274)			_gthis->updateHeads();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_190_addSongUI)
HXLINE( 189)		 ::gameFolder::meta::state::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 191)		 ::flixel::addons::ui::FlxUIInputText UI_songTitle =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,10,70,( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),8,null(),null(),null());
HXLINE( 192)		this->typingShit = UI_songTitle;
HXLINE( 194)		 ::flixel::addons::ui::FlxUICheckBox check_voices =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,25,null(),null(),HX_("Has voice track",b7,2b,b0,eb),100,null(),null());
HXLINE( 195)		check_voices->set_checked(( (bool)(this->_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) ));
HXLINE( 197)		check_voices->callback =  ::Dynamic(new _hx_Closure_0(_gthis,check_voices));
HXLINE( 203)		 ::flixel::addons::ui::FlxUICheckBox check_mute_inst =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,200,null(),null(),HX_("Mute Instrumental (in editor)",a2,93,a5,ab),100,null(),null());
HXLINE( 204)		check_mute_inst->set_checked(false);
HXLINE( 205)		check_mute_inst->callback =  ::Dynamic(new _hx_Closure_1(check_mute_inst));
HXLINE( 215)		 ::flixel::ui::FlxButton saveButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,8,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 226)		Float saveButton1 = saveButton->x;
HXDLIN( 226)		Float reloadSong = ((saveButton1 + saveButton->get_width()) + 10);
HXDLIN( 226)		 ::flixel::ui::FlxButton reloadSong1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong,saveButton->y,HX_("Reload Audio",cf,9c,c1,ed), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 231)		 ::flixel::ui::FlxButton reloadSongJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong1->x,(saveButton->y + 30),HX_("Reload JSON",2f,1c,a5,4a), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE( 236)		 ::flixel::ui::FlxButton loadAutosaveBtn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSongJson->x,(reloadSongJson->y + 30),HX_("load autosave",66,5f,5a,83),this->loadAutosave_dyn());
HXLINE( 238)		 ::flixel::addons::ui::FlxUINumericStepper stepperSpeed =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,80,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE( 239)		stepperSpeed->set_value(( (Float)(this->_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE( 240)		stepperSpeed->name = HX_("song_speed",5d,10,41,a4);
HXLINE( 242)		 ::flixel::addons::ui::FlxUINumericStepper stepperBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,65,1,1,1,339,0,null(),null(),null(),null(),null());
HXLINE( 243)		stepperBPM->set_value(( (Float)(::gameFolder::meta::Conductor_obj::bpm) ));
HXLINE( 244)		stepperBPM->name = HX_("song_bpm",35,36,15,42);
HXLINE( 246)		::String library = null();
HXDLIN( 246)		::Array< ::String > characters = ::gameFolder::meta::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("characterList",a7,ac,9f,40)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 247)		::Array< ::String > stages = ::Array_obj< ::String >::fromData( _hx_array_data_2defdf35_11,8);
HXLINE( 258)		 ::flixel::addons::ui::FlxUIDropDownMenu curStageDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,125,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(stages,true), ::Dynamic(new _hx_Closure_5(stages,_gthis)),null(),null(),null(),null());
HXLINE( 262)		curStageDropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE( 264)		 ::flixel::addons::ui::FlxUIDropDownMenu player1DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_6(_gthis,characters)),null(),null(),null(),null());
HXLINE( 269)		player1DropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 271)		 ::flixel::addons::ui::FlxUIDropDownMenu player2DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_7(_gthis,characters)),null(),null(),null(),null());
HXLINE( 276)		player2DropDown->set_selectedLabel(( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 278)		 ::flixel::addons::ui::FlxUI tab_group_song =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 279)		tab_group_song->name = HX_("Song",f5,4f,31,37);
HXLINE( 280)		tab_group_song->add(UI_songTitle).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 282)		tab_group_song->add(check_voices).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 283)		tab_group_song->add(check_mute_inst).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 284)		tab_group_song->add(saveButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 286)		tab_group_song->add(reloadSong1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 287)		tab_group_song->add(reloadSongJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 288)		tab_group_song->add(loadAutosaveBtn).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 289)		tab_group_song->add(stepperBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 290)		tab_group_song->add(stepperSpeed).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 291)		tab_group_song->add(player1DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 292)		tab_group_song->add(player2DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 293)		tab_group_song->add(curStageDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 295)		this->UI_box->addGroup(tab_group_song);
HXLINE( 296)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 298)		::flixel::FlxG_obj::camera->follow(this->strumLine,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSongUI,(void))

void ChartingState_obj::addSectionUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::gameFolder::meta::state::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperCopy) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_324_addSectionUI)
HXLINE( 324)			 ::gameFolder::meta::state::ChartingState _gthis1 = _gthis;
HXDLIN( 324)			_gthis1->copySection(::Std_obj::_hx_int(stepperCopy->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::gameFolder::meta::state::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_331_addSectionUI)
HXLINE( 331)			int _g = 0;
HXDLIN( 331)			int _g1 = ( (::cpp::VirtualArray)( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length();
HXDLIN( 331)			while((_g < _g1)){
HXLINE( 331)				_g = (_g + 1);
HXDLIN( 331)				int i = (_g - 1);
HXLINE( 333)				::Array< int > note = ( (::Array< int >)( ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE( 334)				note[1] = ::hx::Mod((note->__get(1) + 4),8);
HXLINE( 335)				 ::Dynamic( ::Dynamic(_gthis->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__SetItem(i,note);
HXLINE( 336)				_gthis->updateGrid();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_308_addSectionUI)
HXLINE( 307)		 ::gameFolder::meta::state::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 309)		 ::flixel::addons::ui::FlxUI tab_group_section =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 310)		tab_group_section->name = HX_("Section",c5,2d,29,2b);
HXLINE( 312)		this->stepperLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,4,0,0,999,0,null(),null(),null(),null(),null());
HXLINE( 313)		this->stepperLength->set_value(( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ));
HXLINE( 314)		this->stepperLength->name = HX_("section_length",40,57,01,c1);
HXLINE( 316)		this->stepperSectionBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,80,1,::gameFolder::meta::Conductor_obj::bpm,0,999,0,null(),null(),null(),null(),null());
HXLINE( 317)		this->stepperSectionBPM->set_value(( (Float)(::gameFolder::meta::Conductor_obj::bpm) ));
HXLINE( 318)		this->stepperSectionBPM->name = HX_("section_bpm",45,60,97,44);
HXLINE( 320)		 ::flixel::addons::ui::FlxUINumericStepper stepperCopy =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,110,130,1,1,-999,999,0,null(),null(),null(),null(),null());
HXLINE( 322)		 ::flixel::ui::FlxButton copyButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,130,HX_("Copy last section",46,61,ca,99), ::Dynamic(new _hx_Closure_0(_gthis,stepperCopy)));
HXLINE( 327)		 ::flixel::ui::FlxButton clearSectionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,150,HX_("Clear",6d,e1,88,db),this->clearSection_dyn());
HXLINE( 329)		 ::flixel::ui::FlxButton swapSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,170,HX_("Swap section",78,0b,70,e2), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 340)		this->check_mustHitSection =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,30,null(),null(),HX_("Must hit section",a1,02,f0,99),100,null(),null());
HXLINE( 341)		this->check_mustHitSection->name = HX_("check_mustHit",13,36,be,48);
HXLINE( 342)		this->check_mustHitSection->set_checked(true);
HXLINE( 345)		this->check_altAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,400,null(),null(),HX_("Alt Animation",0d,81,c1,cd),100,null(),null());
HXLINE( 346)		this->check_altAnim->name = HX_("check_altAnim",23,ee,53,2e);
HXLINE( 348)		this->check_changeBPM =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,60,null(),null(),HX_("Change BPM",2f,3c,7a,fb),100,null(),null());
HXLINE( 349)		this->check_changeBPM->name = HX_("check_changeBPM",d8,2d,43,fc);
HXLINE( 351)		tab_group_section->add(this->stepperLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 352)		tab_group_section->add(this->stepperSectionBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 353)		tab_group_section->add(stepperCopy).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 354)		tab_group_section->add(this->check_mustHitSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 355)		tab_group_section->add(this->check_altAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 356)		tab_group_section->add(this->check_changeBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 357)		tab_group_section->add(copyButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 358)		tab_group_section->add(clearSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 359)		tab_group_section->add(swapSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 361)		this->UI_box->addGroup(tab_group_section);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSectionUI,(void))

void ChartingState_obj::addNoteUI(){
            	HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_368_addNoteUI)
HXLINE( 369)		 ::flixel::addons::ui::FlxUI tab_group_note =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE( 370)		tab_group_note->name = HX_("Note",12,44,e3,33);
HXLINE( 372)		this->stepperSusLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,(::gameFolder::meta::Conductor_obj::stepCrochet / ( (Float)(2) )),0,0,(::gameFolder::meta::Conductor_obj::stepCrochet * ( (Float)(16) )),null(),null(),null(),null(),null(),null());
HXLINE( 373)		this->stepperSusLength->set_value(( (Float)(0) ));
HXLINE( 374)		this->stepperSusLength->name = HX_("note_susLength",8a,6b,51,4b);
HXLINE( 376)		 ::flixel::ui::FlxButton applyLength =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,100,10,HX_("Apply",4e,f5,68,b7),null());
HXLINE( 378)		tab_group_note->add(this->stepperSusLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 379)		tab_group_note->add(applyLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 382)		this->stepperType =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,30,(::gameFolder::meta::Conductor_obj::stepCrochet / ( (Float)(125) )),0,0,((::gameFolder::meta::Conductor_obj::stepCrochet / ( (Float)(125) )) + 10),null(),null(),null(),null(),null(),null());
HXLINE( 384)		this->stepperType->set_value(( (Float)(0) ));
HXLINE( 385)		this->stepperType->name = HX_("note_type",67,e9,79,aa);
HXLINE( 387)		tab_group_note->add(this->stepperType).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 389)		this->UI_box->addGroup(tab_group_note);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNoteUI,(void))

void ChartingState_obj::loadSong(::String daSong){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::gameFolder::meta::state::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_411_loadSong)
HXLINE( 412)			_gthis->vocals->pause();
HXLINE( 413)			_gthis->vocals->set_time(( (Float)(0) ));
HXLINE( 414)			::flixel::FlxG_obj::sound->music->pause();
HXLINE( 415)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE( 416)			_gthis->changeSection(null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_394_loadSong)
HXLINE( 393)		 ::gameFolder::meta::state::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 395)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 397)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 397)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 401)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 401)		_hx_tmp->playMusic((((HX_("assets/songs/",bd,d2,3f,cf) + daSong.toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),((Float)0.6),null(),null());
HXLINE( 404)		 ::flixel::_hx_system::FlxSound _hx_tmp1 =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 404)		this->vocals = _hx_tmp1->loadEmbedded((((HX_("assets/songs/",bd,d2,3f,cf) + daSong.toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
HXLINE( 405)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 407)		::flixel::FlxG_obj::sound->music->pause();
HXLINE( 408)		this->vocals->pause();
HXLINE( 410)		::flixel::FlxG_obj::sound->music->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadSong,(void))

void ChartingState_obj::generateUI(){
            	HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_421_generateUI)
HXLINE( 422)		while((this->bullshitUI->members->get_length() > 0)){
HXLINE( 424)			this->bullshitUI->remove(Dynamic( this->bullshitUI->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE( 428)		 ::flixel::text::FlxText title =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->UI_box->x + 20),(this->UI_box->y + 20),0,null(),null(),null());
HXLINE( 429)		this->bullshitUI->add(title).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateUI,(void))

void ChartingState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_441_getEvent)
HXDLIN( 441)		if ((id == HX_("click_check_box",dd,c1,1e,a8))) {
HXLINE( 443)			 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(sender) );
HXLINE( 444)			::String label = check->getLabel()->text;
HXLINE( 445)			::String _hx_switch_0 = label;
            			if (  (_hx_switch_0==HX_("Alt Animation",0d,81,c1,cd)) ){
HXLINE( 456)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("altAnim",da,f3,f2,e5),check->checked,::hx::paccDynamic);
HXDLIN( 456)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==HX_("Change BPM",2f,3c,7a,fb)) ){
HXLINE( 453)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("changeBPM",4f,4f,f8,1d),check->checked,::hx::paccDynamic);
HXDLIN( 453)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==HX_("Must hit section",a1,02,f0,99)) ){
HXLINE( 448)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("mustHitSection",3b,5f,87,62),check->checked,::hx::paccDynamic);
HXLINE( 450)				this->updateHeads();
HXLINE( 447)				goto _hx_goto_21;
            			}
            			_hx_goto_21:;
            		}
            		else {
HXLINE( 459)			bool _hx_tmp;
HXDLIN( 459)			if ((id == HX_("change_numeric_stepper",50,0a,cc,bb))) {
HXLINE( 459)				_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >());
            			}
            			else {
HXLINE( 459)				_hx_tmp = false;
            			}
HXDLIN( 459)			if (_hx_tmp) {
HXLINE( 461)				 ::flixel::addons::ui::FlxUINumericStepper nums = ( ( ::flixel::addons::ui::FlxUINumericStepper)(sender) );
HXLINE( 462)				::String wname = nums->name;
HXLINE( 465)				::String _hx_switch_1 = wname;
            				if (  (_hx_switch_1==HX_("note_susLength",8a,6b,51,4b)) ){
HXLINE( 477)					this->curSelectedNote->set(2,nums->value);
HXLINE( 478)					this->updateGrid();
HXLINE( 476)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_1==HX_("note_type",67,e9,79,aa)) ){
HXLINE( 480)					this->curNoteType = nums->value;
HXDLIN( 480)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_1==HX_("section_bpm",45,60,97,44)) ){
HXLINE( 483)					 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("bpm",df,be,4a,00),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE( 484)					this->updateGrid();
HXLINE( 482)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_1==HX_("section_length",40,57,01,c1)) ){
HXLINE( 468)					 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("lengthInSteps",3c,ed,41,db),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE( 469)					this->updateGrid();
HXLINE( 467)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_1==HX_("song_bpm",35,36,15,42)) ){
HXLINE( 473)					this->tempBpm = ::Std_obj::_hx_int(nums->value);
HXLINE( 474)					::gameFolder::meta::Conductor_obj::mapBPMChanges(this->_song);
HXLINE( 475)					::gameFolder::meta::Conductor_obj::changeBPM(::Std_obj::_hx_int(nums->value));
HXLINE( 472)					goto _hx_goto_22;
            				}
            				if (  (_hx_switch_1==HX_("song_speed",5d,10,41,a4)) ){
HXLINE( 471)					this->_song->__SetField(HX_("speed",87,97,69,81),nums->value,::hx::paccDynamic);
HXDLIN( 471)					goto _hx_goto_22;
            				}
            				_hx_goto_22:;
            			}
            		}
            	}


Float ChartingState_obj::sectionStartTime(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_502_sectionStartTime)
HXLINE( 503)		int daBPM = ( (int)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 504)		Float daPos = ( (Float)(0) );
HXLINE( 505)		{
HXLINE( 505)			int _g = 0;
HXDLIN( 505)			int _g1 = this->curSection;
HXDLIN( 505)			while((_g < _g1)){
HXLINE( 505)				_g = (_g + 1);
HXDLIN( 505)				int i = (_g - 1);
HXLINE( 507)				if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 509)					daBPM = ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXLINE( 511)				daPos = (daPos + (( (Float)(4) ) * (( (Float)(60000) ) / ( (Float)(daBPM) ))));
            			}
            		}
HXLINE( 513)		return daPos;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,sectionStartTime,return )

void ChartingState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_517_update)
HXLINE( 516)		 ::gameFolder::meta::state::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 518)		this->curStep = this->recalculateSteps();
HXLINE( 520)		::gameFolder::meta::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE( 521)		this->_song->__SetField(HX_("song",d5,23,58,4c),this->typingShit->text,::hx::paccDynamic);
HXLINE( 523)		 ::flixel::FlxSprite _hx_tmp = this->strumLine;
HXDLIN( 523)		Float _hx_tmp1 = ::gameFolder::meta::Conductor_obj::songPosition;
HXDLIN( 523)		Float _hx_tmp2 = (_hx_tmp1 - this->sectionStartTime());
HXDLIN( 523)		_hx_tmp->set_y(this->getYfromStrum(::hx::Mod(_hx_tmp2,(::gameFolder::meta::Conductor_obj::stepCrochet * ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) )))));
HXLINE( 525)		bool _hx_tmp3;
HXDLIN( 525)		if ((::hx::Mod(this->curBeat,4) == 0)) {
HXLINE( 525)			_hx_tmp3 = (this->curStep >= (16 * (this->curSection + 1)));
            		}
            		else {
HXLINE( 525)			_hx_tmp3 = false;
            		}
HXDLIN( 525)		if (_hx_tmp3) {
HXLINE( 527)			::haxe::Log_obj::trace(this->curStep,::hx::SourceInfo(HX_("source/gameFolder/meta/state/ChartingState.hx",fe,96,99,22),527,HX_("gameFolder.meta.state.ChartingState",35,df,ef,2d),HX_("update",09,86,05,87)));
HXLINE( 528)			::haxe::Log_obj::trace((( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * (this->curSection + 1)),::hx::SourceInfo(HX_("source/gameFolder/meta/state/ChartingState.hx",fe,96,99,22),528,HX_("gameFolder.meta.state.ChartingState",35,df,ef,2d),HX_("update",09,86,05,87)));
HXLINE( 529)			::haxe::Log_obj::trace(HX_("DUMBSHIT",e6,67,07,01),::hx::SourceInfo(HX_("source/gameFolder/meta/state/ChartingState.hx",fe,96,99,22),529,HX_("gameFolder.meta.state.ChartingState",35,df,ef,2d),HX_("update",09,86,05,87)));
HXLINE( 531)			if (::hx::IsNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((this->curSection + 1)) )) {
HXLINE( 533)				this->addSection(null());
            			}
HXLINE( 536)			this->changeSection((this->curSection + 1),false);
            		}
HXLINE( 542)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 544)			if (::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null())) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::gameFolder::meta::state::ChartingState,_gthis) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::Note note){
            					HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_548_update)
HXLINE( 548)					if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE( 550)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 550)						if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE( 552)							_gthis->selectNote(note);
            						}
            						else {
HXLINE( 556)							::haxe::Log_obj::trace(HX_("tryin to delete note...",0c,35,c3,ba),::hx::SourceInfo(HX_("source/gameFolder/meta/state/ChartingState.hx",fe,96,99,22),556,HX_("gameFolder.meta.state.ChartingState",35,df,ef,2d),HX_("update",09,86,05,87)));
HXLINE( 557)							_gthis->deleteNote(note);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 546)				this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            			else {
HXLINE( 564)				bool _hx_tmp;
HXDLIN( 564)				bool _hx_tmp1;
HXDLIN( 564)				bool _hx_tmp2;
HXDLIN( 564)				if ((::flixel::FlxG_obj::mouse->x > this->gridBG->x)) {
HXLINE( 565)					int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN( 565)					Float _hx_tmp1 = this->gridBG->x;
HXLINE( 564)					_hx_tmp2 = (_hx_tmp < (_hx_tmp1 + this->gridBG->get_width()));
            				}
            				else {
HXLINE( 564)					_hx_tmp2 = false;
            				}
HXDLIN( 564)				if (_hx_tmp2) {
HXLINE( 564)					_hx_tmp1 = (::flixel::FlxG_obj::mouse->y > this->gridBG->y);
            				}
            				else {
HXLINE( 564)					_hx_tmp1 = false;
            				}
HXDLIN( 564)				if (_hx_tmp1) {
HXLINE( 564)					_hx_tmp = (::flixel::FlxG_obj::mouse->y < (this->gridBG->y + (this->GRID_SIZE * ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ))));
            				}
            				else {
HXLINE( 564)					_hx_tmp = false;
            				}
HXDLIN( 564)				if (_hx_tmp) {
HXLINE( 570)					this->addNote();
            				}
            			}
            		}
HXLINE( 575)		bool _hx_tmp4;
HXDLIN( 575)		bool _hx_tmp5;
HXDLIN( 575)		bool _hx_tmp6;
HXDLIN( 575)		if ((::flixel::FlxG_obj::mouse->x > this->gridBG->x)) {
HXLINE( 576)			int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN( 576)			Float _hx_tmp1 = this->gridBG->x;
HXLINE( 575)			_hx_tmp6 = (_hx_tmp < (_hx_tmp1 + this->gridBG->get_width()));
            		}
            		else {
HXLINE( 575)			_hx_tmp6 = false;
            		}
HXDLIN( 575)		if (_hx_tmp6) {
HXLINE( 575)			_hx_tmp5 = (::flixel::FlxG_obj::mouse->y > this->gridBG->y);
            		}
            		else {
HXLINE( 575)			_hx_tmp5 = false;
            		}
HXDLIN( 575)		if (_hx_tmp5) {
HXLINE( 575)			_hx_tmp4 = (::flixel::FlxG_obj::mouse->y < (this->gridBG->y + (this->GRID_SIZE * ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ))));
            		}
            		else {
HXLINE( 575)			_hx_tmp4 = false;
            		}
HXDLIN( 575)		if (_hx_tmp4) {
HXLINE( 580)			this->dummyArrow->set_x(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
HXLINE( 581)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 581)			if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE( 582)				this->dummyArrow->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
            			}
            			else {
HXLINE( 584)				this->dummyArrow->set_y(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->y) ) / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
            			}
            		}
HXLINE( 587)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 587)		if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE( 589)			::gameFolder::meta::state::ChartingState_obj::lastSection = this->curSection;
HXLINE( 591)			::gameFolder::meta::state::PlayState_obj::SONG = this->_song;
HXLINE( 592)			{
HXLINE( 592)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 592)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE( 593)			{
HXLINE( 593)				 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN( 593)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE( 594)			{
HXLINE( 594)				 ::flixel::FlxState nextState =  ::gameFolder::meta::state::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 594)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 594)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 597)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 597)		if (_this1->keyManager->checkStatus(69,_this1->status)) {
HXLINE( 599)			this->changeNoteSustain(::gameFolder::meta::Conductor_obj::stepCrochet);
            		}
HXLINE( 601)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 601)		if (_this2->keyManager->checkStatus(81,_this2->status)) {
HXLINE( 603)			this->changeNoteSustain(-(::gameFolder::meta::Conductor_obj::stepCrochet));
            		}
HXLINE( 606)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 606)		if (_this3->keyManager->checkStatus(9,_this3->status)) {
HXLINE( 608)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 608)			if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE( 610)				{
HXLINE( 610)					 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN( 610)					_g->set_selected_tab((_g->get_selected_tab() - 1));
            				}
HXLINE( 611)				if ((this->UI_box->get_selected_tab() < 0)) {
HXLINE( 612)					this->UI_box->set_selected_tab(2);
            				}
            			}
            			else {
HXLINE( 616)				{
HXLINE( 616)					 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN( 616)					_g->set_selected_tab((_g->get_selected_tab() + 1));
            				}
HXLINE( 617)				if ((this->UI_box->get_selected_tab() >= 3)) {
HXLINE( 618)					this->UI_box->set_selected_tab(0);
            				}
            			}
            		}
HXLINE( 622)		if (!(this->typingShit->hasFocus)) {
HXLINE( 624)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 624)			if (_this->keyManager->checkStatus(32,_this->status)) {
HXLINE( 626)				if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 628)					::flixel::FlxG_obj::sound->music->pause();
HXLINE( 629)					this->vocals->pause();
            				}
            				else {
HXLINE( 633)					this->vocals->play(null(),null(),null());
HXLINE( 634)					::flixel::FlxG_obj::sound->music->play(null(),null(),null());
            				}
            			}
HXLINE( 638)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 638)			if (_this1->keyManager->checkStatus(82,_this1->status)) {
HXLINE( 640)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 640)				if (_this->keyManager->checkStatus(16,_this->status)) {
HXLINE( 641)					this->resetSection(true);
            				}
            				else {
HXLINE( 643)					this->resetSection(null());
            				}
            			}
HXLINE( 646)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 648)				::flixel::FlxG_obj::sound->music->pause();
HXLINE( 649)				this->vocals->pause();
HXLINE( 651)				{
HXLINE( 651)					 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 651)					_g->set_time((_g->_time - ((( (Float)(::flixel::FlxG_obj::mouse->wheel) ) * ::gameFolder::meta::Conductor_obj::stepCrochet) * ((Float)0.4))));
            				}
HXLINE( 652)				this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            			}
HXLINE( 655)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 655)			if (!(_this2->keyManager->checkStatus(16,_this2->status))) {
HXLINE( 657)				bool _hx_tmp;
HXDLIN( 657)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 657)				if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE( 657)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 657)					_hx_tmp = _this->keyManager->checkStatus(83,_this->status);
            				}
            				else {
HXLINE( 657)					_hx_tmp = true;
            				}
HXDLIN( 657)				if (_hx_tmp) {
HXLINE( 659)					::flixel::FlxG_obj::sound->music->pause();
HXLINE( 660)					this->vocals->pause();
HXLINE( 662)					Float daTime = (( (Float)(700) ) * ::flixel::FlxG_obj::elapsed);
HXLINE( 664)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 664)					if (_this->keyManager->checkStatus(87,_this->status)) {
HXLINE( 666)						 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 666)						_g->set_time((_g->_time - daTime));
            					}
            					else {
HXLINE( 669)						 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 669)						_g->set_time((_g->_time + daTime));
            					}
HXLINE( 671)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
            			}
            			else {
HXLINE( 676)				bool _hx_tmp;
HXDLIN( 676)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 676)				if (!(_this->keyManager->checkStatus(87,_this->status))) {
HXLINE( 676)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 676)					_hx_tmp = _this->keyManager->checkStatus(83,_this->status);
            				}
            				else {
HXLINE( 676)					_hx_tmp = true;
            				}
HXDLIN( 676)				if (_hx_tmp) {
HXLINE( 678)					::flixel::FlxG_obj::sound->music->pause();
HXLINE( 679)					this->vocals->pause();
HXLINE( 681)					Float daTime = (::gameFolder::meta::Conductor_obj::stepCrochet * ( (Float)(2) ));
HXLINE( 683)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 683)					if (_this->keyManager->checkStatus(87,_this->status)) {
HXLINE( 685)						 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 685)						_g->set_time((_g->_time - daTime));
            					}
            					else {
HXLINE( 688)						 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 688)						_g->set_time((_g->_time + daTime));
            					}
HXLINE( 690)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
            			}
            		}
HXLINE( 695)		this->_song->__SetField(HX_("bpm",df,be,4a,00),this->tempBpm,::hx::paccDynamic);
HXLINE( 702)		int shiftThing = 1;
HXLINE( 703)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 703)		if (_this4->keyManager->checkStatus(16,_this4->status)) {
HXLINE( 704)			shiftThing = 4;
            		}
HXLINE( 705)		bool _hx_tmp7;
HXDLIN( 705)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 705)		if (!(_this5->keyManager->checkStatus(39,_this5->status))) {
HXLINE( 705)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 705)			_hx_tmp7 = _this->keyManager->checkStatus(68,_this->status);
            		}
            		else {
HXLINE( 705)			_hx_tmp7 = true;
            		}
HXDLIN( 705)		if (_hx_tmp7) {
HXLINE( 706)			this->changeSection((this->curSection + shiftThing),null());
            		}
HXLINE( 707)		bool _hx_tmp8;
HXDLIN( 707)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 707)		if (!(_this6->keyManager->checkStatus(37,_this6->status))) {
HXLINE( 707)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 707)			_hx_tmp8 = _this->keyManager->checkStatus(65,_this->status);
            		}
            		else {
HXLINE( 707)			_hx_tmp8 = true;
            		}
HXDLIN( 707)		if (_hx_tmp8) {
HXLINE( 708)			this->changeSection((this->curSection - shiftThing),null());
            		}
HXLINE( 710)		 ::flixel::text::FlxText _hx_tmp9 = this->bpmTxt;
HXDLIN( 710)		 ::flixel::text::FlxText _hx_tmp10 = this->bpmTxt;
HXDLIN( 710)		::String _hx_tmp11 = (::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::gameFolder::meta::Conductor_obj::songPosition / ( (Float)(1000) )),2)) + HX_(" / ",31,71,18,00));
HXDLIN( 710)		::String _hx_tmp12 = ((_hx_tmp11 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),2))) + HX_("\nSection: ",61,ca,0c,ad));
HXDLIN( 710)		_hx_tmp9->set_text(_hx_tmp10->set_text((_hx_tmp12 + this->curSection)));
HXLINE( 715)		this->super::update(elapsed);
            	}


void ChartingState_obj::changeNoteSustain(Float value){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_719_changeNoteSustain)
HXLINE( 720)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE( 722)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE( 724)				::cpp::VirtualArray _hx_tmp = this->curSelectedNote;
HXDLIN( 724)				int _hx_tmp1 = 2;
HXDLIN( 724)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + value));
HXLINE( 725)				this->curSelectedNote->set(2,::Math_obj::max(( (Float)(this->curSelectedNote->__get(2)) ),( (Float)(0) )));
            			}
            		}
HXLINE( 729)		this->updateNoteUI();
HXLINE( 730)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,changeNoteSustain,(void))

int ChartingState_obj::recalculateSteps(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_734_recalculateSteps)
HXLINE( 735)		 ::Dynamic lastChange =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("stepTime",79,75,25,a0),0)
            			->setFixed(1,HX_("bpm",df,be,4a,00),0)
            			->setFixed(2,HX_("songTime",82,2a,d5,3a),( (Float)(0) )));
HXLINE( 740)		{
HXLINE( 740)			int _g = 0;
HXDLIN( 740)			int _g1 = ::gameFolder::meta::Conductor_obj::bpmChangeMap->length;
HXDLIN( 740)			while((_g < _g1)){
HXLINE( 740)				_g = (_g + 1);
HXDLIN( 740)				int i = (_g - 1);
HXLINE( 742)				if (::hx::IsGreater( ::flixel::FlxG_obj::sound->music->_time,::gameFolder::meta::Conductor_obj::bpmChangeMap->__get(i)->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic) )) {
HXLINE( 743)					lastChange = ::gameFolder::meta::Conductor_obj::bpmChangeMap->__get(i);
            				}
            			}
            		}
HXLINE( 746)		this->curStep = ( (int)((lastChange->__Field(HX_("stepTime",79,75,25,a0),::hx::paccDynamic) + ::Math_obj::floor(((::flixel::FlxG_obj::sound->music->_time - ( (Float)(lastChange->__Field(HX_("songTime",82,2a,d5,3a),::hx::paccDynamic)) )) / ::gameFolder::meta::Conductor_obj::stepCrochet)))) );
HXLINE( 747)		this->updateBeat();
HXLINE( 749)		return this->curStep;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,recalculateSteps,return )

void ChartingState_obj::resetSection(::hx::Null< bool >  __o_songBeginning){
            		bool songBeginning = __o_songBeginning.Default(false);
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_753_resetSection)
HXLINE( 754)		this->updateGrid();
HXLINE( 756)		::flixel::FlxG_obj::sound->music->pause();
HXLINE( 757)		this->vocals->pause();
HXLINE( 760)		 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN( 760)		_hx_tmp->set_time(this->sectionStartTime());
HXLINE( 762)		if (songBeginning) {
HXLINE( 764)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE( 765)			this->curSection = 0;
            		}
HXLINE( 768)		this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE( 769)		this->updateCurStep();
HXLINE( 771)		this->updateGrid();
HXLINE( 772)		this->updateSectionUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,resetSection,(void))

void ChartingState_obj::changeSection(::hx::Null< int >  __o_sec, ::Dynamic __o_updateMusic){
            		int sec = __o_sec.Default(0);
            		 ::Dynamic updateMusic = __o_updateMusic;
            		if (::hx::IsNull(__o_updateMusic)) updateMusic = true;
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_776_changeSection)
HXLINE( 777)		::haxe::Log_obj::trace((HX_("changing section",72,75,c1,9c) + sec),::hx::SourceInfo(HX_("source/gameFolder/meta/state/ChartingState.hx",fe,96,99,22),777,HX_("gameFolder.meta.state.ChartingState",35,df,ef,2d),HX_("changeSection",55,aa,ac,be)));
HXLINE( 779)		if (::hx::IsNotNull(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec) )) {
HXLINE( 781)			this->curSection = sec;
HXLINE( 783)			this->updateGrid();
HXLINE( 785)			if (( (bool)(updateMusic) )) {
HXLINE( 787)				::flixel::FlxG_obj::sound->music->pause();
HXLINE( 788)				this->vocals->pause();
HXLINE( 798)				 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN( 798)				_hx_tmp->set_time(this->sectionStartTime());
HXLINE( 799)				this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE( 800)				this->updateCurStep();
            			}
HXLINE( 803)			this->updateGrid();
HXLINE( 804)			this->updateSectionUI();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,changeSection,(void))

void ChartingState_obj::copySection( ::Dynamic __o_sectionNum){
            		 ::Dynamic sectionNum = __o_sectionNum;
            		if (::hx::IsNull(__o_sectionNum)) sectionNum = 1;
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_809_copySection)
HXLINE( 810)		int a = this->curSection;
HXDLIN( 810)		int b = ( (int)(sectionNum) );
HXDLIN( 810)		int daSec;
HXDLIN( 810)		if ((a > b)) {
HXLINE( 810)			daSec = a;
            		}
            		else {
HXLINE( 810)			daSec = b;
            		}
HXLINE( 812)		{
HXLINE( 812)			int _g = 0;
HXDLIN( 812)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((daSec - ( (int)(sectionNum) )))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 812)			while((_g < _g1->get_length())){
HXLINE( 812)				 ::Dynamic note = _g1->__get(_g);
HXDLIN( 812)				_g = (_g + 1);
HXLINE( 814)				Float strum = (note->__GetItem(0) + (::gameFolder::meta::Conductor_obj::stepCrochet * ( (Float)((( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * ( (int)(sectionNum) ))) )));
HXLINE( 816)				::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(3)->init(0,strum)->init(1,note->__GetItem(1))->init(2,note->__GetItem(2));
HXLINE( 817)				( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            			}
            		}
HXLINE( 820)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,copySection,(void))

void ChartingState_obj::updateSectionUI(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_824_updateSectionUI)
HXLINE( 825)		 ::Dynamic sec =  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection);
HXLINE( 827)		this->stepperLength->set_value(( (Float)(sec->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ));
HXLINE( 828)		this->check_mustHitSection->set_checked(( (bool)(sec->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE( 829)		this->check_altAnim->set_checked(( (bool)(sec->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) ));
HXLINE( 830)		this->check_changeBPM->set_checked(( (bool)(sec->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) ));
HXLINE( 831)		this->stepperSectionBPM->set_value(( (Float)(sec->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 833)		this->updateHeads();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateSectionUI,(void))

void ChartingState_obj::updateHeads(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_838_updateHeads)
HXDLIN( 838)		if (this->check_mustHitSection->checked) {
HXLINE( 840)			this->leftIcon->animation->play(( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
HXLINE( 841)			this->rightIcon->animation->play(( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            		}
            		else {
HXLINE( 845)			this->leftIcon->animation->play(( (::String)(this->_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
HXLINE( 846)			this->rightIcon->animation->play(( (::String)(this->_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateHeads,(void))

void ChartingState_obj::updateNoteUI(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_852_updateNoteUI)
HXDLIN( 852)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE( 853)			this->stepperSusLength->set_value(( (Float)(this->curSelectedNote->__get(2)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateNoteUI,(void))

void ChartingState_obj::updateGrid(){
            	HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_857_updateGrid)
HXLINE( 858)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE( 860)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::gameFolder::gameObjects::Note >(),true).StaticCast<  ::gameFolder::gameObjects::Note >();
            		}
HXLINE( 863)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE( 865)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE( 868)		::cpp::VirtualArray sectionInfo = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXLINE( 870)		bool _hx_tmp;
HXDLIN( 870)		if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 870)			_hx_tmp = ::hx::IsGreater(  ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 870)			_hx_tmp = false;
            		}
HXDLIN( 870)		if (_hx_tmp) {
HXLINE( 872)			::gameFolder::meta::Conductor_obj::changeBPM(( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 878)			int daBPM = ( (int)(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 879)			{
HXLINE( 879)				int _g = 0;
HXDLIN( 879)				int _g1 = this->curSection;
HXDLIN( 879)				while((_g < _g1)){
HXLINE( 879)					_g = (_g + 1);
HXDLIN( 879)					int i = (_g - 1);
HXLINE( 880)					if (( (bool)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 881)						daBPM = ( (int)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
            				}
            			}
HXLINE( 882)			::gameFolder::meta::Conductor_obj::changeBPM(daBPM);
            		}
HXLINE( 899)		{
HXLINE( 899)			int _g = 0;
HXDLIN( 899)			while((_g < sectionInfo->get_length())){
HXLINE( 899)				 ::Dynamic i = sectionInfo->__get(_g);
HXDLIN( 899)				_g = (_g + 1);
HXLINE( 901)				int daNoteInfo = ( (int)(i->__GetItem(1)) );
HXLINE( 902)				Float daStrumTime = ( (Float)(i->__GetItem(0)) );
HXLINE( 903)				Float daSus = ( (Float)(i->__GetItem(2)) );
HXLINE( 904)				int daNoteType = 0;
HXLINE( 906)				if (::hx::IsGreater( i->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),2 )) {
HXLINE( 907)					daNoteType = ( (int)(i->__GetItem(3)) );
            				}
HXLINE( 909)				 ::gameFolder::gameObjects::Note note =  ::gameFolder::gameObjects::Note_obj::__alloc( HX_CTX ,daStrumTime,::hx::Mod(daNoteInfo,4),( (Float)(daNoteType) ),null(),null());
HXLINE( 910)				note->sustainLength = daSus;
HXLINE( 911)				note->noteType = ( (Float)(daNoteType) );
HXLINE( 912)				note->setGraphicSize(this->GRID_SIZE,this->GRID_SIZE);
HXLINE( 913)				note->updateHitbox();
HXLINE( 914)				note->set_x(( (Float)(::Math_obj::floor(( (Float)((daNoteInfo * this->GRID_SIZE)) ))) ));
HXLINE( 915)				Float _hx_tmp = (daStrumTime - this->sectionStartTime());
HXDLIN( 915)				note->set_y(( (Float)(::Math_obj::floor(this->getYfromStrum(::hx::Mod(_hx_tmp,(::gameFolder::meta::Conductor_obj::stepCrochet * ( (Float)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) )))))) ));
HXLINE( 917)				this->curRenderedNotes->add(note).StaticCast<  ::gameFolder::gameObjects::Note >();
HXLINE( 919)				if ((daSus > 0)) {
HXLINE( 921)					 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(note->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(note->y + this->GRID_SIZE),null());
HXLINE( 922)					Float sustainVis1 = (::gameFolder::meta::Conductor_obj::stepCrochet * ( (Float)(16) ));
HXLINE( 921)					 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(::flixel::math::FlxMath_obj::remapToRange(daSus,( (Float)(0) ),sustainVis1,( (Float)(0) ),this->gridBG->get_height())),null(),null(),null());
HXLINE( 923)					this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateGrid,(void))

void ChartingState_obj::addSection(::hx::Null< int >  __o_lengthInSteps){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_929_addSection)
HXLINE( 930)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(3,HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0))
            			->setFixed(4,HX_("bpm",df,be,4a,00), ::Dynamic(this->_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(5,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(6,HX_("mustHitSection",3b,5f,87,62),true));
HXLINE( 940)		( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push(sec);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addSection,(void))

void ChartingState_obj::selectNote( ::gameFolder::gameObjects::Note note){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_944_selectNote)
HXLINE( 945)		int swagNum = 0;
HXLINE( 947)		{
HXLINE( 947)			int _g = 0;
HXDLIN( 947)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 947)			while((_g < _g1->get_length())){
HXLINE( 947)				 ::Dynamic i = _g1->__get(_g);
HXDLIN( 947)				_g = (_g + 1);
HXLINE( 949)				bool _hx_tmp;
HXDLIN( 949)				if (::hx::IsEq( i->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic),note->strumTime )) {
HXLINE( 949)					_hx_tmp = (::hx::Mod(i->__Field(HX_("noteData",3c,7b,96,51),::hx::paccDynamic),4) == note->noteData);
            				}
            				else {
HXLINE( 949)					_hx_tmp = false;
            				}
HXDLIN( 949)				if (_hx_tmp) {
HXLINE( 951)					this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(swagNum)) );
            				}
HXLINE( 954)				swagNum = (swagNum + 1);
            			}
            		}
HXLINE( 957)		this->updateGrid();
HXLINE( 958)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,selectNote,(void))

void ChartingState_obj::deleteNote( ::gameFolder::gameObjects::Note note){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_962_deleteNote)
HXLINE( 963)		{
HXLINE( 963)			int _g = 0;
HXDLIN( 963)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 963)			while((_g < _g1->get_length())){
HXLINE( 963)				 ::Dynamic i = _g1->__get(_g);
HXDLIN( 963)				_g = (_g + 1);
HXLINE( 965)				bool _hx_tmp;
HXDLIN( 965)				if (::hx::IsEq( i->__GetItem(0),note->strumTime )) {
HXLINE( 965)					_hx_tmp = (::hx::Mod(i->__GetItem(1),4) == note->noteData);
            				}
            				else {
HXLINE( 965)					_hx_tmp = false;
            				}
HXDLIN( 965)				if (_hx_tmp) {
HXLINE( 968)					( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            				}
            			}
            		}
HXLINE( 972)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,deleteNote,(void))

void ChartingState_obj::clearSection(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_976_clearSection)
HXLINE( 977)		 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
HXLINE( 979)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSection,(void))

void ChartingState_obj::clearSong(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_983_clearSong)
HXLINE( 984)		{
HXLINE( 984)			int _g = 0;
HXDLIN( 984)			int _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN( 984)			while((_g < _g1)){
HXLINE( 984)				_g = (_g + 1);
HXDLIN( 984)				int daSection = (_g - 1);
HXLINE( 986)				 ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
            			}
            		}
HXLINE( 989)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSong,(void))

void ChartingState_obj::addNote(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_993_addNote)
HXLINE( 994)		Float noteStrum = this->getStrumTime(this->dummyArrow->y);
HXDLIN( 994)		Float noteStrum1 = (noteStrum + this->sectionStartTime());
HXLINE( 995)		int noteData = ::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) )));
HXLINE( 996)		Float noteType = this->curNoteType;
HXLINE( 997)		int noteSus = 0;
HXLINE( 999)		( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(4)->init(0,noteStrum1)->init(1,noteData)->init(2,noteSus)->init(3,noteType));
HXLINE(1001)		this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length() - 1))) );
HXLINE(1003)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1003)		if (_this->keyManager->checkStatus(17,_this->status)) {
HXLINE(1005)			( (::cpp::VirtualArray)( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(4)->init(0,noteStrum1)->init(1,::hx::Mod((noteData + 4),8))->init(2,noteSus)->init(3,noteType));
            		}
HXLINE(1008)		::haxe::Log_obj::trace(noteStrum1,::hx::SourceInfo(HX_("source/gameFolder/meta/state/ChartingState.hx",fe,96,99,22),1008,HX_("gameFolder.meta.state.ChartingState",35,df,ef,2d),HX_("addNote",b3,5a,47,85)));
HXLINE(1009)		::haxe::Log_obj::trace(this->curSection,::hx::SourceInfo(HX_("source/gameFolder/meta/state/ChartingState.hx",fe,96,99,22),1009,HX_("gameFolder.meta.state.ChartingState",35,df,ef,2d),HX_("addNote",b3,5a,47,85)));
HXLINE(1011)		this->updateGrid();
HXLINE(1012)		this->updateNoteUI();
HXLINE(1014)		this->autosaveSong();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNote,(void))

Float ChartingState_obj::getStrumTime(Float yPos){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_1019_getStrumTime)
HXDLIN(1019)		Float _hx_tmp = this->gridBG->y;
HXDLIN(1019)		Float _hx_tmp1 = this->gridBG->y;
HXDLIN(1019)		Float _hx_tmp2 = (_hx_tmp1 + this->gridBG->get_height());
HXDLIN(1019)		return ::flixel::math::FlxMath_obj::remapToRange(yPos,_hx_tmp,_hx_tmp2,( (Float)(0) ),(( (Float)(16) ) * ::gameFolder::meta::Conductor_obj::stepCrochet));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getStrumTime,return )

Float ChartingState_obj::getYfromStrum(Float strumTime){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_1024_getYfromStrum)
HXDLIN(1024)		Float _hx_tmp = (( (Float)(16) ) * ::gameFolder::meta::Conductor_obj::stepCrochet);
HXDLIN(1024)		Float _hx_tmp1 = this->gridBG->y;
HXDLIN(1024)		Float _hx_tmp2 = this->gridBG->y;
HXDLIN(1024)		return ::flixel::math::FlxMath_obj::remapToRange(strumTime,( (Float)(0) ),_hx_tmp,_hx_tmp1,(_hx_tmp2 + this->gridBG->get_height()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getYfromStrum,return )

void ChartingState_obj::loadLevel(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_1054_loadLevel)
HXDLIN(1054)		::haxe::Log_obj::trace( ::Dynamic(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)),::hx::SourceInfo(HX_("source/gameFolder/meta/state/ChartingState.hx",fe,96,99,22),1054,HX_("gameFolder.meta.state.ChartingState",35,df,ef,2d),HX_("loadLevel",7e,61,9a,8d)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadLevel,(void))

::cpp::VirtualArray ChartingState_obj::getNotes(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_1058_getNotes)
HXLINE(1059)		::cpp::VirtualArray noteData = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1061)		{
HXLINE(1061)			int _g = 0;
HXDLIN(1061)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1061)			while((_g < _g1->length)){
HXLINE(1061)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(1061)				_g = (_g + 1);
HXLINE(1063)				noteData->push( ::Dynamic(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)));
            			}
            		}
HXLINE(1066)		return noteData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,getNotes,return )

void ChartingState_obj::loadJson(::String song){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_1070_loadJson)
HXLINE(1071)		::String _hx_tmp = song.toLowerCase();
HXDLIN(1071)		::gameFolder::meta::state::PlayState_obj::SONG = ::gameFolder::meta::data::Song_obj::loadFromJson(_hx_tmp,song.toLowerCase());
HXLINE(1072)		{
HXLINE(1072)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN(1072)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1072)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadJson,(void))

void ChartingState_obj::loadAutosave(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_1076_loadAutosave)
HXLINE(1077)		::gameFolder::meta::state::PlayState_obj::SONG = ::gameFolder::meta::data::Song_obj::parseJSONshit(( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("autosave",2c,4e,9a,44),::hx::paccDynamic)) ));
HXLINE(1078)		{
HXLINE(1078)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN(1078)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1078)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadAutosave,(void))

void ChartingState_obj::autosaveSong(){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_1082_autosaveSong)
HXLINE(1083)		 ::Dynamic replacer = null();
HXDLIN(1083)		::String space = null();
HXDLIN(1083)		::String _hx_tmp = ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),this->_song)),replacer,space);
HXDLIN(1083)		::flixel::FlxG_obj::save->data->__SetField(HX_("autosave",2c,4e,9a,44),_hx_tmp,::hx::paccDynamic);
HXLINE(1086)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,autosaveSong,(void))

void ChartingState_obj::saveLevel(){
            	HX_GC_STACKFRAME(&_hx_pos_fae24b05502c86ba_1090_saveLevel)
HXLINE(1091)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),this->_song));
HXLINE(1095)		 ::Dynamic replacer = null();
HXDLIN(1095)		::String space = null();
HXDLIN(1095)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,space);
HXLINE(1097)		bool _hx_tmp;
HXDLIN(1097)		if (::hx::IsNotNull( data )) {
HXLINE(1097)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE(1097)			_hx_tmp = false;
            		}
HXDLIN(1097)		if (_hx_tmp) {
HXLINE(1099)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(1100)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(1101)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(1102)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(1103)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN(1103)			::String _hx_tmp1 = ::StringTools_obj::trim(data);
HXDLIN(1103)			_hx_tmp->save(_hx_tmp1,(( (::String)(this->_song->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveLevel,(void))

void ChartingState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_1108_onSaveComplete)
HXLINE(1109)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1110)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1111)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1112)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveComplete,(void))

void ChartingState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_1120_onSaveCancel)
HXLINE(1121)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1122)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1123)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1124)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveCancel,(void))

void ChartingState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_1131_onSaveError)
HXLINE(1132)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1133)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1134)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1135)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveError,(void))

int ChartingState_obj::lastSection;


::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< ChartingState_obj > __this = new ChartingState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	ChartingState_obj *__this = (ChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartingState_obj), true, "gameFolder.meta.state.ChartingState"));
	*(void **)__this = ChartingState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

ChartingState_obj::ChartingState_obj()
{
}

void ChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartingState);
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(curNoteType,"curNoteType");
	HX_MARK_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(amountSteps,"amountSteps");
	HX_MARK_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_MARK_MEMBER_NAME(highlight,"highlight");
	HX_MARK_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_MARK_MEMBER_NAME(gridBG,"gridBG");
	HX_MARK_MEMBER_NAME(_song,"_song");
	HX_MARK_MEMBER_NAME(typingShit,"typingShit");
	HX_MARK_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_MARK_MEMBER_NAME(tempBpm,"tempBpm");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(leftIcon,"leftIcon");
	HX_MARK_MEMBER_NAME(rightIcon,"rightIcon");
	HX_MARK_MEMBER_NAME(stepperLength,"stepperLength");
	HX_MARK_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_MARK_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_MARK_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_MARK_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_MARK_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_MARK_MEMBER_NAME(stepperType,"stepperType");
	HX_MARK_MEMBER_NAME(updatedSection,"updatedSection");
	HX_MARK_MEMBER_NAME(daSpacing,"daSpacing");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(curNoteType,"curNoteType");
	HX_VISIT_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(amountSteps,"amountSteps");
	HX_VISIT_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_VISIT_MEMBER_NAME(highlight,"highlight");
	HX_VISIT_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_VISIT_MEMBER_NAME(gridBG,"gridBG");
	HX_VISIT_MEMBER_NAME(_song,"_song");
	HX_VISIT_MEMBER_NAME(typingShit,"typingShit");
	HX_VISIT_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_VISIT_MEMBER_NAME(tempBpm,"tempBpm");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(leftIcon,"leftIcon");
	HX_VISIT_MEMBER_NAME(rightIcon,"rightIcon");
	HX_VISIT_MEMBER_NAME(stepperLength,"stepperLength");
	HX_VISIT_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_VISIT_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_VISIT_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_VISIT_MEMBER_NAME(check_altAnim,"check_altAnim");
	HX_VISIT_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_VISIT_MEMBER_NAME(stepperType,"stepperType");
	HX_VISIT_MEMBER_NAME(updatedSection,"updatedSection");
	HX_VISIT_MEMBER_NAME(daSpacing,"daSpacing");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"_song") ) { return ::hx::Val( _song ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { return ::hx::Val( bpmTxt ); }
		if (HX_FIELD_EQ(inName,"gridBG") ) { return ::hx::Val( gridBG ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { return ::hx::Val( tempBpm ); }
		if (HX_FIELD_EQ(inName,"addNote") ) { return ::hx::Val( addNote_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftIcon") ) { return ::hx::Val( leftIcon ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNotes") ) { return ::hx::Val( getNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJson") ) { return ::hx::Val( loadJson_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"highlight") ) { return ::hx::Val( highlight ); }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { return ::hx::Val( GRID_SIZE ); }
		if (HX_FIELD_EQ(inName,"rightIcon") ) { return ::hx::Val( rightIcon ); }
		if (HX_FIELD_EQ(inName,"addSongUI") ) { return ::hx::Val( addSongUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNoteUI") ) { return ::hx::Val( addNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSong") ) { return ::hx::Val( clearSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { return ::hx::Val( daSpacing ); }
		if (HX_FIELD_EQ(inName,"loadLevel") ) { return ::hx::Val( loadLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveLevel") ) { return ::hx::Val( saveLevel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { return ::hx::Val( bullshitUI ); }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"typingShit") ) { return ::hx::Val( typingShit ); }
		if (HX_FIELD_EQ(inName,"generateUI") ) { return ::hx::Val( generateUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateGrid") ) { return ::hx::Val( updateGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSection") ) { return ::hx::Val( addSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectNote") ) { return ::hx::Val( selectNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteNote") ) { return ::hx::Val( deleteNote_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curNoteType") ) { return ::hx::Val( curNoteType ); }
		if (HX_FIELD_EQ(inName,"amountSteps") ) { return ::hx::Val( amountSteps ); }
		if (HX_FIELD_EQ(inName,"stepperType") ) { return ::hx::Val( stepperType ); }
		if (HX_FIELD_EQ(inName,"copySection") ) { return ::hx::Val( copySection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHeads") ) { return ::hx::Val( updateHeads_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addSectionUI") ) { return ::hx::Val( addSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetSection") ) { return ::hx::Val( resetSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateNoteUI") ) { return ::hx::Val( updateNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSection") ) { return ::hx::Val( clearSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrumTime") ) { return ::hx::Val( getStrumTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadAutosave") ) { return ::hx::Val( loadAutosave_dyn() ); }
		if (HX_FIELD_EQ(inName,"autosaveSong") ) { return ::hx::Val( autosaveSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stepperLength") ) { return ::hx::Val( stepperLength ); }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { return ::hx::Val( check_altAnim ); }
		if (HX_FIELD_EQ(inName,"changeSection") ) { return ::hx::Val( changeSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYfromStrum") ) { return ::hx::Val( getYfromStrum_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updatedSection") ) { return ::hx::Val( updatedSection ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { return ::hx::Val( curSelectedNote ); }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { return ::hx::Val( check_changeBPM ); }
		if (HX_FIELD_EQ(inName,"updateSectionUI") ) { return ::hx::Val( updateSectionUI_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { return ::hx::Val( stepperSusLength ); }
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { return ::hx::Val( sectionStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"recalculateSteps") ) { return ::hx::Val( recalculateSteps_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { return ::hx::Val( stepperSectionBPM ); }
		if (HX_FIELD_EQ(inName,"changeNoteSustain") ) { return ::hx::Val( changeNoteSustain_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { return ::hx::Val( curRenderedSustains ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { return ::hx::Val( check_mustHitSection ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { outValue = ( lastSection ); return true; }
	}
	return false;
}

::hx::Val ChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_song") ) { _song=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { bpmTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBG") ) { gridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { tempBpm=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftIcon") ) { leftIcon=inValue.Cast<  ::gameFolder::gameObjects::userInterface::HealthIcon >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlight") ) { highlight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { GRID_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightIcon") ) { rightIcon=inValue.Cast<  ::gameFolder::gameObjects::userInterface::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { daSpacing=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { bullshitUI=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typingShit") ) { typingShit=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curNoteType") ) { curNoteType=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"amountSteps") ) { amountSteps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperType") ) { stepperType=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stepperLength") ) { stepperLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_altAnim") ) { check_altAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updatedSection") ) { updatedSection=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { curSelectedNote=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { check_changeBPM=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { stepperSusLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { stepperSectionBPM=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { curRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { check_mustHitSection=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { lastSection=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void ChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("curNoteType",6c,d9,7a,dd));
	outFields->push(HX_("bpmTxt",d1,bc,26,f4));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("amountSteps",af,2a,91,a5));
	outFields->push(HX_("bullshitUI",67,a9,a3,d3));
	outFields->push(HX_("highlight",34,56,00,ed));
	outFields->push(HX_("GRID_SIZE",1a,98,25,c9));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("curRenderedSustains",65,b2,8a,50));
	outFields->push(HX_("gridBG",0b,ce,23,18));
	outFields->push(HX_("_song",b4,3f,69,ff));
	outFields->push(HX_("typingShit",d7,01,ec,6a));
	outFields->push(HX_("curSelectedNote",8d,49,f4,47));
	outFields->push(HX_("tempBpm",2b,d8,ac,46));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("leftIcon",20,2b,ae,4c));
	outFields->push(HX_("rightIcon",75,3d,79,b0));
	outFields->push(HX_("stepperLength",d7,b0,3a,4b));
	outFields->push(HX_("check_mustHitSection",12,30,fc,78));
	outFields->push(HX_("check_changeBPM",d8,2d,43,fc));
	outFields->push(HX_("stepperSectionBPM",6b,ba,b7,95));
	outFields->push(HX_("check_altAnim",23,ee,53,2e));
	outFields->push(HX_("stepperSusLength",06,e6,fc,95));
	outFields->push(HX_("stepperType",6b,80,f8,b3));
	outFields->push(HX_("updatedSection",ea,f8,55,de));
	outFields->push(HX_("daSpacing",86,9d,76,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(ChartingState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,curNoteType),HX_("curNoteType",6c,d9,7a,dd)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,bpmTxt),HX_("bpmTxt",d1,bc,26,f4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,amountSteps),HX_("amountSteps",af,2a,91,a5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,bullshitUI),HX_("bullshitUI",67,a9,a3,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,highlight),HX_("highlight",34,56,00,ed)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,GRID_SIZE),HX_("GRID_SIZE",1a,98,25,c9)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedSustains),HX_("curRenderedSustains",65,b2,8a,50)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBG),HX_("gridBG",0b,ce,23,18)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,_song),HX_("_song",b4,3f,69,ff)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(int)offsetof(ChartingState_obj,typingShit),HX_("typingShit",d7,01,ec,6a)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,curSelectedNote),HX_("curSelectedNote",8d,49,f4,47)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,tempBpm),HX_("tempBpm",2b,d8,ac,46)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(ChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::gameFolder::gameObjects::userInterface::HealthIcon */ ,(int)offsetof(ChartingState_obj,leftIcon),HX_("leftIcon",20,2b,ae,4c)},
	{::hx::fsObject /*  ::gameFolder::gameObjects::userInterface::HealthIcon */ ,(int)offsetof(ChartingState_obj,rightIcon),HX_("rightIcon",75,3d,79,b0)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperLength),HX_("stepperLength",d7,b0,3a,4b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mustHitSection),HX_("check_mustHitSection",12,30,fc,78)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_changeBPM),HX_("check_changeBPM",d8,2d,43,fc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSectionBPM),HX_("stepperSectionBPM",6b,ba,b7,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_altAnim),HX_("check_altAnim",23,ee,53,2e)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSusLength),HX_("stepperSusLength",06,e6,fc,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperType),HX_("stepperType",6b,80,f8,b3)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,updatedSection),HX_("updatedSection",ea,f8,55,de)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,daSpacing),HX_("daSpacing",86,9d,76,71)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &ChartingState_obj::lastSection,HX_("lastSection",2f,ba,83,12)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ChartingState_obj_sMemberFields[] = {
	HX_("_file",5b,ea,cc,f6),
	HX_("UI_box",60,07,ac,43),
	HX_("curSection",45,58,c1,68),
	HX_("curNoteType",6c,d9,7a,dd),
	HX_("bpmTxt",d1,bc,26,f4),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSong",75,95,6d,b7),
	HX_("amountSteps",af,2a,91,a5),
	HX_("bullshitUI",67,a9,a3,d3),
	HX_("highlight",34,56,00,ed),
	HX_("GRID_SIZE",1a,98,25,c9),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("curRenderedSustains",65,b2,8a,50),
	HX_("gridBG",0b,ce,23,18),
	HX_("_song",b4,3f,69,ff),
	HX_("typingShit",d7,01,ec,6a),
	HX_("curSelectedNote",8d,49,f4,47),
	HX_("tempBpm",2b,d8,ac,46),
	HX_("vocals",5e,10,51,59),
	HX_("leftIcon",20,2b,ae,4c),
	HX_("rightIcon",75,3d,79,b0),
	HX_("create",fc,66,0f,7c),
	HX_("addSongUI",6a,02,ad,e5),
	HX_("stepperLength",d7,b0,3a,4b),
	HX_("check_mustHitSection",12,30,fc,78),
	HX_("check_changeBPM",d8,2d,43,fc),
	HX_("stepperSectionBPM",6b,ba,b7,95),
	HX_("check_altAnim",23,ee,53,2e),
	HX_("addSectionUI",18,75,a5,87),
	HX_("stepperSusLength",06,e6,fc,95),
	HX_("stepperType",6b,80,f8,b3),
	HX_("addNoteUI",c7,f7,d9,e9),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("generateUI",c9,a0,60,4e),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("updatedSection",ea,f8,55,de),
	HX_("sectionStartTime",ea,ba,df,45),
	HX_("update",09,86,05,87),
	HX_("changeNoteSustain",41,6b,40,3c),
	HX_("recalculateSteps",54,5b,74,a1),
	HX_("resetSection",d6,4b,b6,cf),
	HX_("changeSection",55,aa,ac,be),
	HX_("copySection",b0,82,ec,b3),
	HX_("updateSectionUI",30,24,dc,d7),
	HX_("updateHeads",8a,3c,51,0a),
	HX_("updateNoteUI",af,69,79,31),
	HX_("updateGrid",6f,c1,20,fd),
	HX_("addSection",c4,31,62,c5),
	HX_("selectNote",0e,8d,a5,b7),
	HX_("deleteNote",bd,f5,56,9c),
	HX_("clearSection",d8,b7,56,39),
	HX_("clearSong",02,0c,19,c0),
	HX_("addNote",b3,5a,47,85),
	HX_("getStrumTime",80,ca,77,03),
	HX_("getYfromStrum",1c,4c,46,78),
	HX_("daSpacing",86,9d,76,71),
	HX_("loadLevel",7e,61,9a,8d),
	HX_("getNotes",cb,eb,a1,ff),
	HX_("loadJson",6e,13,08,b7),
	HX_("loadAutosave",72,3a,03,fe),
	HX_("autosaveSong",21,24,ac,67),
	HX_("saveLevel",07,1d,10,01),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	::String(null()) };

static void ChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
};

#endif

::hx::Class ChartingState_obj::__mClass;

static ::String ChartingState_obj_sStaticFields[] = {
	HX_("lastSection",2f,ba,83,12),
	::String(null())
};

void ChartingState_obj::__register()
{
	ChartingState_obj _hx_dummy;
	ChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gameFolder.meta.state.ChartingState",35,df,ef,2d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &ChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = ChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fae24b05502c86ba_61_boot)
HXDLIN(  61)		lastSection = 0;
            	}
}

} // end namespace gameFolder
} // end namespace meta
} // end namespace state
