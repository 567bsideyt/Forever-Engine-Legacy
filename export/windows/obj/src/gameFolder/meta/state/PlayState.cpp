// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameFolder_gameObjects_Boyfriend
#include <gameFolder/gameObjects/Boyfriend.h>
#endif
#ifndef INCLUDED_gameFolder_gameObjects_Character
#include <gameFolder/gameObjects/Character.h>
#endif
#ifndef INCLUDED_gameFolder_gameObjects_Note
#include <gameFolder/gameObjects/Note.h>
#endif
#ifndef INCLUDED_gameFolder_gameObjects_Stage
#include <gameFolder/gameObjects/Stage.h>
#endif
#ifndef INCLUDED_gameFolder_gameObjects_userInterface_ClassHUD
#include <gameFolder/gameObjects/userInterface/ClassHUD.h>
#endif
#ifndef INCLUDED_gameFolder_gameObjects_userInterface_UIBabyArrow
#include <gameFolder/gameObjects/userInterface/UIBabyArrow.h>
#endif
#ifndef INCLUDED_gameFolder_meta_Conductor
#include <gameFolder/meta/Conductor.h>
#endif
#ifndef INCLUDED_gameFolder_meta_Controls
#include <gameFolder/meta/Controls.h>
#endif
#ifndef INCLUDED_gameFolder_meta_MusicBeatState
#include <gameFolder/meta/MusicBeatState.h>
#endif
#ifndef INCLUDED_gameFolder_meta_MusicBeatSubState
#include <gameFolder/meta/MusicBeatSubState.h>
#endif
#ifndef INCLUDED_gameFolder_meta_data_PlayerSettings
#include <gameFolder/meta/data/PlayerSettings.h>
#endif
#ifndef INCLUDED_gameFolder_meta_data_Song
#include <gameFolder/meta/data/Song.h>
#endif
#ifndef INCLUDED_gameFolder_meta_state_ChartingState
#include <gameFolder/meta/state/ChartingState.h>
#endif
#ifndef INCLUDED_gameFolder_meta_state_PlayState
#include <gameFolder/meta/state/PlayState.h>
#endif
#ifndef INCLUDED_gameFolder_meta_subState_PauseSubState
#include <gameFolder/meta/subState/PauseSubState.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8120c3bdc8087002_37_new,"gameFolder.meta.state.PlayState","new",0x8ad19577,"gameFolder.meta.state.PlayState.new","gameFolder/meta/state/PlayState.hx",37,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_122_create,"gameFolder.meta.state.PlayState","create",0x23eeaa45,"gameFolder.meta.state.PlayState.create","gameFolder/meta/state/PlayState.hx",122,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_249_update,"gameFolder.meta.state.PlayState","update",0x2ee4c952,"gameFolder.meta.state.PlayState.update","gameFolder/meta/state/PlayState.hx",249,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_365_mainControls,"gameFolder.meta.state.PlayState","mainControls",0xb94f3bd8,"gameFolder.meta.state.PlayState.mainControls","gameFolder/meta/state/PlayState.hx",365,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_402_mainControls,"gameFolder.meta.state.PlayState","mainControls",0xb94f3bd8,"gameFolder.meta.state.PlayState.mainControls","gameFolder/meta/state/PlayState.hx",402,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_407_mainControls,"gameFolder.meta.state.PlayState","mainControls",0xb94f3bd8,"gameFolder.meta.state.PlayState.mainControls","gameFolder/meta/state/PlayState.hx",407,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_454_strumCallsAuto,"gameFolder.meta.state.PlayState","strumCallsAuto",0x8d2af1e4,"gameFolder.meta.state.PlayState.strumCallsAuto","gameFolder/meta/state/PlayState.hx",454,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_477_strumCameraRoll,"gameFolder.meta.state.PlayState","strumCameraRoll",0xfdd5d702,"gameFolder.meta.state.PlayState.strumCameraRoll","gameFolder/meta/state/PlayState.hx",477,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_506_noteCalls,"gameFolder.meta.state.PlayState","noteCalls",0x45b5ed1a,"gameFolder.meta.state.PlayState.noteCalls","gameFolder/meta/state/PlayState.hx",506,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_539_noteCalls,"gameFolder.meta.state.PlayState","noteCalls",0x45b5ed1a,"gameFolder.meta.state.PlayState.noteCalls","gameFolder/meta/state/PlayState.hx",539,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_544_noteCalls,"gameFolder.meta.state.PlayState","noteCalls",0x45b5ed1a,"gameFolder.meta.state.PlayState.noteCalls","gameFolder/meta/state/PlayState.hx",544,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_558_noteCalls,"gameFolder.meta.state.PlayState","noteCalls",0x45b5ed1a,"gameFolder.meta.state.PlayState.noteCalls","gameFolder/meta/state/PlayState.hx",558,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_625_controlPlayer,"gameFolder.meta.state.PlayState","controlPlayer",0xd5bed675,"gameFolder.meta.state.PlayState.controlPlayer","gameFolder/meta/state/PlayState.hx",625,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_687_controlPlayer,"gameFolder.meta.state.PlayState","controlPlayer",0xd5bed675,"gameFolder.meta.state.PlayState.controlPlayer","gameFolder/meta/state/PlayState.hx",687,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_640_controlPlayer,"gameFolder.meta.state.PlayState","controlPlayer",0xd5bed675,"gameFolder.meta.state.PlayState.controlPlayer","gameFolder/meta/state/PlayState.hx",640,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_643_controlPlayer,"gameFolder.meta.state.PlayState","controlPlayer",0xd5bed675,"gameFolder.meta.state.PlayState.controlPlayer","gameFolder/meta/state/PlayState.hx",643,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_678_controlPlayer,"gameFolder.meta.state.PlayState","controlPlayer",0xd5bed675,"gameFolder.meta.state.PlayState.controlPlayer","gameFolder/meta/state/PlayState.hx",678,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_706_popUpScore,"gameFolder.meta.state.PlayState","popUpScore",0xa46fbd2f,"gameFolder.meta.state.PlayState.popUpScore","gameFolder/meta/state/PlayState.hx",706,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_711_goodNoteHit,"gameFolder.meta.state.PlayState","goodNoteHit",0xabbf81db,"gameFolder.meta.state.PlayState.goodNoteHit","gameFolder/meta/state/PlayState.hx",711,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_739_missNoteCheck,"gameFolder.meta.state.PlayState","missNoteCheck",0x3a2fd8b1,"gameFolder.meta.state.PlayState.missNoteCheck","gameFolder/meta/state/PlayState.hx",739,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_759_startSong,"gameFolder.meta.state.PlayState","startSong",0xcc58cdae,"gameFolder.meta.state.PlayState.startSong","gameFolder/meta/state/PlayState.hx",759,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_780_generateSong,"gameFolder.meta.state.PlayState","generateSong",0x71fe4db3,"gameFolder.meta.state.PlayState.generateSong","gameFolder/meta/state/PlayState.hx",780,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_878_sortByShit,"gameFolder.meta.state.PlayState","sortByShit",0xd3041afe,"gameFolder.meta.state.PlayState.sortByShit","gameFolder/meta/state/PlayState.hx",878,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_893_startCountdown,"gameFolder.meta.state.PlayState","startCountdown",0xfd215438,"gameFolder.meta.state.PlayState.startCountdown","gameFolder/meta/state/PlayState.hx",893,0xdd4277ba)
static const ::String _hx_array_data_bbf60e05_37[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_bbf60e05_38[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
static const ::String _hx_array_data_bbf60e05_39[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_933_startCountdown,"gameFolder.meta.state.PlayState","startCountdown",0xfd215438,"gameFolder.meta.state.PlayState.startCountdown","gameFolder/meta/state/PlayState.hx",933,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_950_startCountdown,"gameFolder.meta.state.PlayState","startCountdown",0xfd215438,"gameFolder.meta.state.PlayState.startCountdown","gameFolder/meta/state/PlayState.hx",950,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_969_startCountdown,"gameFolder.meta.state.PlayState","startCountdown",0xfd215438,"gameFolder.meta.state.PlayState.startCountdown","gameFolder/meta/state/PlayState.hx",969,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_882_startCountdown,"gameFolder.meta.state.PlayState","startCountdown",0xfd215438,"gameFolder.meta.state.PlayState.startCountdown","gameFolder/meta/state/PlayState.hx",882,0xdd4277ba)
static const int _hx_array_data_bbf60e05_44[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_983_generateStaticArrows,"gameFolder.meta.state.PlayState","generateStaticArrows",0xa93f55b6,"gameFolder.meta.state.PlayState.generateStaticArrows","gameFolder/meta/state/PlayState.hx",983,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_1021_resyncVocals,"gameFolder.meta.state.PlayState","resyncVocals",0xbdbf7695,"gameFolder.meta.state.PlayState.resyncVocals","gameFolder/meta/state/PlayState.hx",1021,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_1031_stepHit,"gameFolder.meta.state.PlayState","stepHit",0xbcbd4afe,"gameFolder.meta.state.PlayState.stepHit","gameFolder/meta/state/PlayState.hx",1031,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_1042_beatHit,"gameFolder.meta.state.PlayState","beatHit",0xaf808714,"gameFolder.meta.state.PlayState.beatHit","gameFolder/meta/state/PlayState.hx",1042,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_1047_beatHit,"gameFolder.meta.state.PlayState","beatHit",0xaf808714,"gameFolder.meta.state.PlayState.beatHit","gameFolder/meta/state/PlayState.hx",1047,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_1079_openSubState,"gameFolder.meta.state.PlayState","openSubState",0x8a1ac664,"gameFolder.meta.state.PlayState.openSubState","gameFolder/meta/state/PlayState.hx",1079,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_1096_closeSubState,"gameFolder.meta.state.PlayState","closeSubState",0x2973c020,"gameFolder.meta.state.PlayState.closeSubState","gameFolder/meta/state/PlayState.hx",1096,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_39_boot,"gameFolder.meta.state.PlayState","boot",0xe4aa333b,"gameFolder.meta.state.PlayState.boot","gameFolder/meta/state/PlayState.hx",39,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_41_boot,"gameFolder.meta.state.PlayState","boot",0xe4aa333b,"gameFolder.meta.state.PlayState.boot","gameFolder/meta/state/PlayState.hx",41,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_42_boot,"gameFolder.meta.state.PlayState","boot",0xe4aa333b,"gameFolder.meta.state.PlayState.boot","gameFolder/meta/state/PlayState.hx",42,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_43_boot,"gameFolder.meta.state.PlayState","boot",0xe4aa333b,"gameFolder.meta.state.PlayState.boot","gameFolder/meta/state/PlayState.hx",43,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_44_boot,"gameFolder.meta.state.PlayState","boot",0xe4aa333b,"gameFolder.meta.state.PlayState.boot","gameFolder/meta/state/PlayState.hx",44,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_104_boot,"gameFolder.meta.state.PlayState","boot",0xe4aa333b,"gameFolder.meta.state.PlayState.boot","gameFolder/meta/state/PlayState.hx",104,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_108_boot,"gameFolder.meta.state.PlayState","boot",0xe4aa333b,"gameFolder.meta.state.PlayState.boot","gameFolder/meta/state/PlayState.hx",108,0xdd4277ba)
HX_LOCAL_STACK_FRAME(_hx_pos_8120c3bdc8087002_118_boot,"gameFolder.meta.state.PlayState","boot",0xe4aa333b,"gameFolder.meta.state.PlayState.boot","gameFolder/meta/state/PlayState.hx",118,0xdd4277ba)
namespace gameFolder{
namespace meta{
namespace state{

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_37_new)
HXLINE( 246)		this->canAscend = false;
HXLINE( 112)		this->songLength = ((Float)0);
HXLINE( 111)		this->iconRPC = HX_("",00,00,00,00);
HXLINE( 110)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE( 106)		this->camZooming = true;
HXLINE( 102)		this->camDisplaceY = ((Float)0);
HXLINE( 101)		this->camDisplaceX = ((Float)0);
HXLINE(  96)		this->songTime = ((Float)0);
HXLINE(  95)		this->lastReportedPlayheadPosition = 0;
HXLINE(  94)		this->previousFrameTime = 0;
HXLINE(  92)		this->canPause = true;
HXLINE(  91)		this->startedCountdown = false;
HXLINE(  90)		this->paused = false;
HXLINE(  89)		this->startingSong = false;
HXLINE(  88)		this->generatedMusic = false;
HXLINE(  83)		this->combo = 0;
HXLINE(  82)		this->health = ((Float)1);
HXLINE(  81)		this->gfSpeed = 1;
HXLINE(  79)		this->curSong = HX_("",00,00,00,00);
HXLINE(  68)		this->curSection = 0;
HXLINE(  64)		this->releaseControls = ::Array_obj< bool >::__new(0);
HXLINE(  63)		this->pressControls = ::Array_obj< bool >::__new(0);
HXLINE(  62)		this->holdControls = ::Array_obj< bool >::__new(0);
HXLINE(  59)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  56)		this->dadAutoplay = true;
HXLINE(  54)		this->boyfriendAutoplay = false;
HXLINE(  37)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f064378) {
		if (inClassId<=(int)0x14ebff83) {
			if (inClassId<=(int)0x0d918779) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0d918779;
			} else {
				return inClassId==(int)0x14ebff83;
			}
		} else {
			return inClassId==(int)0x23a57bae || inClassId==(int)0x2f064378;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_122_create)
HXLINE( 124)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 125)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 125)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 128)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 130)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 131)		{
HXLINE( 131)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN( 131)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN( 131)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN( 131)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE( 133)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 134)		::flixel::FlxG_obj::cameras->add(this->camHUD).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 135)		::flixel::FlxCamera_obj::defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 138)		if (::hx::IsNull( ::gameFolder::meta::state::PlayState_obj::SONG )) {
HXLINE( 139)			::gameFolder::meta::state::PlayState_obj::SONG = ::gameFolder::meta::data::Song_obj::loadFromJson(HX_("stress-hard",e4,68,4f,5d),HX_("stress",34,24,2d,11));
            		}
HXLINE( 141)		::gameFolder::meta::Conductor_obj::mapBPMChanges(::gameFolder::meta::state::PlayState_obj::SONG);
HXLINE( 142)		::gameFolder::meta::Conductor_obj::changeBPM(( (int)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 145)		if (::hx::IsNotNull( ::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE( 146)			::gameFolder::meta::state::PlayState_obj::curStage = ( (::String)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		}
HXLINE( 148)		this->stageBuild =  ::gameFolder::gameObjects::Stage_obj::__alloc( HX_CTX ,::gameFolder::meta::state::PlayState_obj::curStage);
HXLINE( 149)		this->add(this->stageBuild);
HXLINE( 163)		this->gf =  ::gameFolder::gameObjects::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),this->stageBuild->returnGFtype(::gameFolder::meta::state::PlayState_obj::curStage),null());
HXLINE( 164)		this->gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 166)		this->dadOpponent =  ::gameFolder::gameObjects::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 167)		this->boyfriend =  ::gameFolder::gameObjects::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),( (::String)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 169)		Float camPos = this->dadOpponent->getGraphicMidpoint(null())->x;
HXDLIN( 169)		 ::flixel::math::FlxPoint camPos1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,camPos,this->dadOpponent->getGraphicMidpoint(null())->y);
HXLINE( 173)		this->stageBuild->dadPosition(::gameFolder::meta::state::PlayState_obj::curStage,this->dadOpponent,this->gf,camPos1,( (::String)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 178)		this->stageBuild->repositionPlayers(::gameFolder::meta::state::PlayState_obj::curStage,this->boyfriend,this->dadOpponent,this->gf);
HXLINE( 181)		this->add(this->gf);
HXLINE( 184)		if ((::gameFolder::meta::state::PlayState_obj::curStage == HX_("highway",0d,b3,8f,73))) {
HXLINE( 185)			this->add(this->stageBuild->limo);
            		}
HXLINE( 187)		this->add(this->dadOpponent);
HXLINE( 188)		this->add(this->boyfriend);
HXLINE( 191)		::gameFolder::meta::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE( 194)		this->strumLine =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 195)		{
HXLINE( 196)			{
HXLINE( 197)				 ::flixel::FlxSprite strumLinePart =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 198)				strumLinePart->scrollFactor->set(null(),null());
HXLINE( 200)				this->strumLine->add(strumLinePart).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE( 196)			{
HXLINE( 197)				 ::flixel::FlxSprite strumLinePart1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 198)				strumLinePart1->scrollFactor->set(null(),null());
HXLINE( 200)				this->strumLine->add(strumLinePart1).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE( 196)			{
HXLINE( 197)				 ::flixel::FlxSprite strumLinePart2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 198)				strumLinePart2->scrollFactor->set(null(),null());
HXLINE( 200)				this->strumLine->add(strumLinePart2).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE( 196)			{
HXLINE( 197)				 ::flixel::FlxSprite strumLinePart3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 198)				strumLinePart3->scrollFactor->set(null(),null());
HXLINE( 200)				this->strumLine->add(strumLinePart3).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE( 196)			{
HXLINE( 197)				 ::flixel::FlxSprite strumLinePart4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 198)				strumLinePart4->scrollFactor->set(null(),null());
HXLINE( 200)				this->strumLine->add(strumLinePart4).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE( 196)			{
HXLINE( 197)				 ::flixel::FlxSprite strumLinePart5 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 198)				strumLinePart5->scrollFactor->set(null(),null());
HXLINE( 200)				this->strumLine->add(strumLinePart5).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE( 196)			{
HXLINE( 197)				 ::flixel::FlxSprite strumLinePart6 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 198)				strumLinePart6->scrollFactor->set(null(),null());
HXLINE( 200)				this->strumLine->add(strumLinePart6).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE( 196)			{
HXLINE( 197)				 ::flixel::FlxSprite strumLinePart7 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 198)				strumLinePart7->scrollFactor->set(null(),null());
HXLINE( 200)				this->strumLine->add(strumLinePart7).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE( 203)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 204)		this->add(this->strumLineNotes);
HXLINE( 206)		this->boyfriendStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 207)		this->dadStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 210)		this->generateSong(( (::String)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 213)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 214)		this->camFollow->setPosition(camPos1->x,camPos1->y);
HXLINE( 216)		if (::hx::IsNotNull( ::gameFolder::meta::state::PlayState_obj::prevCamFollow )) {
HXLINE( 218)			this->camFollow = ::gameFolder::meta::state::PlayState_obj::prevCamFollow;
HXLINE( 219)			::gameFolder::meta::state::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 222)		this->add(this->camFollow);
HXLINE( 225)		this->strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 226)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 229)		::flixel::FlxG_obj::camera->follow(this->camFollow,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),((Float)0.02));
HXLINE( 231)		::flixel::FlxG_obj::camera->set_zoom(::gameFolder::meta::state::PlayState_obj::defaultCamZoom);
HXLINE( 232)		{
HXLINE( 232)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 232)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 232)			_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 232)			if (point->_weak) {
HXLINE( 232)				point->put();
            			}
            		}
HXLINE( 235)		 ::gameFolder::gameObjects::userInterface::ClassHUD uiHUD =  ::gameFolder::gameObjects::userInterface::ClassHUD_obj::__alloc( HX_CTX );
HXLINE( 236)		this->add(uiHUD);
HXLINE( 237)		uiHUD->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 240)		this->startingSong = true;
HXLINE( 242)		this->startCountdown();
HXLINE( 243)		this->super::create();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_249_update)
HXLINE( 251)		bool _hx_tmp;
HXDLIN( 251)		bool _hx_tmp1;
HXDLIN( 251)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 251)		if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE( 251)			_hx_tmp1 = this->startedCountdown;
            		}
            		else {
HXLINE( 251)			_hx_tmp1 = false;
            		}
HXDLIN( 251)		if (_hx_tmp1) {
HXLINE( 251)			_hx_tmp = this->canPause;
            		}
            		else {
HXLINE( 251)			_hx_tmp = false;
            		}
HXDLIN( 251)		if (_hx_tmp) {
HXLINE( 254)			this->persistentUpdate = false;
HXLINE( 255)			this->persistentDraw = true;
HXLINE( 256)			this->paused = true;
HXLINE( 259)			Float _hx_tmp = this->boyfriend->getScreenPosition(null(),null())->x;
HXDLIN( 259)			this->openSubState( ::gameFolder::meta::subState::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,this->boyfriend->getScreenPosition(null(),null())->y));
            		}
HXLINE( 266)		this->super::update(elapsed);
HXLINE( 269)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 269)		if (_this1->keyManager->checkStatus(55,_this1->status)) {
HXLINE( 270)			 ::flixel::FlxState nextState =  ::gameFolder::meta::state::ChartingState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 270)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 270)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 272)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 272)		if (_this2->keyManager->checkStatus(54,_this2->status)) {
HXLINE( 273)			this->boyfriendAutoplay = !(this->boyfriendAutoplay);
            		}
HXLINE( 275)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 275)		if (_this3->keyManager->checkStatus(53,_this3->status)) {
HXLINE( 276)			this->canAscend = true;
            		}
HXLINE( 278)		if (this->canAscend) {
HXLINE( 279)			 ::gameFolder::gameObjects::Boyfriend _g = this->boyfriend;
HXDLIN( 279)			_g->set_y((_g->y - ( (Float)(50) )));
            		}
HXLINE( 282)		if (this->startingSong) {
HXLINE( 284)			if (this->startedCountdown) {
HXLINE( 286)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::gameFolder::meta::Conductor >();
HXDLIN( 286)				::gameFolder::meta::Conductor_obj::songPosition = (::gameFolder::meta::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE( 287)				if ((::gameFolder::meta::Conductor_obj::songPosition >= 0)) {
HXLINE( 288)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE( 294)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::gameFolder::meta::Conductor >();
HXDLIN( 294)			::gameFolder::meta::Conductor_obj::songPosition = (::gameFolder::meta::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE( 296)			if (!(this->paused)) {
HXLINE( 298)				 ::gameFolder::meta::state::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 298)				_hx_tmp->songTime = (_hx_tmp->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE( 299)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE( 302)				if ((::gameFolder::meta::Conductor_obj::lastSongPos != ::gameFolder::meta::Conductor_obj::songPosition)) {
HXLINE( 304)					this->songTime = ((this->songTime + ::gameFolder::meta::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE( 305)					::gameFolder::meta::Conductor_obj::lastSongPos = ::gameFolder::meta::Conductor_obj::songPosition;
            				}
            			}
            		}
HXLINE( 318)		bool _hx_tmp2;
HXDLIN( 318)		if (this->generatedMusic) {
HXLINE( 318)			_hx_tmp2 = ::hx::IsNotNull(  ::Dynamic(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) )))) );
            		}
            		else {
HXLINE( 318)			_hx_tmp2 = false;
            		}
HXDLIN( 318)		if (_hx_tmp2) {
HXLINE( 321)			if (!(( (bool)( ::Dynamic(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ))) {
HXLINE( 323)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN( 323)				Float _hx_tmp1 = (this->dadOpponent->getMidpoint(null())->x + 150);
HXDLIN( 323)				Float _hx_tmp2 = (_hx_tmp1 + (this->camDisplaceX * ( (Float)(8) )));
HXDLIN( 323)				_hx_tmp->setPosition(_hx_tmp2,(this->dadOpponent->getMidpoint(null())->y - ( (Float)(100) )));
            			}
            			else {
HXLINE( 327)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN( 327)				Float _hx_tmp1 = (this->boyfriend->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN( 327)				Float _hx_tmp2 = (_hx_tmp1 + (this->camDisplaceX * ( (Float)(8) )));
HXDLIN( 327)				_hx_tmp->setPosition(_hx_tmp2,(this->boyfriend->getMidpoint(null())->y - ( (Float)(100) )));
            			}
            		}
HXLINE( 331)		if (this->camZooming) {
HXLINE( 333)			Float a = ::gameFolder::meta::state::PlayState_obj::defaultCamZoom;
HXDLIN( 333)			::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE( 334)			this->camHUD->set_zoom((1 + (((Float)0.95) * (this->camHUD->zoom - ( (Float)(1) )))));
            		}
HXLINE( 338)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::gameFolder::gameObjects::Note >() )) {
HXLINE( 340)			if (((this->unspawnNotes->__get(0).StaticCast<  ::gameFolder::gameObjects::Note >()->strumTime - ::gameFolder::meta::Conductor_obj::songPosition) < 1500)) {
HXLINE( 342)				 ::gameFolder::gameObjects::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::gameFolder::gameObjects::Note >();
HXLINE( 343)				this->notes->add(dunceNote).StaticCast<  ::gameFolder::gameObjects::Note >();
HXLINE( 345)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE( 346)				this->unspawnNotes->removeRange(index,1);
            			}
            		}
HXLINE( 351)		this->noteCalls();
            	}


void PlayState_obj::mainControls( ::gameFolder::gameObjects::Note daNote, ::gameFolder::gameObjects::Character _hx_char,bool autoplay, ::Dynamic __o_otherSide){
            		 ::Dynamic otherSide = __o_otherSide;
            		if (::hx::IsNull(__o_otherSide)) otherSide = 0;
            	HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_365_mainControls)
HXLINE( 364)		 ::gameFolder::meta::state::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 367)		int charCallType = 0;
HXLINE( 368)		if (::hx::IsEq( _hx_char,this->boyfriend )) {
HXLINE( 369)			charCallType = 1;
            		}
HXLINE( 376)		bool _hx_tmp;
HXDLIN( 376)		bool _hx_tmp1;
HXDLIN( 376)		if (daNote->isSustainNote) {
HXLINE( 376)			_hx_tmp1 = ((daNote->y + daNote->offset->y) <= (Dynamic( this->strumLine->members->__get(::Math_obj::floor(( (Float)((daNote->noteData + (( (int)(otherSide) ) * 4))) )))).StaticCast<  ::flixel::FlxSprite >()->y + (::gameFolder::gameObjects::Note_obj::swagWidth / ( (Float)(2) ))));
            		}
            		else {
HXLINE( 376)			_hx_tmp1 = false;
            		}
HXDLIN( 376)		if (_hx_tmp1) {
HXLINE( 378)			if (!(autoplay)) {
HXLINE( 378)				if (!(daNote->wasGoodHit)) {
HXLINE( 378)					if (daNote->prevNote->wasGoodHit) {
HXLINE( 376)						_hx_tmp = !(daNote->canBeHit);
            					}
            					else {
HXLINE( 376)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 376)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 376)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 376)			_hx_tmp = false;
            		}
HXDLIN( 376)		if (_hx_tmp) {
HXLINE( 380)			Float swagRect = ((Dynamic( this->strumLine->members->__get(::Math_obj::floor(( (Float)((daNote->noteData + (( (int)(otherSide) ) * 4))) )))).StaticCast<  ::flixel::FlxSprite >()->y + (::gameFolder::gameObjects::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y);
HXLINE( 381)			Float swagRect1 = (daNote->get_width() * ( (Float)(2) ));
HXLINE( 380)			 ::flixel::math::FlxRect swagRect2 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,swagRect,swagRect1,(daNote->get_height() * ( (Float)(2) )));
HXLINE( 382)			 ::flixel::math::FlxRect swagRect3 = swagRect2;
HXDLIN( 382)			swagRect3->y = (swagRect3->y / daNote->scale->y);
HXLINE( 383)			 ::flixel::math::FlxRect swagRect4 = swagRect2;
HXDLIN( 383)			swagRect4->height = (swagRect4->height - swagRect2->y);
HXLINE( 385)			daNote->set_clipRect(swagRect2);
            		}
HXLINE( 390)		if (autoplay) {
HXLINE( 393)			if ((daNote->strumTime <= ::gameFolder::meta::Conductor_obj::songPosition)) {
HXLINE( 397)				if ((charCallType == 1)) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::gameFolder::meta::state::PlayState,_gthis, ::gameFolder::gameObjects::Note,daNote) HXARGC(1)
            					void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum){
            						HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_402_mainControls)
HXLINE( 402)						_gthis->strumCallsAuto(cStrum,0,daNote);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 400)					this->boyfriendStrums->forEach( ::Dynamic(new _hx_Closure_0(_gthis,daNote)),null());
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::gameFolder::meta::state::PlayState,_gthis, ::gameFolder::gameObjects::Note,daNote) HXARGC(1)
            					void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum){
            						HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_407_mainControls)
HXLINE( 407)						_gthis->strumCallsAuto(cStrum,0,daNote);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 405)					this->dadStrums->forEach( ::Dynamic(new _hx_Closure_1(_gthis,daNote)),null());
            				}
HXLINE( 413)				::String stringArrow = HX_("",00,00,00,00);
HXLINE( 414)				stringArrow = ::gameFolder::gameObjects::userInterface::UIBabyArrow_obj::getArrowFromNumber(daNote->noteData);
HXLINE( 415)				_hx_char->playAnim((HX_("sing",4f,96,53,4c) + stringArrow.toUpperCase()),true,null(),null());
HXLINE( 417)				_hx_char->holdTimer = ( (Float)(0) );
HXLINE( 421)				if (( (bool)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE( 422)					this->vocals->set_volume(( (Float)(1) ));
            				}
HXLINE( 425)				daNote->kill();
HXLINE( 426)				this->notes->remove(daNote,true).StaticCast<  ::gameFolder::gameObjects::Note >();
HXLINE( 427)				daNote->destroy();
            			}
            		}
HXLINE( 433)		if ((charCallType == 1)) {
HXLINE( 436)			this->strumCameraRoll(this->boyfriendStrums,true);
            		}
            		else {
HXLINE( 438)			this->strumCameraRoll(this->dadStrums,false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,mainControls,(void))

void PlayState_obj::strumCallsAuto( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum, ::Dynamic __o_callType, ::gameFolder::gameObjects::Note daNote){
            		 ::Dynamic callType = __o_callType;
            		if (::hx::IsNull(__o_callType)) callType = 1;
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_454_strumCallsAuto)
HXDLIN( 454)		if (::hx::IsNull( callType )) {
HXLINE( 462)			if ((daNote->noteData == cStrum->ID)) {
HXLINE( 465)				cStrum->playAnim(HX_("confirm",00,9d,39,10),null(),null(),null());
HXLINE( 468)				bool _hx_tmp;
HXDLIN( 468)				if (daNote->isSustainNote) {
HXLINE( 468)					_hx_tmp = !(::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("holdend",fc,4b,02,b8)));
            				}
            				else {
HXLINE( 468)					_hx_tmp = false;
            				}
HXDLIN( 468)				if (_hx_tmp) {
HXLINE( 469)					cStrum->canFinishAnimation = false;
            				}
            				else {
HXLINE( 471)					cStrum->canFinishAnimation = true;
            				}
            			}
            		}
            		else {
HXDLIN( 454)			if (::hx::IsEq( callType,1 )) {
HXLINE( 458)				bool _hx_tmp;
HXDLIN( 458)				if (cStrum->animation->get_finished()) {
HXLINE( 458)					_hx_tmp = cStrum->canFinishAnimation;
            				}
            				else {
HXLINE( 458)					_hx_tmp = false;
            				}
HXDLIN( 458)				if (_hx_tmp) {
HXLINE( 459)					cStrum->playAnim(HX_("static",ae,dc,fb,05),null(),null(),null());
            				}
            			}
            			else {
HXLINE( 462)				if ((daNote->noteData == cStrum->ID)) {
HXLINE( 465)					cStrum->playAnim(HX_("confirm",00,9d,39,10),null(),null(),null());
HXLINE( 468)					bool _hx_tmp;
HXDLIN( 468)					if (daNote->isSustainNote) {
HXLINE( 468)						_hx_tmp = !(::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("holdend",fc,4b,02,b8)));
            					}
            					else {
HXLINE( 468)						_hx_tmp = false;
            					}
HXDLIN( 468)					if (_hx_tmp) {
HXLINE( 469)						cStrum->canFinishAnimation = false;
            					}
            					else {
HXLINE( 471)						cStrum->canFinishAnimation = true;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,strumCallsAuto,(void))

void PlayState_obj::strumCameraRoll( ::flixel::group::FlxTypedGroup cStrum,bool mustHit){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_477_strumCameraRoll)
HXLINE( 478)		Float camDisplaceExtend = ((Float)1.5);
HXLINE( 479)		Float camDisplaceSpeed = ((Float)0.0125);
HXLINE( 480)		if (::hx::IsNotNull(  ::Dynamic(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) )))) )) {
HXLINE( 482)			bool _hx_tmp;
HXDLIN( 482)			bool _hx_tmp1;
HXDLIN( 482)			if (( (bool)( ::Dynamic(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 482)				_hx_tmp1 = mustHit;
            			}
            			else {
HXLINE( 482)				_hx_tmp1 = false;
            			}
HXDLIN( 482)			if (!(_hx_tmp1)) {
HXLINE( 483)				if (!(( (bool)( ::Dynamic(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(::Std_obj::_hx_int((( (Float)(this->curStep) ) / ( (Float)(16) ))))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ))) {
HXLINE( 482)					_hx_tmp = !(mustHit);
            				}
            				else {
HXLINE( 482)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 482)				_hx_tmp = true;
            			}
HXDLIN( 482)			if (_hx_tmp) {
HXLINE( 485)				bool _hx_tmp;
HXDLIN( 485)				if ((Dynamic( cStrum->members->__get(0)).StaticCast<  ::gameFolder::gameObjects::userInterface::UIBabyArrow >()->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE( 485)					_hx_tmp = (this->camDisplaceX > -(camDisplaceExtend));
            				}
            				else {
HXLINE( 485)					_hx_tmp = false;
            				}
HXDLIN( 485)				if (_hx_tmp) {
HXLINE( 486)					 ::gameFolder::meta::state::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 486)					_hx_tmp->camDisplaceX = (_hx_tmp->camDisplaceX - camDisplaceSpeed);
            				}
            				else {
HXLINE( 487)					bool _hx_tmp;
HXDLIN( 487)					if ((Dynamic( cStrum->members->__get(3)).StaticCast<  ::gameFolder::gameObjects::userInterface::UIBabyArrow >()->animation->_curAnim->name == HX_("confirm",00,9d,39,10))) {
HXLINE( 487)						_hx_tmp = (this->camDisplaceX < camDisplaceExtend);
            					}
            					else {
HXLINE( 487)						_hx_tmp = false;
            					}
HXDLIN( 487)					if (_hx_tmp) {
HXLINE( 488)						 ::gameFolder::meta::state::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 488)						_hx_tmp->camDisplaceX = (_hx_tmp->camDisplaceX + camDisplaceSpeed);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,strumCameraRoll,(void))

void PlayState_obj::noteCalls(){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_506_noteCalls)
HXLINE( 505)		 ::gameFolder::meta::state::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 511)		bool up = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_up->check();
HXLINE( 512)		bool right = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_right->check();
HXLINE( 513)		bool down = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_down->check();
HXLINE( 514)		bool left = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_left->check();
HXLINE( 516)		bool upP = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 517)		bool rightP = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_rightP->check();
HXLINE( 518)		bool downP = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 519)		bool leftP = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_leftP->check();
HXLINE( 521)		bool upR = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_upR->check();
HXLINE( 522)		bool rightR = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_rightR->check();
HXLINE( 523)		bool downR = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_downR->check();
HXLINE( 524)		bool leftR = ::gameFolder::meta::data::PlayerSettings_obj::player1->controls->_leftR->check();
HXLINE( 526)		::Array< bool > holdControls = ::Array_obj< bool >::__new(4)->init(0,left)->init(1,down)->init(2,up)->init(3,right);
HXLINE( 527)		::Array< bool > pressControls = ::Array_obj< bool >::__new(4)->init(0,leftP)->init(1,downP)->init(2,upP)->init(3,rightP);
HXLINE( 528)		::Array< bool > releaseControls = ::Array_obj< bool >::__new(4)->init(0,leftR)->init(1,downR)->init(2,upR)->init(3,rightR);
HXLINE( 531)		{
HXLINE( 531)			int _g = 0;
HXDLIN( 531)			int _g1 = this->strumLine->length;
HXDLIN( 531)			while((_g < _g1)){
HXLINE( 531)				_g = (_g + 1);
HXDLIN( 531)				int i = (_g - 1);
HXLINE( 532)				Dynamic( this->strumLine->members->__get(i)).StaticCast<  ::flixel::FlxSprite >()->set_y((Dynamic( this->strumLineNotes->members->__get(i)).StaticCast<  ::gameFolder::gameObjects::userInterface::UIBabyArrow >()->y + 25));
            			}
            		}
HXLINE( 535)		{
HXLINE( 536)			{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::gameFolder::meta::state::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum){
            					HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_539_noteCalls)
HXLINE( 539)					if (_gthis->boyfriendAutoplay) {
HXLINE( 540)						_gthis->strumCallsAuto(cStrum,null(),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::gameFolder::meta::state::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum){
            					HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_544_noteCalls)
HXLINE( 544)					if (_gthis->dadAutoplay) {
HXLINE( 545)						_gthis->strumCallsAuto(cStrum,null(),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 537)				this->boyfriendStrums->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 542)				this->dadStrums->forEach( ::Dynamic(new _hx_Closure_1(_gthis)),null());
            			}
HXLINE( 536)			{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::gameFolder::meta::state::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum){
            					HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_539_noteCalls)
HXLINE( 539)					if (_gthis->boyfriendAutoplay) {
HXLINE( 540)						_gthis->strumCallsAuto(cStrum,null(),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::gameFolder::meta::state::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum){
            					HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_544_noteCalls)
HXLINE( 544)					if (_gthis->dadAutoplay) {
HXLINE( 545)						_gthis->strumCallsAuto(cStrum,null(),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 537)				this->boyfriendStrums->forEach( ::Dynamic(new _hx_Closure_2(_gthis)),null());
HXLINE( 542)				this->dadStrums->forEach( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            			}
HXLINE( 536)			{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::gameFolder::meta::state::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum){
            					HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_539_noteCalls)
HXLINE( 539)					if (_gthis->boyfriendAutoplay) {
HXLINE( 540)						_gthis->strumCallsAuto(cStrum,null(),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::gameFolder::meta::state::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum){
            					HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_544_noteCalls)
HXLINE( 544)					if (_gthis->dadAutoplay) {
HXLINE( 545)						_gthis->strumCallsAuto(cStrum,null(),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 537)				this->boyfriendStrums->forEach( ::Dynamic(new _hx_Closure_4(_gthis)),null());
HXLINE( 542)				this->dadStrums->forEach( ::Dynamic(new _hx_Closure_5(_gthis)),null());
            			}
HXLINE( 536)			{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::gameFolder::meta::state::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum){
            					HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_539_noteCalls)
HXLINE( 539)					if (_gthis->boyfriendAutoplay) {
HXLINE( 540)						_gthis->strumCallsAuto(cStrum,null(),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::gameFolder::meta::state::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow cStrum){
            					HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_544_noteCalls)
HXLINE( 544)					if (_gthis->dadAutoplay) {
HXLINE( 545)						_gthis->strumCallsAuto(cStrum,null(),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 537)				this->boyfriendStrums->forEach( ::Dynamic(new _hx_Closure_6(_gthis)),null());
HXLINE( 542)				this->dadStrums->forEach( ::Dynamic(new _hx_Closure_7(_gthis)),null());
            			}
            		}
HXLINE( 550)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::gameFolder::meta::state::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::gameFolder::gameObjects::Note daNote){
            				HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_558_noteCalls)
HXLINE( 565)				int otherSide = 0;
HXLINE( 566)				Float otherSustain = ( (Float)(0) );
HXLINE( 567)				if (daNote->mustPress) {
HXLINE( 568)					otherSide = 1;
            				}
HXLINE( 569)				if (daNote->isSustainNote) {
HXLINE( 570)					otherSustain = daNote->get_width();
            				}
HXLINE( 573)				Float _gthis1 = Dynamic( _gthis->strumLine->members->__get(::Math_obj::floor(( (Float)((daNote->noteData + (otherSide * 4))) )))).StaticCast<  ::flixel::FlxSprite >()->y;
HXLINE( 574)				Float _hx_tmp = (::gameFolder::meta::Conductor_obj::songPosition - daNote->strumTime);
HXLINE( 573)				daNote->set_y((_gthis1 - (_hx_tmp * (((Float)0.45) * ::flixel::math::FlxMath_obj::roundDecimal(( (Float)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ),2)))));
HXLINE( 575)				daNote->set_x(((Dynamic( _gthis->strumLineNotes->members->__get(::Math_obj::floor(( (Float)((daNote->noteData + (otherSide * 4))) )))).StaticCast<  ::gameFolder::gameObjects::userInterface::UIBabyArrow >()->x + 25) + otherSustain));
HXLINE( 578)				if ((daNote->isSustainNote == false)) {
HXLINE( 579)					daNote->set_angle(Dynamic( _gthis->strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::gameFolder::gameObjects::userInterface::UIBabyArrow >()->angle);
            				}
HXLINE( 584)				if (daNote->mustPress) {
HXLINE( 585)					_gthis->mainControls(daNote,_gthis->boyfriend,_gthis->boyfriendAutoplay,otherSide);
            				}
            				else {
HXLINE( 587)					_gthis->mainControls(daNote,_gthis->dadOpponent,_gthis->dadAutoplay,null());
            				}
HXLINE( 591)				if ((daNote->y > ::flixel::FlxG_obj::height)) {
HXLINE( 593)					daNote->set_active(false);
HXLINE( 594)					daNote->set_visible(false);
            				}
            				else {
HXLINE( 598)					daNote->set_visible(true);
HXLINE( 599)					daNote->set_active(true);
            				}
HXLINE( 603)				Float daNote1 = daNote->y;
HXDLIN( 603)				if ((daNote1 < -(daNote->get_height()))) {
HXLINE( 605)					bool _hx_tmp;
HXDLIN( 605)					if (!(daNote->tooLate)) {
HXLINE( 605)						_hx_tmp = !(daNote->wasGoodHit);
            					}
            					else {
HXLINE( 605)						_hx_tmp = true;
            					}
HXDLIN( 605)					if (_hx_tmp) {
HXLINE( 606)						_gthis->vocals->set_volume(( (Float)(0) ));
            					}
HXLINE( 608)					daNote->set_active(false);
HXLINE( 609)					daNote->set_visible(false);
HXLINE( 612)					daNote->kill();
HXLINE( 613)					_gthis->notes->remove(daNote,true).StaticCast<  ::gameFolder::gameObjects::Note >();
HXLINE( 614)					daNote->destroy();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 553)			this->controlPlayer(this->boyfriend,this->boyfriendAutoplay,this->boyfriendStrums,holdControls,pressControls,releaseControls,null());
HXLINE( 557)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_8(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,noteCalls,(void))

void PlayState_obj::controlPlayer( ::gameFolder::gameObjects::Character character,bool autoplay, ::flixel::group::FlxTypedGroup characterStrums,::Array< bool > holdControls,::Array< bool > pressControls,::Array< bool > releaseControls, ::Dynamic __o_mustPress){
            		 ::Dynamic mustPress = __o_mustPress;
            		if (::hx::IsNull(__o_mustPress)) mustPress = true;
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_625_controlPlayer)
HXLINE( 623)		 ::gameFolder::meta::state::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 626)		if (!(autoplay)) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3,::Array< bool >,releaseControls,::Array< bool >,pressControls) HXARGC(1)
            			void _hx_run( ::gameFolder::gameObjects::userInterface::UIBabyArrow strum){
            				HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_687_controlPlayer)
HXLINE( 688)				bool _hx_tmp;
HXDLIN( 688)				if (pressControls->__get(strum->ID)) {
HXLINE( 688)					_hx_tmp = (strum->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            				}
            				else {
HXLINE( 688)					_hx_tmp = false;
            				}
HXDLIN( 688)				if (_hx_tmp) {
HXLINE( 689)					strum->playAnim(HX_("pressed",a2,d2,e6,39),null(),null(),null());
            				}
HXLINE( 690)				if (releaseControls->__get(strum->ID)) {
HXLINE( 691)					strum->playAnim(HX_("static",ae,dc,fb,05),null(),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 629)			if (pressControls->contains(true)) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNoteList,::Array< int >,noteDirectionList) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::Note daNote){
            					HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_640_controlPlayer)
HXLINE( 640)					bool _hx_tmp;
HXDLIN( 640)					bool _hx_tmp1;
HXDLIN( 640)					bool _hx_tmp2;
HXDLIN( 640)					if (daNote->canBeHit) {
HXLINE( 640)						_hx_tmp2 = daNote->mustPress;
            					}
            					else {
HXLINE( 640)						_hx_tmp2 = false;
            					}
HXDLIN( 640)					if (_hx_tmp2) {
HXLINE( 640)						_hx_tmp1 = !(daNote->tooLate);
            					}
            					else {
HXLINE( 640)						_hx_tmp1 = false;
            					}
HXDLIN( 640)					if (_hx_tmp1) {
HXLINE( 640)						_hx_tmp = !(daNote->wasGoodHit);
            					}
            					else {
HXLINE( 640)						_hx_tmp = false;
            					}
HXDLIN( 640)					if (_hx_tmp) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            						int _hx_run( ::gameFolder::gameObjects::Note a, ::gameFolder::gameObjects::Note b){
            							HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_643_controlPlayer)
HXLINE( 643)							return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            						}
            						HX_END_LOCAL_FUNC2(return)

HXLINE( 642)						possibleNoteList->push(daNote);
HXLINE( 643)						possibleNoteList->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 645)						noteDirectionList->push(daNote->noteData);
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 632)				character->holdTimer = ( (Float)(0) );
HXLINE( 635)				::Array< ::Dynamic> possibleNoteList = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 636)				::Array< int > noteDirectionList = ::Array_obj< int >::__new(0);
HXLINE( 638)				this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNoteList,noteDirectionList)),null());
HXLINE( 650)				{
HXLINE( 650)					int _g = 0;
HXDLIN( 650)					int _g1 = pressControls->length;
HXDLIN( 650)					while((_g < _g1)){
HXLINE( 650)						_g = (_g + 1);
HXDLIN( 650)						int i = (_g - 1);
HXLINE( 653)						if ((possibleNoteList->length > 0)) {
HXLINE( 656)							int _g = 0;
HXDLIN( 656)							while((_g < possibleNoteList->length)){
HXLINE( 656)								 ::gameFolder::gameObjects::Note coolNote = possibleNoteList->__get(_g).StaticCast<  ::gameFolder::gameObjects::Note >();
HXDLIN( 656)								_g = (_g + 1);
HXLINE( 659)								if (pressControls->__get(coolNote->noteData)) {
HXLINE( 660)									this->goodNoteHit(coolNote,character,characterStrums);
            								}
            							}
            						}
            						else {
HXLINE( 666)							this->missNoteCheck(i,pressControls,character);
            						}
            					}
            				}
            			}
HXLINE( 673)			if (holdControls->contains(true)) {
            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_2, ::gameFolder::meta::state::PlayState,_gthis, ::flixel::group::FlxTypedGroup,characterStrums, ::gameFolder::gameObjects::Character,character,::Array< bool >,holdControls) HXARGC(1)
            				void _hx_run( ::gameFolder::gameObjects::Note coolNote){
            					HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_678_controlPlayer)
HXLINE( 678)					bool _hx_tmp;
HXDLIN( 678)					bool _hx_tmp1;
HXDLIN( 678)					bool _hx_tmp2;
HXDLIN( 678)					if (coolNote->canBeHit) {
HXLINE( 678)						_hx_tmp2 = coolNote->mustPress;
            					}
            					else {
HXLINE( 678)						_hx_tmp2 = false;
            					}
HXDLIN( 678)					if (_hx_tmp2) {
HXLINE( 678)						_hx_tmp1 = coolNote->isSustainNote;
            					}
            					else {
HXLINE( 678)						_hx_tmp1 = false;
            					}
HXDLIN( 678)					if (_hx_tmp1) {
HXLINE( 678)						_hx_tmp = holdControls->__get(coolNote->noteData);
            					}
            					else {
HXLINE( 678)						_hx_tmp = false;
            					}
HXDLIN( 678)					if (_hx_tmp) {
HXLINE( 679)						_gthis->goodNoteHit(coolNote,character,characterStrums);
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 676)				this->notes->forEachAlive( ::Dynamic(new _hx_Closure_2(_gthis,characterStrums,character,holdControls)),null());
            			}
HXLINE( 686)			characterStrums->forEach( ::Dynamic(new _hx_Closure_3(releaseControls,pressControls)),null());
            		}
HXLINE( 697)		bool _hx_tmp;
HXDLIN( 697)		if ((character->holdTimer > ((::gameFolder::meta::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE( 697)			if (holdControls->contains(true)) {
HXLINE( 697)				_hx_tmp = autoplay;
            			}
            			else {
HXLINE( 697)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 697)			_hx_tmp = false;
            		}
HXDLIN( 697)		if (_hx_tmp) {
HXLINE( 699)			bool _hx_tmp;
HXDLIN( 699)			if (::StringTools_obj::startsWith(character->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE( 699)				_hx_tmp = !(::StringTools_obj::endsWith(character->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            			}
            			else {
HXLINE( 699)				_hx_tmp = false;
            			}
HXDLIN( 699)			if (_hx_tmp) {
HXLINE( 700)				character->dance();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(PlayState_obj,controlPlayer,(void))

void PlayState_obj::popUpScore(Float strumTime){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_706_popUpScore)
HXDLIN( 706)		this->vocals->set_volume(( (Float)(1) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

void PlayState_obj::goodNoteHit( ::gameFolder::gameObjects::Note coolNote, ::gameFolder::gameObjects::Character character, ::flixel::group::FlxTypedGroup characterStrums){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_711_goodNoteHit)
HXDLIN( 711)		if (!(coolNote->wasGoodHit)) {
HXLINE( 713)			coolNote->wasGoodHit = true;
HXLINE( 714)			this->vocals->set_volume(( (Float)(1) ));
HXLINE( 716)			if (!(coolNote->isSustainNote)) {
HXLINE( 718)				this->popUpScore(coolNote->strumTime);
HXLINE( 719)				 ::gameFolder::meta::state::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 719)				_hx_tmp->combo = (_hx_tmp->combo + 1);
            			}
HXLINE( 722)			::String stringDirection = ::gameFolder::gameObjects::userInterface::UIBabyArrow_obj::getArrowFromNumber(coolNote->noteData);
HXLINE( 723)			character->playAnim((HX_("sing",4f,96,53,4c) + stringDirection.toUpperCase()),null(),null(),null());
HXLINE( 725)			Dynamic( characterStrums->members->__get(coolNote->noteData)).StaticCast<  ::gameFolder::gameObjects::userInterface::UIBabyArrow >()->playAnim(HX_("confirm",00,9d,39,10),true,null(),null());
HXLINE( 727)			if (!(coolNote->isSustainNote)) {
HXLINE( 729)				coolNote->kill();
HXLINE( 730)				this->notes->remove(coolNote,true).StaticCast<  ::gameFolder::gameObjects::Note >();
HXLINE( 731)				coolNote->destroy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::missNoteCheck(::hx::Null< int >  __o_direction,::Array< bool > pressControls, ::gameFolder::gameObjects::Character character){
            		int direction = __o_direction.Default(0);
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_739_missNoteCheck)
HXDLIN( 739)		if (pressControls->__get(direction)) {
HXLINE( 741)			::String stringDirection = ::gameFolder::gameObjects::userInterface::UIBabyArrow_obj::getArrowFromNumber(direction);
HXLINE( 743)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 743)			::String library = null();
HXDLIN( 743)			::String _hx_tmp1 = ::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN( 743)			_hx_tmp->play(_hx_tmp1,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
HXLINE( 744)			character->playAnim(((HX_("sing",4f,96,53,4c) + stringDirection.toUpperCase()) + HX_("miss",fc,52,5c,48)),null(),null(),null());
HXLINE( 746)			if ((this->combo > 0)) {
HXLINE( 747)				this->combo = 0;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,missNoteCheck,(void))

void PlayState_obj::startSong(){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_759_startSong)
HXLINE( 760)		this->startingSong = false;
HXLINE( 762)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE( 763)		this->lastReportedPlayheadPosition = 0;
HXLINE( 765)		if (!(this->paused)) {
HXLINE( 766)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 766)			_hx_tmp->playMusic((((HX_("assets/songs/",bd,d2,3f,cf) + ( (::String)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),1,false,null());
            		}
HXLINE( 768)		this->vocals->play(null(),null(),null());
HXLINE( 772)		this->songLength = ::flixel::FlxG_obj::sound->music->_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_780_generateSong)
HXLINE( 783)		 ::Dynamic songData = ::gameFolder::meta::state::PlayState_obj::SONG;
HXLINE( 784)		::gameFolder::meta::Conductor_obj::changeBPM(( (int)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 786)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE( 788)		if (( (bool)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE( 789)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 789)			this->vocals = _hx_tmp->loadEmbedded((((HX_("assets/songs/",bd,d2,3f,cf) + ( (::String)(::gameFolder::meta::state::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase()) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            		}
            		else {
HXLINE( 791)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE( 793)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE( 795)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 796)		this->add(this->notes);
HXLINE( 798)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE( 801)		int playerCounter = 0;
HXLINE( 803)		int daBeats = 0;
HXLINE( 804)		{
HXLINE( 804)			int _g = 0;
HXDLIN( 804)			while((_g < noteData->length)){
HXLINE( 804)				 ::Dynamic section = noteData->__get(_g);
HXDLIN( 804)				_g = (_g + 1);
HXLINE( 806)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE( 808)				{
HXLINE( 808)					int _g1 = 0;
HXDLIN( 808)					::cpp::VirtualArray _g2 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 808)					while((_g1 < _g2->get_length())){
HXLINE( 808)						 ::Dynamic songNotes = _g2->__get(_g1);
HXDLIN( 808)						_g1 = (_g1 + 1);
HXLINE( 810)						Float daStrumTime = ( (Float)(songNotes->__GetItem(0)) );
HXLINE( 811)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4));
HXLINE( 813)						Float daNoteType = ( (Float)(0) );
HXLINE( 815)						if (::hx::IsGreater( songNotes->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),2 )) {
HXLINE( 816)							daNoteType = ( (Float)(songNotes->__GetItem(3)) );
            						}
HXLINE( 818)						bool gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE( 820)						if (::hx::IsGreater( songNotes->__GetItem(1),3 )) {
HXLINE( 822)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE( 825)						 ::gameFolder::gameObjects::Note oldNote;
HXLINE( 826)						if ((this->unspawnNotes->length > 0)) {
HXLINE( 827)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::gameFolder::gameObjects::Note >();
            						}
            						else {
HXLINE( 829)							oldNote = null();
            						}
HXLINE( 831)						 ::gameFolder::gameObjects::Note swagNote =  ::gameFolder::gameObjects::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,daNoteType,oldNote,null());
HXLINE( 832)						swagNote->sustainLength = ( (Float)(songNotes->__GetItem(2)) );
HXLINE( 833)						swagNote->scrollFactor->set(0,0);
HXLINE( 835)						Float susLength = swagNote->sustainLength;
HXLINE( 837)						susLength = (susLength / ::gameFolder::meta::Conductor_obj::stepCrochet);
HXLINE( 838)						this->unspawnNotes->push(swagNote);
HXLINE( 840)						{
HXLINE( 840)							int _g = 0;
HXDLIN( 840)							int _g3 = ::Math_obj::floor(susLength);
HXDLIN( 840)							while((_g < _g3)){
HXLINE( 840)								_g = (_g + 1);
HXDLIN( 840)								int susNote = (_g - 1);
HXLINE( 842)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::gameFolder::gameObjects::Note >();
HXLINE( 844)								 ::gameFolder::gameObjects::Note sustainNote =  ::gameFolder::gameObjects::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::gameFolder::meta::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::gameFolder::meta::Conductor_obj::stepCrochet),daNoteData,daNoteType,oldNote,true);
HXLINE( 846)								sustainNote->scrollFactor->set(null(),null());
HXLINE( 847)								this->unspawnNotes->push(sustainNote);
HXLINE( 849)								sustainNote->mustPress = gottaHitNote;
HXLINE( 851)								if (sustainNote->mustPress) {
HXLINE( 853)									 ::gameFolder::gameObjects::Note _g = sustainNote;
HXDLIN( 853)									_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            							}
            						}
HXLINE( 857)						swagNote->mustPress = gottaHitNote;
HXLINE( 859)						if (swagNote->mustPress) {
HXLINE( 861)							 ::gameFolder::gameObjects::Note _g = swagNote;
HXDLIN( 861)							_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE( 865)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE( 871)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE( 873)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::gameFolder::gameObjects::Note Obj1, ::gameFolder::gameObjects::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_878_sortByShit)
HXDLIN( 878)		Float Value1 = Obj1->strumTime;
HXDLIN( 878)		Float Value2 = Obj2->strumTime;
HXDLIN( 878)		int result = 0;
HXDLIN( 878)		if ((Value1 < Value2)) {
HXDLIN( 878)			result = -1;
            		}
            		else {
HXDLIN( 878)			if ((Value1 > Value2)) {
HXDLIN( 878)				result = 1;
            			}
            		}
HXDLIN( 878)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::gameFolder::meta::state::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_893_startCountdown)
HXLINE( 894)			_gthis->dadOpponent->dance();
HXLINE( 895)			_gthis->gf->dance();
HXLINE( 896)			_gthis->boyfriend->dance();
HXLINE( 898)			 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 899)			introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_bbf60e05_37,3));
HXLINE( 900)			introAssets->set(HX_("school",74,b8,c8,40),::Array_obj< ::String >::fromData( _hx_array_data_bbf60e05_38,3));
HXLINE( 901)			introAssets->set(HX_("schoolEvil",28,a1,f5,f7),::Array_obj< ::String >::fromData( _hx_array_data_bbf60e05_39,3));
HXLINE( 903)			::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE( 904)			::String altSuffix = HX_("",00,00,00,00);
HXLINE( 906)			{
HXLINE( 906)				 ::Dynamic value = introAssets->keys();
HXDLIN( 906)				while(( (bool)(value->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 906)					::String value1 = ( (::String)(value->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 908)					if ((value1 == ::gameFolder::meta::state::PlayState_obj::curStage)) {
HXLINE( 910)						introAlts = ( (::Array< ::String >)(introAssets->get(value1)) );
HXLINE( 911)						altSuffix = HX_("-pixel",39,03,b3,c0);
            					}
            				}
            			}
HXLINE( 915)			switch((int)(swagCounter->__get(0))){
            				case (int)0: {
HXLINE( 918)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 918)					_hx_tmp->play(::Paths_obj::sound(HX_("intro3",47,54,90,9e),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,ready1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_933_startCountdown)
HXLINE( 933)						ready1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 920)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 920)					::String library = null();
HXDLIN( 920)					 ::flixel::FlxSprite ready1 = ready->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 921)					ready1->scrollFactor->set(null(),null());
HXLINE( 922)					ready1->updateHitbox();
HXLINE( 924)					if (::StringTools_obj::startsWith(::gameFolder::meta::state::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE( 925)						 ::flixel::FlxSprite ready = ready1;
HXDLIN( 925)						Float _hx_tmp = ready1->get_width();
HXDLIN( 925)						ready->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::gameFolder::meta::state::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE( 927)					ready1->screenCenter(null());
HXLINE( 928)					_gthis->add(ready1).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 929)					 ::flixel::FlxSprite ready2 = ready1;
HXDLIN( 929)					 ::flixel::FlxSprite _g = ready1;
HXDLIN( 929)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN( 929)					::flixel::tweens::FlxTween_obj::tween(ready2,_hx_tmp,(::gameFolder::meta::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(ready1)))));
HXLINE( 936)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 936)					_hx_tmp1->play(::Paths_obj::sound(HX_("intro2",46,54,90,9e),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,set1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_950_startCountdown)
HXLINE( 950)						set1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 938)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 938)					::String library = null();
HXDLIN( 938)					 ::flixel::FlxSprite set1 = set->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 939)					set1->scrollFactor->set(null(),null());
HXLINE( 941)					if (::StringTools_obj::startsWith(::gameFolder::meta::state::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE( 942)						 ::flixel::FlxSprite set = set1;
HXDLIN( 942)						Float _hx_tmp = set1->get_width();
HXDLIN( 942)						set->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::gameFolder::meta::state::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE( 944)					set1->screenCenter(null());
HXLINE( 945)					_gthis->add(set1).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 946)					 ::flixel::FlxSprite set2 = set1;
HXDLIN( 946)					 ::flixel::FlxSprite _g = set1;
HXDLIN( 946)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN( 946)					::flixel::tweens::FlxTween_obj::tween(set2,_hx_tmp,(::gameFolder::meta::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(set1)))));
HXLINE( 953)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 953)					_hx_tmp1->play(::Paths_obj::sound(HX_("intro1",45,54,90,9e),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,go1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_969_startCountdown)
HXLINE( 969)						go1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 955)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 955)					::String library = null();
HXDLIN( 955)					 ::flixel::FlxSprite go1 = go->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 956)					go1->scrollFactor->set(null(),null());
HXLINE( 958)					if (::StringTools_obj::startsWith(::gameFolder::meta::state::PlayState_obj::curStage,HX_("school",74,b8,c8,40))) {
HXLINE( 959)						 ::flixel::FlxSprite go = go1;
HXDLIN( 959)						Float _hx_tmp = go1->get_width();
HXDLIN( 959)						go->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::gameFolder::meta::state::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE( 961)					go1->updateHitbox();
HXLINE( 963)					go1->screenCenter(null());
HXLINE( 964)					_gthis->add(go1).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 965)					 ::flixel::FlxSprite go2 = go1;
HXDLIN( 965)					 ::flixel::FlxSprite _g = go1;
HXDLIN( 965)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN( 965)					::flixel::tweens::FlxTween_obj::tween(go2,_hx_tmp,(::gameFolder::meta::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(go1)))));
HXLINE( 972)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 972)					_hx_tmp1->play(::Paths_obj::sound(HX_("introGo",b4,7b,b9,1f),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)4: {
            				}
            				break;
            			}
HXLINE( 976)			::Array< int > swagCounter1 = swagCounter;
HXDLIN( 976)			int _hx_tmp = 0;
HXDLIN( 976)			swagCounter1[_hx_tmp] = (swagCounter1->__get(_hx_tmp) + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_882_startCountdown)
HXLINE( 881)		 ::gameFolder::meta::state::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 883)		this->generateStaticArrows(0);
HXLINE( 884)		this->generateStaticArrows(1);
HXLINE( 886)		this->startedCountdown = true;
HXLINE( 887)		::gameFolder::meta::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE( 888)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::gameFolder::meta::Conductor >();
HXDLIN( 888)		::gameFolder::meta::Conductor_obj::songPosition = (::gameFolder::meta::Conductor_obj::songPosition - (::gameFolder::meta::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE( 890)		::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_bbf60e05_44,1);
HXLINE( 892)		 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN( 892)		this->startTimer = _hx_tmp1->start((::gameFolder::meta::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_3(_gthis,swagCounter)),5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_8120c3bdc8087002_983_generateStaticArrows)
HXDLIN( 983)		int _g = 0;
HXDLIN( 983)		while((_g < 4)){
HXDLIN( 983)			_g = (_g + 1);
HXDLIN( 983)			int i = (_g - 1);
HXLINE( 987)			 ::gameFolder::gameObjects::userInterface::UIBabyArrow babyArrow =  ::gameFolder::gameObjects::userInterface::UIBabyArrow_obj::__alloc( HX_CTX ,( (Float)(0) ),(Dynamic( this->strumLine->members->__get(::Math_obj::floor(( (Float)((i + (player * 4))) )))).StaticCast<  ::flixel::FlxSprite >()->y - ( (Float)(25) )),i);
HXLINE( 989)			babyArrow->ID = i;
HXLINE( 991)			if ((player == 1)) {
HXLINE( 994)				this->boyfriendStrums->add(babyArrow).StaticCast<  ::gameFolder::gameObjects::userInterface::UIBabyArrow >();
            			}
            			else {
HXLINE( 996)				this->dadStrums->add(babyArrow).StaticCast<  ::gameFolder::gameObjects::userInterface::UIBabyArrow >();
            			}
HXLINE( 999)			{
HXLINE( 999)				 ::gameFolder::gameObjects::userInterface::UIBabyArrow _g1 = babyArrow;
HXDLIN( 999)				_g1->set_y((_g1->y - ( (Float)(10) )));
            			}
HXLINE(1000)			babyArrow->set_alpha(( (Float)(0) ));
HXLINE(1001)			::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),(babyArrow->y + 10))
            				->setFixed(1,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE(1003)			{
HXLINE(1003)				 ::gameFolder::gameObjects::userInterface::UIBabyArrow _g2 = babyArrow;
HXDLIN(1003)				_g2->set_x((_g2->x + 75));
            			}
HXLINE(1004)			{
HXLINE(1004)				 ::gameFolder::gameObjects::userInterface::UIBabyArrow _g3 = babyArrow;
HXDLIN(1004)				_g3->set_x((_g3->x + (::gameFolder::gameObjects::Note_obj::swagWidth * ( (Float)(i) ))));
            			}
HXLINE(1005)			{
HXLINE(1005)				 ::gameFolder::gameObjects::userInterface::UIBabyArrow _g4 = babyArrow;
HXDLIN(1005)				_g4->set_x((_g4->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
            			}
HXLINE(1007)			babyArrow->set_x(( (Float)(::Math_obj::floor(babyArrow->x)) ));
HXLINE(1008)			babyArrow->set_y(( (Float)(::Math_obj::floor(babyArrow->y)) ));
HXLINE(1010)			babyArrow->playAnim(HX_("static",ae,dc,fb,05),null(),null(),null());
HXLINE(1011)			this->strumLineNotes->add(babyArrow).StaticCast<  ::gameFolder::gameObjects::userInterface::UIBabyArrow >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_1021_resyncVocals)
HXLINE(1022)		this->vocals->pause();
HXLINE(1024)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1025)		::gameFolder::meta::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(1026)		this->vocals->set_time(::gameFolder::meta::Conductor_obj::songPosition);
HXLINE(1027)		this->vocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_1031_stepHit)
HXLINE(1032)		this->super::stepHit();
HXLINE(1034)		bool _hx_tmp;
HXDLIN(1034)		if (!((::flixel::FlxG_obj::sound->music->_time > (::gameFolder::meta::Conductor_obj::songPosition + 20)))) {
HXLINE(1034)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time < (::gameFolder::meta::Conductor_obj::songPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE(1034)			_hx_tmp = true;
            		}
HXDLIN(1034)		if (_hx_tmp) {
HXLINE(1036)			this->resyncVocals();
            		}
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_1042_beatHit)
HXLINE(1043)		this->super::beatHit();
HXLINE(1045)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::gameFolder::gameObjects::Note a2, ::gameFolder::gameObjects::Note a3){
            				HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_1047_beatHit)
HXLINE(1047)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1047)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(1047)			int a1 = 1;
HXDLIN(1047)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(1047)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(1050)		bool _hx_tmp;
HXDLIN(1050)		bool _hx_tmp1;
HXDLIN(1050)		if (this->camZooming) {
HXLINE(1050)			_hx_tmp1 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            		}
            		else {
HXLINE(1050)			_hx_tmp1 = false;
            		}
HXDLIN(1050)		if (_hx_tmp1) {
HXLINE(1050)			_hx_tmp = (::hx::Mod(this->curBeat,4) == 0);
            		}
            		else {
HXLINE(1050)			_hx_tmp = false;
            		}
HXDLIN(1050)		if (_hx_tmp) {
HXLINE(1052)			{
HXLINE(1052)				 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(1052)				_g->set_zoom((_g->zoom + ((Float)0.015)));
            			}
HXLINE(1053)			{
HXLINE(1053)				 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(1053)				_g1->set_zoom((_g1->zoom + ((Float)0.05)));
            			}
            		}
HXLINE(1056)		if ((::hx::Mod(this->curBeat,this->gfSpeed) == 0)) {
HXLINE(1057)			this->gf->dance();
            		}
HXLINE(1059)		if (!(::StringTools_obj::startsWith(this->boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)))) {
HXLINE(1061)			this->boyfriend->dance();
            		}
HXLINE(1065)		if (!(::StringTools_obj::startsWith(this->dadOpponent->animation->_curAnim->name,HX_("sing",4f,96,53,4c)))) {
HXLINE(1067)			this->dadOpponent->dance();
            		}
HXLINE(1071)		this->stageBuild->stageUpdate();
            	}


void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_1079_openSubState)
HXLINE(1080)		if (this->paused) {
HXLINE(1082)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1084)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1085)				this->vocals->pause();
            			}
HXLINE(1088)			if (!(this->startTimer->finished)) {
HXLINE(1089)				this->startTimer->active = false;
            			}
            		}
HXLINE(1092)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_1096_closeSubState)
HXLINE(1097)		if (this->paused) {
HXLINE(1099)			bool _hx_tmp;
HXDLIN(1099)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1099)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(1099)				_hx_tmp = false;
            			}
HXDLIN(1099)			if (_hx_tmp) {
HXLINE(1101)				this->resyncVocals();
            			}
HXLINE(1104)			if (!(this->startTimer->finished)) {
HXLINE(1105)				this->startTimer->active = true;
            			}
HXLINE(1106)			this->paused = false;
            		}
HXLINE(1122)		this->super::closeSubState();
            	}


::String PlayState_obj::curStage;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

Float PlayState_obj::defaultCamZoom;

int PlayState_obj::songScore;

Float PlayState_obj::daPixelZoom;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "gameFolder.meta.state.PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(dadOpponent,"dadOpponent");
	HX_MARK_MEMBER_NAME(gf,"gf");
	HX_MARK_MEMBER_NAME(boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(boyfriendAutoplay,"boyfriendAutoplay");
	HX_MARK_MEMBER_NAME(dadAutoplay,"dadAutoplay");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(holdControls,"holdControls");
	HX_MARK_MEMBER_NAME(pressControls,"pressControls");
	HX_MARK_MEMBER_NAME(releaseControls,"releaseControls");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(boyfriendStrums,"boyfriendStrums");
	HX_MARK_MEMBER_NAME(dadStrums,"dadStrums");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(camDisplaceX,"camDisplaceX");
	HX_MARK_MEMBER_NAME(camDisplaceY,"camDisplaceY");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(iconRPC,"iconRPC");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(stageBuild,"stageBuild");
	HX_MARK_MEMBER_NAME(uiHud,"uiHud");
	HX_MARK_MEMBER_NAME(canAscend,"canAscend");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(dadOpponent,"dadOpponent");
	HX_VISIT_MEMBER_NAME(gf,"gf");
	HX_VISIT_MEMBER_NAME(boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(boyfriendAutoplay,"boyfriendAutoplay");
	HX_VISIT_MEMBER_NAME(dadAutoplay,"dadAutoplay");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(holdControls,"holdControls");
	HX_VISIT_MEMBER_NAME(pressControls,"pressControls");
	HX_VISIT_MEMBER_NAME(releaseControls,"releaseControls");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(boyfriendStrums,"boyfriendStrums");
	HX_VISIT_MEMBER_NAME(dadStrums,"dadStrums");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(camDisplaceX,"camDisplaceX");
	HX_VISIT_MEMBER_NAME(camDisplaceY,"camDisplaceY");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(iconRPC,"iconRPC");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(stageBuild,"stageBuild");
	HX_VISIT_MEMBER_NAME(uiHud,"uiHud");
	HX_VISIT_MEMBER_NAME(canAscend,"canAscend");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { return ::hx::Val( gf ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		if (HX_FIELD_EQ(inName,"uiHud") ) { return ::hx::Val( uiHud ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"iconRPC") ) { return ::hx::Val( iconRPC ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boyfriend") ) { return ::hx::Val( boyfriend ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"dadStrums") ) { return ::hx::Val( dadStrums ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"canAscend") ) { return ::hx::Val( canAscend ); }
		if (HX_FIELD_EQ(inName,"noteCalls") ) { return ::hx::Val( noteCalls_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"stageBuild") ) { return ::hx::Val( stageBuild ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dadOpponent") ) { return ::hx::Val( dadOpponent ); }
		if (HX_FIELD_EQ(inName,"dadAutoplay") ) { return ::hx::Val( dadAutoplay ); }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"holdControls") ) { return ::hx::Val( holdControls ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"camDisplaceX") ) { return ::hx::Val( camDisplaceX ); }
		if (HX_FIELD_EQ(inName,"camDisplaceY") ) { return ::hx::Val( camDisplaceY ); }
		if (HX_FIELD_EQ(inName,"mainControls") ) { return ::hx::Val( mainControls_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pressControls") ) { return ::hx::Val( pressControls ); }
		if (HX_FIELD_EQ(inName,"controlPlayer") ) { return ::hx::Val( controlPlayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"missNoteCheck") ) { return ::hx::Val( missNoteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"strumCallsAuto") ) { return ::hx::Val( strumCallsAuto_dyn() ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"releaseControls") ) { return ::hx::Val( releaseControls ); }
		if (HX_FIELD_EQ(inName,"boyfriendStrums") ) { return ::hx::Val( boyfriendStrums ); }
		if (HX_FIELD_EQ(inName,"strumCameraRoll") ) { return ::hx::Val( strumCameraRoll_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"boyfriendAutoplay") ) { return ::hx::Val( boyfriendAutoplay ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { outValue = ( curStage ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"songScore") ) { outValue = ( songScore ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { outValue = ( defaultCamZoom ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=inValue.Cast<  ::gameFolder::gameObjects::Character >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uiHud") ) { uiHud=inValue.Cast<  ::gameFolder::gameObjects::userInterface::ClassHUD >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconRPC") ) { iconRPC=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=inValue.Cast<  ::gameFolder::gameObjects::Boyfriend >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dadStrums") ) { dadStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canAscend") ) { canAscend=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageBuild") ) { stageBuild=inValue.Cast<  ::gameFolder::gameObjects::Stage >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dadOpponent") ) { dadOpponent=inValue.Cast<  ::gameFolder::gameObjects::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dadAutoplay") ) { dadAutoplay=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdControls") ) { holdControls=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camDisplaceX") ) { camDisplaceX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camDisplaceY") ) { camDisplaceY=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pressControls") ) { pressControls=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"releaseControls") ) { releaseControls=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendStrums") ) { boyfriendStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"boyfriendAutoplay") ) { boyfriendAutoplay=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=ioValue.Cast< ::String >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("dadOpponent",04,cb,d0,6b));
	outFields->push(HX_("gf",1f,5a,00,00));
	outFields->push(HX_("boyfriend",6a,29,b8,e6));
	outFields->push(HX_("boyfriendAutoplay",6d,50,d7,7c));
	outFields->push(HX_("dadAutoplay",4a,02,bf,b5));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("holdControls",d5,e2,5a,2d));
	outFields->push(HX_("pressControls",19,51,8a,d8));
	outFields->push(HX_("releaseControls",5d,67,91,04));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("boyfriendStrums",14,cc,6d,2e));
	outFields->push(HX_("dadStrums",b1,5c,9a,96));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("camDisplaceX",70,57,a0,84));
	outFields->push(HX_("camDisplaceY",71,57,a0,84));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("iconRPC",ec,c8,10,d6));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("stageBuild",90,2f,3b,0e));
	outFields->push(HX_("uiHud",c3,4e,80,a3));
	outFields->push(HX_("canAscend",7a,2d,b6,93));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::gameFolder::gameObjects::Character */ ,(int)offsetof(PlayState_obj,dadOpponent),HX_("dadOpponent",04,cb,d0,6b)},
	{::hx::fsObject /*  ::gameFolder::gameObjects::Character */ ,(int)offsetof(PlayState_obj,gf),HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::gameFolder::gameObjects::Boyfriend */ ,(int)offsetof(PlayState_obj,boyfriend),HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,boyfriendAutoplay),HX_("boyfriendAutoplay",6d,50,d7,7c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,dadAutoplay),HX_("dadAutoplay",4a,02,bf,b5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,holdControls),HX_("holdControls",d5,e2,5a,2d)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,pressControls),HX_("pressControls",19,51,8a,d8)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,releaseControls),HX_("releaseControls",5d,67,91,04)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,boyfriendStrums),HX_("boyfriendStrums",14,cc,6d,2e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,dadStrums),HX_("dadStrums",b1,5c,9a,96)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camDisplaceX),HX_("camDisplaceX",70,57,a0,84)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camDisplaceY),HX_("camDisplaceY",71,57,a0,84)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,iconRPC),HX_("iconRPC",ec,c8,10,d6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /*  ::gameFolder::gameObjects::Stage */ ,(int)offsetof(PlayState_obj,stageBuild),HX_("stageBuild",90,2f,3b,0e)},
	{::hx::fsObject /*  ::gameFolder::gameObjects::userInterface::ClassHUD */ ,(int)offsetof(PlayState_obj,uiHud),HX_("uiHud",c3,4e,80,a3)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canAscend),HX_("canAscend",7a,2d,b6,93)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PlayState_obj::curStage,HX_("curStage",1e,65,b9,cb)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsFloat,(void *) &PlayState_obj::defaultCamZoom,HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsInt,(void *) &PlayState_obj::songScore,HX_("songScore",3d,bb,53,a8)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("startTimer",03,98,4c,2c),
	HX_("vocals",5e,10,51,59),
	HX_("dadOpponent",04,cb,d0,6b),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("boyfriendAutoplay",6d,50,d7,7c),
	HX_("dadAutoplay",4a,02,bf,b5),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("holdControls",d5,e2,5a,2d),
	HX_("pressControls",19,51,8a,d8),
	HX_("releaseControls",5d,67,91,04),
	HX_("curSection",45,58,c1,68),
	HX_("camFollow",e0,6e,47,22),
	HX_("strumLine",dd,79,d7,ee),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("boyfriendStrums",14,cc,6d,2e),
	HX_("dadStrums",b1,5c,9a,96),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("startingSong",b5,31,61,33),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("camDisplaceX",70,57,a0,84),
	HX_("camDisplaceY",71,57,a0,84),
	HX_("camZooming",60,3b,bf,d6),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("iconRPC",ec,c8,10,d6),
	HX_("songLength",9b,3a,8c,fa),
	HX_("stageBuild",90,2f,3b,0e),
	HX_("uiHud",c3,4e,80,a3),
	HX_("create",fc,66,0f,7c),
	HX_("canAscend",7a,2d,b6,93),
	HX_("update",09,86,05,87),
	HX_("mainControls",cf,db,7c,66),
	HX_("strumCallsAuto",9b,bd,f9,18),
	HX_("strumCameraRoll",6b,4b,f9,c6),
	HX_("noteCalls",c3,bc,a8,7e),
	HX_("controlPlayer",9e,2e,7d,b0),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("missNoteCheck",da,30,ee,14),
	HX_("startSong",57,9d,4b,05),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("stepHit",67,ae,41,81),
	HX_("beatHit",7d,ea,04,74),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::songScore,"songScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songScore,"songScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("curStage",1e,65,b9,cb),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("songScore",3d,bb,53,a8),
	HX_("daPixelZoom",7c,81,6e,df),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gameFolder.meta.state.PlayState",05,0e,f6,bb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_39_boot)
HXDLIN(  39)		curStage = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_41_boot)
HXDLIN(  41)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_42_boot)
HXDLIN(  42)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_43_boot)
HXDLIN(  43)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_44_boot)
HXDLIN(  44)		storyDifficulty = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_104_boot)
HXDLIN( 104)		defaultCamZoom = ((Float)1.05);
            	}
{
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_108_boot)
HXDLIN( 108)		songScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_8120c3bdc8087002_118_boot)
HXDLIN( 118)		daPixelZoom = ((Float)6);
            	}
}

} // end namespace gameFolder
} // end namespace meta
} // end namespace state
