// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionAnalog
#include <flixel/input/actions/FlxActionAnalog.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInput
#include <flixel/input/actions/FlxActionInput.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionInputDigital
#include <flixel/input/actions/FlxActionInputDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionManager
#include <flixel/input/actions/FlxActionManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxInputDevice
#include <flixel/input/actions/FlxInputDevice.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gameFolder_meta_Control
#include <gameFolder/meta/Control.h>
#endif
#ifndef INCLUDED_gameFolder_meta_Controls
#include <gameFolder/meta/Controls.h>
#endif
#ifndef INCLUDED_gameFolder_meta_Device
#include <gameFolder/meta/Device.h>
#endif
#ifndef INCLUDED_gameFolder_meta_KeyboardScheme
#include <gameFolder/meta/KeyboardScheme.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_115_new,"gameFolder.meta.Controls","new",0xa3fe6e23,"gameFolder.meta.Controls.new","gameFolder/meta/Controls.hx",115,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_147_get_UP,"gameFolder.meta.Controls","get_UP",0x6d29ffc1,"gameFolder.meta.Controls.get_UP","gameFolder/meta/Controls.hx",147,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_152_get_LEFT,"gameFolder.meta.Controls","get_LEFT",0x857f2aed,"gameFolder.meta.Controls.get_LEFT","gameFolder/meta/Controls.hx",152,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_157_get_RIGHT,"gameFolder.meta.Controls","get_RIGHT",0xc0d37216,"gameFolder.meta.Controls.get_RIGHT","gameFolder/meta/Controls.hx",157,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_162_get_DOWN,"gameFolder.meta.Controls","get_DOWN",0x803d1b48,"gameFolder.meta.Controls.get_DOWN","gameFolder/meta/Controls.hx",162,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_167_get_UP_P,"gameFolder.meta.Controls","get_UP_P",0x8b7a8512,"gameFolder.meta.Controls.get_UP_P","gameFolder/meta/Controls.hx",167,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_172_get_LEFT_P,"gameFolder.meta.Controls","get_LEFT_P",0x43d1d33e,"gameFolder.meta.Controls.get_LEFT_P","gameFolder/meta/Controls.hx",172,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_177_get_RIGHT_P,"gameFolder.meta.Controls","get_RIGHT_P",0x3224f6a7,"gameFolder.meta.Controls.get_RIGHT_P","gameFolder/meta/Controls.hx",177,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_182_get_DOWN_P,"gameFolder.meta.Controls","get_DOWN_P",0xde30d059,"gameFolder.meta.Controls.get_DOWN_P","gameFolder/meta/Controls.hx",182,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_187_get_UP_R,"gameFolder.meta.Controls","get_UP_R",0x8b7a8514,"gameFolder.meta.Controls.get_UP_R","gameFolder/meta/Controls.hx",187,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_192_get_LEFT_R,"gameFolder.meta.Controls","get_LEFT_R",0x43d1d340,"gameFolder.meta.Controls.get_LEFT_R","gameFolder/meta/Controls.hx",192,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_197_get_RIGHT_R,"gameFolder.meta.Controls","get_RIGHT_R",0x3224f6a9,"gameFolder.meta.Controls.get_RIGHT_R","gameFolder/meta/Controls.hx",197,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_202_get_DOWN_R,"gameFolder.meta.Controls","get_DOWN_R",0xde30d05b,"gameFolder.meta.Controls.get_DOWN_R","gameFolder/meta/Controls.hx",202,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_207_get_ACCEPT,"gameFolder.meta.Controls","get_ACCEPT",0xb5109f6e,"gameFolder.meta.Controls.get_ACCEPT","gameFolder/meta/Controls.hx",207,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_212_get_BACK,"gameFolder.meta.Controls","get_BACK",0x7edffd0d,"gameFolder.meta.Controls.get_BACK","gameFolder/meta/Controls.hx",212,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_217_get_PAUSE,"gameFolder.meta.Controls","get_PAUSE",0x94c73d30,"gameFolder.meta.Controls.get_PAUSE","gameFolder/meta/Controls.hx",217,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_222_get_RESET,"gameFolder.meta.Controls","get_RESET",0xbe37b009,"gameFolder.meta.Controls.get_RESET","gameFolder/meta/Controls.hx",222,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_227_get_CHEAT,"gameFolder.meta.Controls","get_CHEAT",0x1d25fd4d,"gameFolder.meta.Controls.get_CHEAT","gameFolder/meta/Controls.hx",227,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_291_update,"gameFolder.meta.Controls","update",0x50ffa426,"gameFolder.meta.Controls.update","gameFolder/meta/Controls.hx",291,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_301_checkByName,"gameFolder.meta.Controls","checkByName",0x0952976d,"gameFolder.meta.Controls.checkByName","gameFolder/meta/Controls.hx",301,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_305_getDialogueName,"gameFolder.meta.Controls","getDialogueName",0xdb51437c,"gameFolder.meta.Controls.getDialogueName","gameFolder/meta/Controls.hx",305,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_317_getDialogueNameFromToken,"gameFolder.meta.Controls","getDialogueNameFromToken",0xbe87ba13,"gameFolder.meta.Controls.getDialogueNameFromToken","gameFolder/meta/Controls.hx",317,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_322_getActionFromControl,"gameFolder.meta.Controls","getActionFromControl",0x25f2e864,"gameFolder.meta.Controls.getActionFromControl","gameFolder/meta/Controls.hx",322,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_350_forEachBound,"gameFolder.meta.Controls","forEachBound",0xea75c011,"gameFolder.meta.Controls.forEachBound","gameFolder/meta/Controls.hx",350,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_382_replaceBinding,"gameFolder.meta.Controls","replaceBinding",0x284f9c8e,"gameFolder.meta.Controls.replaceBinding","gameFolder/meta/Controls.hx",382,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_403_copyFrom,"gameFolder.meta.Controls","copyFrom",0x9bb4ab1c,"gameFolder.meta.Controls.copyFrom","gameFolder/meta/Controls.hx",403,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_450_copyTo,"gameFolder.meta.Controls","copyTo",0x932d3aad,"gameFolder.meta.Controls.copyTo","gameFolder/meta/Controls.hx",450,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_455_mergeKeyboardScheme,"gameFolder.meta.Controls","mergeKeyboardScheme",0x73b0e4c7,"gameFolder.meta.Controls.mergeKeyboardScheme","gameFolder/meta/Controls.hx",455,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_474_bindKeys,"gameFolder.meta.Controls","bindKeys",0x8824c5ae,"gameFolder.meta.Controls.bindKeys","gameFolder/meta/Controls.hx",474,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_487_unbindKeys,"gameFolder.meta.Controls","unbindKeys",0x4194fe47,"gameFolder.meta.Controls.unbindKeys","gameFolder/meta/Controls.hx",487,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_511_setKeyboardScheme,"gameFolder.meta.Controls","setKeyboardScheme",0x21a45c71,"gameFolder.meta.Controls.setKeyboardScheme","gameFolder/meta/Controls.hx",511,0x52a3264d)
static const int _hx_array_data_6dc620b1_460[] = {
	(int)87,(int)38,
};
static const int _hx_array_data_6dc620b1_461[] = {
	(int)83,(int)40,
};
static const int _hx_array_data_6dc620b1_462[] = {
	(int)65,(int)37,
};
static const int _hx_array_data_6dc620b1_463[] = {
	(int)68,(int)39,
};
static const int _hx_array_data_6dc620b1_464[] = {
	(int)90,(int)32,(int)13,
};
static const int _hx_array_data_6dc620b1_465[] = {
	(int)8,(int)27,
};
static const int _hx_array_data_6dc620b1_466[] = {
	(int)80,(int)13,(int)27,
};
static const int _hx_array_data_6dc620b1_467[] = {
	(int)82,
};
static const int _hx_array_data_6dc620b1_468[] = {
	(int)87,
};
static const int _hx_array_data_6dc620b1_469[] = {
	(int)83,
};
static const int _hx_array_data_6dc620b1_470[] = {
	(int)65,
};
static const int _hx_array_data_6dc620b1_471[] = {
	(int)68,
};
static const int _hx_array_data_6dc620b1_472[] = {
	(int)71,(int)90,
};
static const int _hx_array_data_6dc620b1_473[] = {
	(int)72,(int)88,
};
static const int _hx_array_data_6dc620b1_474[] = {
	(int)49,
};
static const int _hx_array_data_6dc620b1_475[] = {
	(int)82,
};
static const int _hx_array_data_6dc620b1_476[] = {
	(int)38,
};
static const int _hx_array_data_6dc620b1_477[] = {
	(int)40,
};
static const int _hx_array_data_6dc620b1_478[] = {
	(int)37,
};
static const int _hx_array_data_6dc620b1_479[] = {
	(int)39,
};
static const int _hx_array_data_6dc620b1_480[] = {
	(int)79,
};
static const int _hx_array_data_6dc620b1_481[] = {
	(int)80,
};
static const int _hx_array_data_6dc620b1_482[] = {
	(int)13,
};
static const int _hx_array_data_6dc620b1_483[] = {
	(int)8,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_588_removeKeyboard,"gameFolder.meta.Controls","removeKeyboard",0xb620fc28,"gameFolder.meta.Controls.removeKeyboard","gameFolder/meta/Controls.hx",588,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_601_addGamepad,"gameFolder.meta.Controls","addGamepad",0xf80ffd1d,"gameFolder.meta.Controls.addGamepad","gameFolder/meta/Controls.hx",601,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_614_addGamepadLiteral,"gameFolder.meta.Controls","addGamepadLiteral",0x6ebd61d2,"gameFolder.meta.Controls.addGamepadLiteral","gameFolder/meta/Controls.hx",614,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_627_removeGamepad,"gameFolder.meta.Controls","removeGamepad",0x8f9ccc40,"gameFolder.meta.Controls.removeGamepad","gameFolder/meta/Controls.hx",627,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_645_addDefaultGamepad,"gameFolder.meta.Controls","addDefaultGamepad",0xc866e4e4,"gameFolder.meta.Controls.addDefaultGamepad","gameFolder/meta/Controls.hx",645,0x52a3264d)
static const int _hx_array_data_6dc620b1_547[] = {
	(int)0,
};
static const int _hx_array_data_6dc620b1_548[] = {
	(int)1,
};
static const int _hx_array_data_6dc620b1_549[] = {
	(int)11,(int)34,
};
static const int _hx_array_data_6dc620b1_550[] = {
	(int)12,(int)36,
};
static const int _hx_array_data_6dc620b1_551[] = {
	(int)13,(int)37,
};
static const int _hx_array_data_6dc620b1_552[] = {
	(int)14,(int)35,
};
static const int _hx_array_data_6dc620b1_553[] = {
	(int)7,
};
static const int _hx_array_data_6dc620b1_554[] = {
	(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_679_bindButtons,"gameFolder.meta.Controls","bindButtons",0xdfd8fec7,"gameFolder.meta.Controls.bindButtons","gameFolder/meta/Controls.hx",679,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_692_unbindButtons,"gameFolder.meta.Controls","unbindButtons",0x157d6bce,"gameFolder.meta.Controls.unbindButtons","gameFolder/meta/Controls.hx",692,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_716_getInputsFor,"gameFolder.meta.Controls","getInputsFor",0xf33447c7,"gameFolder.meta.Controls.getInputsFor","gameFolder/meta/Controls.hx",716,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_740_removeDevice,"gameFolder.meta.Controls","removeDevice",0x9bf889d7,"gameFolder.meta.Controls.removeDevice","gameFolder/meta/Controls.hx",740,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_337_init,"gameFolder.meta.Controls","init",0xd75aa7ed,"gameFolder.meta.Controls.init","gameFolder/meta/Controls.hx",337,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_495_addKeys,"gameFolder.meta.Controls","addKeys",0x74245ff8,"gameFolder.meta.Controls.addKeys","gameFolder/meta/Controls.hx",495,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_500_removeKeys,"gameFolder.meta.Controls","removeKeys",0xcb260cf5,"gameFolder.meta.Controls.removeKeys","gameFolder/meta/Controls.hx",500,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_700_addButtons,"gameFolder.meta.Controls","addButtons",0x38ff6ebd,"gameFolder.meta.Controls.addButtons","gameFolder/meta/Controls.hx",700,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_705_removeButtons,"gameFolder.meta.Controls","removeButtons",0xd08c3de0,"gameFolder.meta.Controls.removeButtons","gameFolder/meta/Controls.hx",705,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_751_isDevice,"gameFolder.meta.Controls","isDevice",0x9d35177d,"gameFolder.meta.Controls.isDevice","gameFolder/meta/Controls.hx",751,0x52a3264d)
HX_LOCAL_STACK_FRAME(_hx_pos_1a9be1d3ed2fd945_760_isGamepad,"gameFolder.meta.Controls","isGamepad",0xa35c2fda,"gameFolder.meta.Controls.isGamepad","gameFolder/meta/Controls.hx",760,0x52a3264d)
namespace gameFolder{
namespace meta{

void Controls_obj::__construct(::String name, ::gameFolder::meta::KeyboardScheme __o_scheme){
            		 ::gameFolder::meta::KeyboardScheme scheme = __o_scheme;
            		if (::hx::IsNull(__o_scheme)) scheme = ::gameFolder::meta::KeyboardScheme_obj::None_dyn();
            	HX_GC_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_115_new)
HXLINE( 142)		this->keyboardScheme = ::gameFolder::meta::KeyboardScheme_obj::None_dyn();
HXLINE( 141)		this->gamepadsAdded = ::Array_obj< int >::__new(0);
HXLINE( 136)		this->byName =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 133)		this->_cheat =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("cheat",13,97,b6,45),null());
HXLINE( 132)		this->_reset =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("reset",cf,49,c8,e6),null());
HXLINE( 131)		this->_pause =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("pause",f6,d6,57,bd),null());
HXLINE( 130)		this->_back =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("back",27,da,10,41),null());
HXLINE( 129)		this->_accept =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("accept",08,93,06,0b),null());
HXLINE( 128)		this->_downR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down-release",9c,bf,5b,fc),null());
HXLINE( 127)		this->_rightR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right-release",16,dd,28,fb),null());
HXLINE( 126)		this->_leftR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left-release",41,7c,5d,2e),null());
HXLINE( 125)		this->_upR =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up-release",95,4e,72,92),null());
HXLINE( 124)		this->_downP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down-press",18,fe,06,cf),null());
HXLINE( 123)		this->_rightP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right-press",12,e9,87,fb),null());
HXLINE( 122)		this->_leftP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left-press",7d,d7,13,c1),null());
HXLINE( 121)		this->_upP =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up-press",d1,ac,09,1c),null());
HXLINE( 120)		this->_down =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("down",62,f8,6d,42),null());
HXLINE( 119)		this->_right =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("right",dc,0b,64,e9),null());
HXLINE( 118)		this->_left =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("left",07,08,b0,47),null());
HXLINE( 117)		this->_up =  ::flixel::input::actions::FlxActionDigital_obj::__alloc( HX_CTX ,HX_("up",5b,66,00,00),null());
HXLINE( 232)		super::__construct(name,null(),null());
HXLINE( 234)		this->add(this->_up);
HXLINE( 235)		this->add(this->_left);
HXLINE( 236)		this->add(this->_right);
HXLINE( 237)		this->add(this->_down);
HXLINE( 238)		this->add(this->_upP);
HXLINE( 239)		this->add(this->_leftP);
HXLINE( 240)		this->add(this->_rightP);
HXLINE( 241)		this->add(this->_downP);
HXLINE( 242)		this->add(this->_upR);
HXLINE( 243)		this->add(this->_leftR);
HXLINE( 244)		this->add(this->_rightR);
HXLINE( 245)		this->add(this->_downR);
HXLINE( 246)		this->add(this->_accept);
HXLINE( 247)		this->add(this->_back);
HXLINE( 248)		this->add(this->_pause);
HXLINE( 249)		this->add(this->_reset);
HXLINE( 250)		this->add(this->_cheat);
HXLINE( 252)		{
HXLINE( 252)			int _g = 0;
HXDLIN( 252)			::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 252)			while((_g < _g1->length)){
HXLINE( 252)				 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 252)				_g = (_g + 1);
HXLINE( 253)				this->byName->set(action->name,action);
            			}
            		}
HXLINE( 255)		this->setKeyboardScheme(scheme,false);
            	}

Dynamic Controls_obj::__CreateEmpty() { return new Controls_obj; }

void *Controls_obj::_hx_vtable = 0;

Dynamic Controls_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Controls_obj > _hx_result = new Controls_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Controls_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x315ddd0d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x315ddd0d;
	} else {
		return inClassId==(int)0x50ec8e1b;
	}
}

bool Controls_obj::get_UP(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_147_get_UP)
HXDLIN( 147)		return this->_up->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP,return )

bool Controls_obj::get_LEFT(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_152_get_LEFT)
HXDLIN( 152)		return this->_left->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT,return )

bool Controls_obj::get_RIGHT(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_157_get_RIGHT)
HXDLIN( 157)		return this->_right->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT,return )

bool Controls_obj::get_DOWN(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_162_get_DOWN)
HXDLIN( 162)		return this->_down->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN,return )

bool Controls_obj::get_UP_P(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_167_get_UP_P)
HXDLIN( 167)		return this->_upP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP_P,return )

bool Controls_obj::get_LEFT_P(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_172_get_LEFT_P)
HXDLIN( 172)		return this->_leftP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT_P,return )

bool Controls_obj::get_RIGHT_P(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_177_get_RIGHT_P)
HXDLIN( 177)		return this->_rightP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT_P,return )

bool Controls_obj::get_DOWN_P(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_182_get_DOWN_P)
HXDLIN( 182)		return this->_downP->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN_P,return )

bool Controls_obj::get_UP_R(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_187_get_UP_R)
HXDLIN( 187)		return this->_upR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_UP_R,return )

bool Controls_obj::get_LEFT_R(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_192_get_LEFT_R)
HXDLIN( 192)		return this->_leftR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_LEFT_R,return )

bool Controls_obj::get_RIGHT_R(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_197_get_RIGHT_R)
HXDLIN( 197)		return this->_rightR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RIGHT_R,return )

bool Controls_obj::get_DOWN_R(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_202_get_DOWN_R)
HXDLIN( 202)		return this->_downR->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_DOWN_R,return )

bool Controls_obj::get_ACCEPT(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_207_get_ACCEPT)
HXDLIN( 207)		return this->_accept->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_ACCEPT,return )

bool Controls_obj::get_BACK(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_212_get_BACK)
HXDLIN( 212)		return this->_back->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_BACK,return )

bool Controls_obj::get_PAUSE(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_217_get_PAUSE)
HXDLIN( 217)		return this->_pause->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_PAUSE,return )

bool Controls_obj::get_RESET(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_222_get_RESET)
HXDLIN( 222)		return this->_reset->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_RESET,return )

bool Controls_obj::get_CHEAT(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_227_get_CHEAT)
HXDLIN( 227)		return this->_cheat->check();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,get_CHEAT,return )

void Controls_obj::update(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_291_update)
HXDLIN( 291)		this->super::update();
            	}


bool Controls_obj::checkByName(::String name){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_301_checkByName)
HXDLIN( 301)		return ( ( ::flixel::input::actions::FlxActionDigital)(this->byName->get(name)) )->check();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,checkByName,return )

::String Controls_obj::getDialogueName( ::flixel::input::actions::FlxActionDigital action){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_305_getDialogueName)
HXLINE( 306)		 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(0).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 307)		 ::flixel::input::actions::FlxInputDevice _g = input->device;
HXDLIN( 307)		switch((int)(_g->_hx_getIndex())){
            			case (int)3: {
HXLINE( 309)				return ((HX_("[",5b,00,00,00) + ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get(input->inputID)) + HX_("]",5d,00,00,00));
            			}
            			break;
            			case (int)4: {
HXLINE( 310)				return ((HX_("(",28,00,00,00) + ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::toStringMap->get(input->inputID)) + HX_(")",29,00,00,00));
            			}
            			break;
            			default:{
HXLINE( 311)				 ::flixel::input::actions::FlxInputDevice device = _g;
HXDLIN( 311)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown((HX_("unhandled device: ",f9,e1,62,a5) + ::Std_obj::string(device))));
            			}
            		}
HXLINE( 307)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getDialogueName,return )

::String Controls_obj::getDialogueNameFromToken(::String token){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_317_getDialogueNameFromToken)
HXDLIN( 317)		::cpp::VirtualArray params = null();
HXDLIN( 317)		return this->getDialogueName(this->getActionFromControl(::Type_obj::createEnum(::hx::ClassOf< ::gameFolder::meta::Control >(),token.toUpperCase(),params)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getDialogueNameFromToken,return )

 ::flixel::input::actions::FlxActionDigital Controls_obj::getActionFromControl( ::gameFolder::meta::Control control){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_322_getActionFromControl)
HXDLIN( 322)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXLINE( 324)				return this->_up;
            			}
            			break;
            			case (int)1: {
HXLINE( 326)				return this->_left;
            			}
            			break;
            			case (int)2: {
HXLINE( 327)				return this->_right;
            			}
            			break;
            			case (int)3: {
HXLINE( 325)				return this->_down;
            			}
            			break;
            			case (int)4: {
HXLINE( 331)				return this->_reset;
            			}
            			break;
            			case (int)5: {
HXLINE( 328)				return this->_accept;
            			}
            			break;
            			case (int)6: {
HXLINE( 329)				return this->_back;
            			}
            			break;
            			case (int)7: {
HXLINE( 330)				return this->_pause;
            			}
            			break;
            			case (int)8: {
HXLINE( 332)				return this->_cheat;
            			}
            			break;
            		}
HXLINE( 322)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,getActionFromControl,return )

void Controls_obj::forEachBound( ::gameFolder::meta::Control control, ::Dynamic func){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_350_forEachBound)
HXDLIN( 350)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXLINE( 353)				func(this->_up,1);
HXLINE( 354)				func(this->_upP,2);
HXLINE( 355)				func(this->_upR,-1);
            			}
            			break;
            			case (int)1: {
HXLINE( 357)				func(this->_left,1);
HXLINE( 358)				func(this->_leftP,2);
HXLINE( 359)				func(this->_leftR,-1);
            			}
            			break;
            			case (int)2: {
HXLINE( 361)				func(this->_right,1);
HXLINE( 362)				func(this->_rightP,2);
HXLINE( 363)				func(this->_rightR,-1);
            			}
            			break;
            			case (int)3: {
HXLINE( 365)				func(this->_down,1);
HXLINE( 366)				func(this->_downP,2);
HXLINE( 367)				func(this->_downR,-1);
            			}
            			break;
            			case (int)4: {
HXLINE( 375)				func(this->_reset,2);
            			}
            			break;
            			case (int)5: {
HXLINE( 369)				func(this->_accept,2);
            			}
            			break;
            			case (int)6: {
HXLINE( 371)				func(this->_back,2);
            			}
            			break;
            			case (int)7: {
HXLINE( 373)				func(this->_pause,2);
            			}
            			break;
            			case (int)8: {
HXLINE( 377)				func(this->_cheat,2);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,forEachBound,(void))

void Controls_obj::replaceBinding( ::gameFolder::meta::Control control, ::gameFolder::meta::Device device, ::Dynamic toAdd, ::Dynamic toRemove){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_382_replaceBinding)
HXLINE( 383)		if (::hx::IsEq( toAdd,toRemove )) {
HXLINE( 384)			return;
            		}
HXLINE( 386)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 389)				if (::hx::IsNotNull( toRemove )) {
HXLINE( 390)					this->unbindKeys(control,::Array_obj< int >::__new(1)->init(0,toRemove));
            				}
HXLINE( 391)				if (::hx::IsNotNull( toAdd )) {
HXLINE( 392)					this->bindKeys(control,::Array_obj< int >::__new(1)->init(0,toAdd));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 394)				int id = device->_hx_getInt(0);
HXDLIN( 394)				{
HXLINE( 395)					if (::hx::IsNotNull( toRemove )) {
HXLINE( 396)						this->unbindButtons(control,id,::Array_obj< int >::__new(1)->init(0,toRemove));
            					}
HXLINE( 397)					if (::hx::IsNotNull( toAdd )) {
HXLINE( 398)						this->bindButtons(control,id,::Array_obj< int >::__new(1)->init(0,toAdd));
            					}
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Controls_obj,replaceBinding,(void))

void Controls_obj::copyFrom( ::gameFolder::meta::Controls controls, ::gameFolder::meta::Device device){
            	HX_GC_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_403_copyFrom)
HXLINE( 405)		{
HXLINE( 405)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,controls->byName);
HXDLIN( 405)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 405)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 405)				::String name = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN( 405)				 ::flixel::input::actions::FlxActionDigital action = ( ( ::flixel::input::actions::FlxActionDigital)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 407)				{
HXLINE( 407)					int _g2 = 0;
HXDLIN( 407)					::Array< ::Dynamic> _g3 = action->inputs;
HXDLIN( 407)					while((_g2 < _g3->length)){
HXLINE( 407)						 ::flixel::input::actions::FlxActionInput input = _g3->__get(_g2).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 407)						_g2 = (_g2 + 1);
HXLINE( 409)						bool _hx_tmp;
HXDLIN( 409)						if (::hx::IsNotNull( device )) {
HXLINE( 409)							_hx_tmp = ::gameFolder::meta::Controls_obj::isDevice(input,device);
            						}
            						else {
HXLINE( 409)							_hx_tmp = true;
            						}
HXDLIN( 409)						if (_hx_tmp) {
HXLINE( 410)							( ( ::flixel::input::actions::FlxActionDigital)(this->byName->get(name)) )->add(( ( ::flixel::input::actions::FlxActionInputDigital)(input) ));
            						}
            					}
            				}
            			}
            		}
HXLINE( 425)		if (::hx::IsNull( device )) {
HXLINE( 430)			{
HXLINE( 430)				int _g = 0;
HXDLIN( 430)				::Array< int > _g1 = controls->gamepadsAdded;
HXDLIN( 430)				while((_g < _g1->length)){
HXLINE( 430)					int gamepad = _g1->__get(_g);
HXDLIN( 430)					_g = (_g + 1);
HXLINE( 431)					if (!(this->gamepadsAdded->contains(gamepad))) {
HXLINE( 432)						this->gamepadsAdded->push(gamepad);
            					}
            				}
            			}
HXLINE( 439)			this->mergeKeyboardScheme(controls->keyboardScheme);
            		}
            		else {
HXLINE( 425)			switch((int)(device->_hx_getIndex())){
            				case (int)0: {
HXLINE( 444)					this->mergeKeyboardScheme(controls->keyboardScheme);
            				}
            				break;
            				case (int)1: {
HXLINE( 441)					int id = device->_hx_getInt(0);
HXLINE( 442)					this->gamepadsAdded->push(id);
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,copyFrom,(void))

void Controls_obj::copyTo( ::gameFolder::meta::Controls controls, ::gameFolder::meta::Device device){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_450_copyTo)
HXDLIN( 450)		controls->copyFrom(::hx::ObjectPtr<OBJ_>(this),device);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,copyTo,(void))

void Controls_obj::mergeKeyboardScheme( ::gameFolder::meta::KeyboardScheme scheme){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_455_mergeKeyboardScheme)
HXDLIN( 455)		if (::hx::IsNotEq( scheme,::gameFolder::meta::KeyboardScheme_obj::None_dyn() )) {
HXLINE( 457)			if ((this->keyboardScheme->_hx_getIndex() == 2)) {
HXLINE( 460)				this->keyboardScheme = scheme;
            			}
            			else {
HXLINE( 462)				this->keyboardScheme = ::gameFolder::meta::KeyboardScheme_obj::Custom_dyn();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,mergeKeyboardScheme,(void))

void Controls_obj::bindKeys( ::gameFolder::meta::Control control,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_474_bindKeys)
HXDLIN( 474)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 474)					int state = 1;
HXDLIN( 474)					int _g = 0;
HXDLIN( 474)					while((_g < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g);
HXDLIN( 474)						_g = (_g + 1);
HXDLIN( 474)						action->addKey(key,state);
            					}
            				}
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 474)					int state1 = 2;
HXDLIN( 474)					int _g1 = 0;
HXDLIN( 474)					while((_g1 < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g1);
HXDLIN( 474)						_g1 = (_g1 + 1);
HXDLIN( 474)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 474)					int state2 = -1;
HXDLIN( 474)					int _g2 = 0;
HXDLIN( 474)					while((_g2 < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g2);
HXDLIN( 474)						_g2 = (_g2 + 1);
HXDLIN( 474)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 474)					int state = 1;
HXDLIN( 474)					int _g = 0;
HXDLIN( 474)					while((_g < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g);
HXDLIN( 474)						_g = (_g + 1);
HXDLIN( 474)						action->addKey(key,state);
            					}
            				}
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 474)					int state1 = 2;
HXDLIN( 474)					int _g1 = 0;
HXDLIN( 474)					while((_g1 < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g1);
HXDLIN( 474)						_g1 = (_g1 + 1);
HXDLIN( 474)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 474)					int state2 = -1;
HXDLIN( 474)					int _g2 = 0;
HXDLIN( 474)					while((_g2 < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g2);
HXDLIN( 474)						_g2 = (_g2 + 1);
HXDLIN( 474)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 474)					int state = 1;
HXDLIN( 474)					int _g = 0;
HXDLIN( 474)					while((_g < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g);
HXDLIN( 474)						_g = (_g + 1);
HXDLIN( 474)						action->addKey(key,state);
            					}
            				}
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 474)					int state1 = 2;
HXDLIN( 474)					int _g1 = 0;
HXDLIN( 474)					while((_g1 < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g1);
HXDLIN( 474)						_g1 = (_g1 + 1);
HXDLIN( 474)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 474)					int state2 = -1;
HXDLIN( 474)					int _g2 = 0;
HXDLIN( 474)					while((_g2 < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g2);
HXDLIN( 474)						_g2 = (_g2 + 1);
HXDLIN( 474)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 474)					int state = 1;
HXDLIN( 474)					int _g = 0;
HXDLIN( 474)					while((_g < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g);
HXDLIN( 474)						_g = (_g + 1);
HXDLIN( 474)						action->addKey(key,state);
            					}
            				}
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 474)					int state1 = 2;
HXDLIN( 474)					int _g1 = 0;
HXDLIN( 474)					while((_g1 < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g1);
HXDLIN( 474)						_g1 = (_g1 + 1);
HXDLIN( 474)						action1->addKey(key,state1);
            					}
            				}
HXDLIN( 474)				{
HXDLIN( 474)					 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 474)					int state2 = -1;
HXDLIN( 474)					int _g2 = 0;
HXDLIN( 474)					while((_g2 < keys->length)){
HXDLIN( 474)						int key = keys->__get(_g2);
HXDLIN( 474)						_g2 = (_g2 + 1);
HXDLIN( 474)						action2->addKey(key,state2);
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXDLIN( 474)				 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 474)				int state = 2;
HXDLIN( 474)				int _g = 0;
HXDLIN( 474)				while((_g < keys->length)){
HXDLIN( 474)					int key = keys->__get(_g);
HXDLIN( 474)					_g = (_g + 1);
HXDLIN( 474)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)5: {
HXDLIN( 474)				 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 474)				int state = 2;
HXDLIN( 474)				int _g = 0;
HXDLIN( 474)				while((_g < keys->length)){
HXDLIN( 474)					int key = keys->__get(_g);
HXDLIN( 474)					_g = (_g + 1);
HXDLIN( 474)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)6: {
HXDLIN( 474)				 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 474)				int state = 2;
HXDLIN( 474)				int _g = 0;
HXDLIN( 474)				while((_g < keys->length)){
HXDLIN( 474)					int key = keys->__get(_g);
HXDLIN( 474)					_g = (_g + 1);
HXDLIN( 474)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)7: {
HXDLIN( 474)				 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 474)				int state = 2;
HXDLIN( 474)				int _g = 0;
HXDLIN( 474)				while((_g < keys->length)){
HXDLIN( 474)					int key = keys->__get(_g);
HXDLIN( 474)					_g = (_g + 1);
HXDLIN( 474)					action->addKey(key,state);
            				}
            			}
            			break;
            			case (int)8: {
HXDLIN( 474)				 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 474)				int state = 2;
HXDLIN( 474)				int _g = 0;
HXDLIN( 474)				while((_g < keys->length)){
HXDLIN( 474)					int key = keys->__get(_g);
HXDLIN( 474)					_g = (_g + 1);
HXDLIN( 474)					action->addKey(key,state);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,bindKeys,(void))

void Controls_obj::unbindKeys( ::gameFolder::meta::Control control,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_487_unbindKeys)
HXDLIN( 487)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_up,keys);
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_upP,keys);
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_upR,keys);
            			}
            			break;
            			case (int)1: {
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_left,keys);
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_leftP,keys);
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_leftR,keys);
            			}
            			break;
            			case (int)2: {
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_right,keys);
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_rightP,keys);
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_rightR,keys);
            			}
            			break;
            			case (int)3: {
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_down,keys);
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_downP,keys);
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_downR,keys);
            			}
            			break;
            			case (int)4: {
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_reset,keys);
            			}
            			break;
            			case (int)5: {
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_accept,keys);
            			}
            			break;
            			case (int)6: {
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_back,keys);
            			}
            			break;
            			case (int)7: {
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_pause,keys);
            			}
            			break;
            			case (int)8: {
HXDLIN( 487)				::gameFolder::meta::Controls_obj::removeKeys(this->_cheat,keys);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,unbindKeys,(void))

void Controls_obj::setKeyboardScheme( ::gameFolder::meta::KeyboardScheme scheme,::hx::Null< bool >  __o_reset){
            		bool reset = __o_reset.Default(true);
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_511_setKeyboardScheme)
HXLINE( 512)		if (reset) {
HXLINE( 513)			this->removeKeyboard();
            		}
HXLINE( 515)		this->keyboardScheme = scheme;
HXLINE( 518)		switch((int)(scheme->_hx_getIndex())){
            			case (int)0: {
HXLINE( 521)				{
HXLINE( 521)					::Array< int > keys = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_460,2);
HXDLIN( 521)					switch((int)(::gameFolder::meta::Control_obj::UP_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 521)								int state = 1;
HXDLIN( 521)								int _g = 0;
HXDLIN( 521)								while((_g < keys->length)){
HXLINE( 521)									int key = keys->__get(_g);
HXDLIN( 521)									_g = (_g + 1);
HXDLIN( 521)									action->addKey(key,state);
            								}
            							}
HXDLIN( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 521)								int state1 = 2;
HXDLIN( 521)								int _g1 = 0;
HXDLIN( 521)								while((_g1 < keys->length)){
HXLINE( 521)									int key = keys->__get(_g1);
HXDLIN( 521)									_g1 = (_g1 + 1);
HXDLIN( 521)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 521)								int state2 = -1;
HXDLIN( 521)								int _g2 = 0;
HXDLIN( 521)								while((_g2 < keys->length)){
HXLINE( 521)									int key = keys->__get(_g2);
HXDLIN( 521)									_g2 = (_g2 + 1);
HXDLIN( 521)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 521)								int state = 1;
HXDLIN( 521)								int _g = 0;
HXDLIN( 521)								while((_g < keys->length)){
HXLINE( 521)									int key = keys->__get(_g);
HXDLIN( 521)									_g = (_g + 1);
HXDLIN( 521)									action->addKey(key,state);
            								}
            							}
HXDLIN( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 521)								int state1 = 2;
HXDLIN( 521)								int _g1 = 0;
HXDLIN( 521)								while((_g1 < keys->length)){
HXLINE( 521)									int key = keys->__get(_g1);
HXDLIN( 521)									_g1 = (_g1 + 1);
HXDLIN( 521)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 521)								int state2 = -1;
HXDLIN( 521)								int _g2 = 0;
HXDLIN( 521)								while((_g2 < keys->length)){
HXLINE( 521)									int key = keys->__get(_g2);
HXDLIN( 521)									_g2 = (_g2 + 1);
HXDLIN( 521)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 521)								int state = 1;
HXDLIN( 521)								int _g = 0;
HXDLIN( 521)								while((_g < keys->length)){
HXLINE( 521)									int key = keys->__get(_g);
HXDLIN( 521)									_g = (_g + 1);
HXDLIN( 521)									action->addKey(key,state);
            								}
            							}
HXDLIN( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 521)								int state1 = 2;
HXDLIN( 521)								int _g1 = 0;
HXDLIN( 521)								while((_g1 < keys->length)){
HXLINE( 521)									int key = keys->__get(_g1);
HXDLIN( 521)									_g1 = (_g1 + 1);
HXDLIN( 521)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 521)								int state2 = -1;
HXDLIN( 521)								int _g2 = 0;
HXDLIN( 521)								while((_g2 < keys->length)){
HXLINE( 521)									int key = keys->__get(_g2);
HXDLIN( 521)									_g2 = (_g2 + 1);
HXDLIN( 521)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 521)								int state = 1;
HXDLIN( 521)								int _g = 0;
HXDLIN( 521)								while((_g < keys->length)){
HXLINE( 521)									int key = keys->__get(_g);
HXDLIN( 521)									_g = (_g + 1);
HXDLIN( 521)									action->addKey(key,state);
            								}
            							}
HXDLIN( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 521)								int state1 = 2;
HXDLIN( 521)								int _g1 = 0;
HXDLIN( 521)								while((_g1 < keys->length)){
HXLINE( 521)									int key = keys->__get(_g1);
HXDLIN( 521)									_g1 = (_g1 + 1);
HXDLIN( 521)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 521)							{
HXLINE( 521)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 521)								int state2 = -1;
HXDLIN( 521)								int _g2 = 0;
HXDLIN( 521)								while((_g2 < keys->length)){
HXLINE( 521)									int key = keys->__get(_g2);
HXDLIN( 521)									_g2 = (_g2 + 1);
HXDLIN( 521)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 521)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 521)							int state = 2;
HXDLIN( 521)							int _g = 0;
HXDLIN( 521)							while((_g < keys->length)){
HXLINE( 521)								int key = keys->__get(_g);
HXDLIN( 521)								_g = (_g + 1);
HXDLIN( 521)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 521)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 521)							int state = 2;
HXDLIN( 521)							int _g = 0;
HXDLIN( 521)							while((_g < keys->length)){
HXLINE( 521)								int key = keys->__get(_g);
HXDLIN( 521)								_g = (_g + 1);
HXDLIN( 521)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 521)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 521)							int state = 2;
HXDLIN( 521)							int _g = 0;
HXDLIN( 521)							while((_g < keys->length)){
HXLINE( 521)								int key = keys->__get(_g);
HXDLIN( 521)								_g = (_g + 1);
HXDLIN( 521)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 521)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 521)							int state = 2;
HXDLIN( 521)							int _g = 0;
HXDLIN( 521)							while((_g < keys->length)){
HXLINE( 521)								int key = keys->__get(_g);
HXDLIN( 521)								_g = (_g + 1);
HXDLIN( 521)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 521)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 521)							int state = 2;
HXDLIN( 521)							int _g = 0;
HXDLIN( 521)							while((_g < keys->length)){
HXLINE( 521)								int key = keys->__get(_g);
HXDLIN( 521)								_g = (_g + 1);
HXDLIN( 521)								action->addKey(key,state);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 522)				{
HXLINE( 522)					::Array< int > keys1 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_461,2);
HXDLIN( 522)					switch((int)(::gameFolder::meta::Control_obj::DOWN_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 522)								int state = 1;
HXDLIN( 522)								int _g = 0;
HXDLIN( 522)								while((_g < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g);
HXDLIN( 522)									_g = (_g + 1);
HXDLIN( 522)									action->addKey(key,state);
            								}
            							}
HXDLIN( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 522)								int state1 = 2;
HXDLIN( 522)								int _g1 = 0;
HXDLIN( 522)								while((_g1 < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g1);
HXDLIN( 522)									_g1 = (_g1 + 1);
HXDLIN( 522)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 522)								int state2 = -1;
HXDLIN( 522)								int _g2 = 0;
HXDLIN( 522)								while((_g2 < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g2);
HXDLIN( 522)									_g2 = (_g2 + 1);
HXDLIN( 522)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 522)								int state = 1;
HXDLIN( 522)								int _g = 0;
HXDLIN( 522)								while((_g < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g);
HXDLIN( 522)									_g = (_g + 1);
HXDLIN( 522)									action->addKey(key,state);
            								}
            							}
HXDLIN( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 522)								int state1 = 2;
HXDLIN( 522)								int _g1 = 0;
HXDLIN( 522)								while((_g1 < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g1);
HXDLIN( 522)									_g1 = (_g1 + 1);
HXDLIN( 522)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 522)								int state2 = -1;
HXDLIN( 522)								int _g2 = 0;
HXDLIN( 522)								while((_g2 < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g2);
HXDLIN( 522)									_g2 = (_g2 + 1);
HXDLIN( 522)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 522)								int state = 1;
HXDLIN( 522)								int _g = 0;
HXDLIN( 522)								while((_g < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g);
HXDLIN( 522)									_g = (_g + 1);
HXDLIN( 522)									action->addKey(key,state);
            								}
            							}
HXDLIN( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 522)								int state1 = 2;
HXDLIN( 522)								int _g1 = 0;
HXDLIN( 522)								while((_g1 < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g1);
HXDLIN( 522)									_g1 = (_g1 + 1);
HXDLIN( 522)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 522)								int state2 = -1;
HXDLIN( 522)								int _g2 = 0;
HXDLIN( 522)								while((_g2 < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g2);
HXDLIN( 522)									_g2 = (_g2 + 1);
HXDLIN( 522)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 522)								int state = 1;
HXDLIN( 522)								int _g = 0;
HXDLIN( 522)								while((_g < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g);
HXDLIN( 522)									_g = (_g + 1);
HXDLIN( 522)									action->addKey(key,state);
            								}
            							}
HXDLIN( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 522)								int state1 = 2;
HXDLIN( 522)								int _g1 = 0;
HXDLIN( 522)								while((_g1 < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g1);
HXDLIN( 522)									_g1 = (_g1 + 1);
HXDLIN( 522)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 522)							{
HXLINE( 522)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 522)								int state2 = -1;
HXDLIN( 522)								int _g2 = 0;
HXDLIN( 522)								while((_g2 < keys1->length)){
HXLINE( 522)									int key = keys1->__get(_g2);
HXDLIN( 522)									_g2 = (_g2 + 1);
HXDLIN( 522)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 522)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 522)							int state = 2;
HXDLIN( 522)							int _g = 0;
HXDLIN( 522)							while((_g < keys1->length)){
HXLINE( 522)								int key = keys1->__get(_g);
HXDLIN( 522)								_g = (_g + 1);
HXDLIN( 522)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 522)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 522)							int state = 2;
HXDLIN( 522)							int _g = 0;
HXDLIN( 522)							while((_g < keys1->length)){
HXLINE( 522)								int key = keys1->__get(_g);
HXDLIN( 522)								_g = (_g + 1);
HXDLIN( 522)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 522)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 522)							int state = 2;
HXDLIN( 522)							int _g = 0;
HXDLIN( 522)							while((_g < keys1->length)){
HXLINE( 522)								int key = keys1->__get(_g);
HXDLIN( 522)								_g = (_g + 1);
HXDLIN( 522)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 522)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 522)							int state = 2;
HXDLIN( 522)							int _g = 0;
HXDLIN( 522)							while((_g < keys1->length)){
HXLINE( 522)								int key = keys1->__get(_g);
HXDLIN( 522)								_g = (_g + 1);
HXDLIN( 522)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 522)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 522)							int state = 2;
HXDLIN( 522)							int _g = 0;
HXDLIN( 522)							while((_g < keys1->length)){
HXLINE( 522)								int key = keys1->__get(_g);
HXDLIN( 522)								_g = (_g + 1);
HXDLIN( 522)								action->addKey(key,state);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 523)				{
HXLINE( 523)					::Array< int > keys2 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_462,2);
HXDLIN( 523)					switch((int)(::gameFolder::meta::Control_obj::LEFT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 523)								int state = 1;
HXDLIN( 523)								int _g = 0;
HXDLIN( 523)								while((_g < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g);
HXDLIN( 523)									_g = (_g + 1);
HXDLIN( 523)									action->addKey(key,state);
            								}
            							}
HXDLIN( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 523)								int state1 = 2;
HXDLIN( 523)								int _g1 = 0;
HXDLIN( 523)								while((_g1 < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g1);
HXDLIN( 523)									_g1 = (_g1 + 1);
HXDLIN( 523)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 523)								int state2 = -1;
HXDLIN( 523)								int _g2 = 0;
HXDLIN( 523)								while((_g2 < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g2);
HXDLIN( 523)									_g2 = (_g2 + 1);
HXDLIN( 523)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 523)								int state = 1;
HXDLIN( 523)								int _g = 0;
HXDLIN( 523)								while((_g < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g);
HXDLIN( 523)									_g = (_g + 1);
HXDLIN( 523)									action->addKey(key,state);
            								}
            							}
HXDLIN( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 523)								int state1 = 2;
HXDLIN( 523)								int _g1 = 0;
HXDLIN( 523)								while((_g1 < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g1);
HXDLIN( 523)									_g1 = (_g1 + 1);
HXDLIN( 523)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 523)								int state2 = -1;
HXDLIN( 523)								int _g2 = 0;
HXDLIN( 523)								while((_g2 < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g2);
HXDLIN( 523)									_g2 = (_g2 + 1);
HXDLIN( 523)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 523)								int state = 1;
HXDLIN( 523)								int _g = 0;
HXDLIN( 523)								while((_g < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g);
HXDLIN( 523)									_g = (_g + 1);
HXDLIN( 523)									action->addKey(key,state);
            								}
            							}
HXDLIN( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 523)								int state1 = 2;
HXDLIN( 523)								int _g1 = 0;
HXDLIN( 523)								while((_g1 < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g1);
HXDLIN( 523)									_g1 = (_g1 + 1);
HXDLIN( 523)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 523)								int state2 = -1;
HXDLIN( 523)								int _g2 = 0;
HXDLIN( 523)								while((_g2 < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g2);
HXDLIN( 523)									_g2 = (_g2 + 1);
HXDLIN( 523)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 523)								int state = 1;
HXDLIN( 523)								int _g = 0;
HXDLIN( 523)								while((_g < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g);
HXDLIN( 523)									_g = (_g + 1);
HXDLIN( 523)									action->addKey(key,state);
            								}
            							}
HXDLIN( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 523)								int state1 = 2;
HXDLIN( 523)								int _g1 = 0;
HXDLIN( 523)								while((_g1 < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g1);
HXDLIN( 523)									_g1 = (_g1 + 1);
HXDLIN( 523)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 523)							{
HXLINE( 523)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 523)								int state2 = -1;
HXDLIN( 523)								int _g2 = 0;
HXDLIN( 523)								while((_g2 < keys2->length)){
HXLINE( 523)									int key = keys2->__get(_g2);
HXDLIN( 523)									_g2 = (_g2 + 1);
HXDLIN( 523)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 523)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 523)							int state = 2;
HXDLIN( 523)							int _g = 0;
HXDLIN( 523)							while((_g < keys2->length)){
HXLINE( 523)								int key = keys2->__get(_g);
HXDLIN( 523)								_g = (_g + 1);
HXDLIN( 523)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 523)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 523)							int state = 2;
HXDLIN( 523)							int _g = 0;
HXDLIN( 523)							while((_g < keys2->length)){
HXLINE( 523)								int key = keys2->__get(_g);
HXDLIN( 523)								_g = (_g + 1);
HXDLIN( 523)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 523)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 523)							int state = 2;
HXDLIN( 523)							int _g = 0;
HXDLIN( 523)							while((_g < keys2->length)){
HXLINE( 523)								int key = keys2->__get(_g);
HXDLIN( 523)								_g = (_g + 1);
HXDLIN( 523)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 523)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 523)							int state = 2;
HXDLIN( 523)							int _g = 0;
HXDLIN( 523)							while((_g < keys2->length)){
HXLINE( 523)								int key = keys2->__get(_g);
HXDLIN( 523)								_g = (_g + 1);
HXDLIN( 523)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 523)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 523)							int state = 2;
HXDLIN( 523)							int _g = 0;
HXDLIN( 523)							while((_g < keys2->length)){
HXLINE( 523)								int key = keys2->__get(_g);
HXDLIN( 523)								_g = (_g + 1);
HXDLIN( 523)								action->addKey(key,state);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 524)				{
HXLINE( 524)					::Array< int > keys3 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_463,2);
HXDLIN( 524)					switch((int)(::gameFolder::meta::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 524)								int state = 1;
HXDLIN( 524)								int _g = 0;
HXDLIN( 524)								while((_g < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g);
HXDLIN( 524)									_g = (_g + 1);
HXDLIN( 524)									action->addKey(key,state);
            								}
            							}
HXDLIN( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 524)								int state1 = 2;
HXDLIN( 524)								int _g1 = 0;
HXDLIN( 524)								while((_g1 < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g1);
HXDLIN( 524)									_g1 = (_g1 + 1);
HXDLIN( 524)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 524)								int state2 = -1;
HXDLIN( 524)								int _g2 = 0;
HXDLIN( 524)								while((_g2 < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g2);
HXDLIN( 524)									_g2 = (_g2 + 1);
HXDLIN( 524)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 524)								int state = 1;
HXDLIN( 524)								int _g = 0;
HXDLIN( 524)								while((_g < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g);
HXDLIN( 524)									_g = (_g + 1);
HXDLIN( 524)									action->addKey(key,state);
            								}
            							}
HXDLIN( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 524)								int state1 = 2;
HXDLIN( 524)								int _g1 = 0;
HXDLIN( 524)								while((_g1 < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g1);
HXDLIN( 524)									_g1 = (_g1 + 1);
HXDLIN( 524)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 524)								int state2 = -1;
HXDLIN( 524)								int _g2 = 0;
HXDLIN( 524)								while((_g2 < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g2);
HXDLIN( 524)									_g2 = (_g2 + 1);
HXDLIN( 524)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 524)								int state = 1;
HXDLIN( 524)								int _g = 0;
HXDLIN( 524)								while((_g < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g);
HXDLIN( 524)									_g = (_g + 1);
HXDLIN( 524)									action->addKey(key,state);
            								}
            							}
HXDLIN( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 524)								int state1 = 2;
HXDLIN( 524)								int _g1 = 0;
HXDLIN( 524)								while((_g1 < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g1);
HXDLIN( 524)									_g1 = (_g1 + 1);
HXDLIN( 524)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 524)								int state2 = -1;
HXDLIN( 524)								int _g2 = 0;
HXDLIN( 524)								while((_g2 < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g2);
HXDLIN( 524)									_g2 = (_g2 + 1);
HXDLIN( 524)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 524)								int state = 1;
HXDLIN( 524)								int _g = 0;
HXDLIN( 524)								while((_g < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g);
HXDLIN( 524)									_g = (_g + 1);
HXDLIN( 524)									action->addKey(key,state);
            								}
            							}
HXDLIN( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 524)								int state1 = 2;
HXDLIN( 524)								int _g1 = 0;
HXDLIN( 524)								while((_g1 < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g1);
HXDLIN( 524)									_g1 = (_g1 + 1);
HXDLIN( 524)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 524)							{
HXLINE( 524)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 524)								int state2 = -1;
HXDLIN( 524)								int _g2 = 0;
HXDLIN( 524)								while((_g2 < keys3->length)){
HXLINE( 524)									int key = keys3->__get(_g2);
HXDLIN( 524)									_g2 = (_g2 + 1);
HXDLIN( 524)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 524)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 524)							int state = 2;
HXDLIN( 524)							int _g = 0;
HXDLIN( 524)							while((_g < keys3->length)){
HXLINE( 524)								int key = keys3->__get(_g);
HXDLIN( 524)								_g = (_g + 1);
HXDLIN( 524)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 524)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 524)							int state = 2;
HXDLIN( 524)							int _g = 0;
HXDLIN( 524)							while((_g < keys3->length)){
HXLINE( 524)								int key = keys3->__get(_g);
HXDLIN( 524)								_g = (_g + 1);
HXDLIN( 524)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 524)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 524)							int state = 2;
HXDLIN( 524)							int _g = 0;
HXDLIN( 524)							while((_g < keys3->length)){
HXLINE( 524)								int key = keys3->__get(_g);
HXDLIN( 524)								_g = (_g + 1);
HXDLIN( 524)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 524)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 524)							int state = 2;
HXDLIN( 524)							int _g = 0;
HXDLIN( 524)							while((_g < keys3->length)){
HXLINE( 524)								int key = keys3->__get(_g);
HXDLIN( 524)								_g = (_g + 1);
HXDLIN( 524)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 524)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 524)							int state = 2;
HXDLIN( 524)							int _g = 0;
HXDLIN( 524)							while((_g < keys3->length)){
HXLINE( 524)								int key = keys3->__get(_g);
HXDLIN( 524)								_g = (_g + 1);
HXDLIN( 524)								action->addKey(key,state);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 525)				{
HXLINE( 525)					::Array< int > keys4 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_464,3);
HXDLIN( 525)					switch((int)(::gameFolder::meta::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 525)								int state = 1;
HXDLIN( 525)								int _g = 0;
HXDLIN( 525)								while((_g < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g);
HXDLIN( 525)									_g = (_g + 1);
HXDLIN( 525)									action->addKey(key,state);
            								}
            							}
HXDLIN( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 525)								int state1 = 2;
HXDLIN( 525)								int _g1 = 0;
HXDLIN( 525)								while((_g1 < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g1);
HXDLIN( 525)									_g1 = (_g1 + 1);
HXDLIN( 525)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 525)								int state2 = -1;
HXDLIN( 525)								int _g2 = 0;
HXDLIN( 525)								while((_g2 < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g2);
HXDLIN( 525)									_g2 = (_g2 + 1);
HXDLIN( 525)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 525)								int state = 1;
HXDLIN( 525)								int _g = 0;
HXDLIN( 525)								while((_g < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g);
HXDLIN( 525)									_g = (_g + 1);
HXDLIN( 525)									action->addKey(key,state);
            								}
            							}
HXDLIN( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 525)								int state1 = 2;
HXDLIN( 525)								int _g1 = 0;
HXDLIN( 525)								while((_g1 < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g1);
HXDLIN( 525)									_g1 = (_g1 + 1);
HXDLIN( 525)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 525)								int state2 = -1;
HXDLIN( 525)								int _g2 = 0;
HXDLIN( 525)								while((_g2 < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g2);
HXDLIN( 525)									_g2 = (_g2 + 1);
HXDLIN( 525)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 525)								int state = 1;
HXDLIN( 525)								int _g = 0;
HXDLIN( 525)								while((_g < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g);
HXDLIN( 525)									_g = (_g + 1);
HXDLIN( 525)									action->addKey(key,state);
            								}
            							}
HXDLIN( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 525)								int state1 = 2;
HXDLIN( 525)								int _g1 = 0;
HXDLIN( 525)								while((_g1 < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g1);
HXDLIN( 525)									_g1 = (_g1 + 1);
HXDLIN( 525)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 525)								int state2 = -1;
HXDLIN( 525)								int _g2 = 0;
HXDLIN( 525)								while((_g2 < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g2);
HXDLIN( 525)									_g2 = (_g2 + 1);
HXDLIN( 525)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 525)								int state = 1;
HXDLIN( 525)								int _g = 0;
HXDLIN( 525)								while((_g < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g);
HXDLIN( 525)									_g = (_g + 1);
HXDLIN( 525)									action->addKey(key,state);
            								}
            							}
HXDLIN( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 525)								int state1 = 2;
HXDLIN( 525)								int _g1 = 0;
HXDLIN( 525)								while((_g1 < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g1);
HXDLIN( 525)									_g1 = (_g1 + 1);
HXDLIN( 525)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 525)							{
HXLINE( 525)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 525)								int state2 = -1;
HXDLIN( 525)								int _g2 = 0;
HXDLIN( 525)								while((_g2 < keys4->length)){
HXLINE( 525)									int key = keys4->__get(_g2);
HXDLIN( 525)									_g2 = (_g2 + 1);
HXDLIN( 525)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 525)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 525)							int state = 2;
HXDLIN( 525)							int _g = 0;
HXDLIN( 525)							while((_g < keys4->length)){
HXLINE( 525)								int key = keys4->__get(_g);
HXDLIN( 525)								_g = (_g + 1);
HXDLIN( 525)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 525)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 525)							int state = 2;
HXDLIN( 525)							int _g = 0;
HXDLIN( 525)							while((_g < keys4->length)){
HXLINE( 525)								int key = keys4->__get(_g);
HXDLIN( 525)								_g = (_g + 1);
HXDLIN( 525)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 525)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 525)							int state = 2;
HXDLIN( 525)							int _g = 0;
HXDLIN( 525)							while((_g < keys4->length)){
HXLINE( 525)								int key = keys4->__get(_g);
HXDLIN( 525)								_g = (_g + 1);
HXDLIN( 525)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 525)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 525)							int state = 2;
HXDLIN( 525)							int _g = 0;
HXDLIN( 525)							while((_g < keys4->length)){
HXLINE( 525)								int key = keys4->__get(_g);
HXDLIN( 525)								_g = (_g + 1);
HXDLIN( 525)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 525)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 525)							int state = 2;
HXDLIN( 525)							int _g = 0;
HXDLIN( 525)							while((_g < keys4->length)){
HXLINE( 525)								int key = keys4->__get(_g);
HXDLIN( 525)								_g = (_g + 1);
HXDLIN( 525)								action->addKey(key,state);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 526)				{
HXLINE( 526)					::Array< int > keys5 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_465,2);
HXDLIN( 526)					switch((int)(::gameFolder::meta::Control_obj::BACK_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 526)								int state = 1;
HXDLIN( 526)								int _g = 0;
HXDLIN( 526)								while((_g < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g);
HXDLIN( 526)									_g = (_g + 1);
HXDLIN( 526)									action->addKey(key,state);
            								}
            							}
HXDLIN( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 526)								int state1 = 2;
HXDLIN( 526)								int _g1 = 0;
HXDLIN( 526)								while((_g1 < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g1);
HXDLIN( 526)									_g1 = (_g1 + 1);
HXDLIN( 526)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 526)								int state2 = -1;
HXDLIN( 526)								int _g2 = 0;
HXDLIN( 526)								while((_g2 < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g2);
HXDLIN( 526)									_g2 = (_g2 + 1);
HXDLIN( 526)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 526)								int state = 1;
HXDLIN( 526)								int _g = 0;
HXDLIN( 526)								while((_g < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g);
HXDLIN( 526)									_g = (_g + 1);
HXDLIN( 526)									action->addKey(key,state);
            								}
            							}
HXDLIN( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 526)								int state1 = 2;
HXDLIN( 526)								int _g1 = 0;
HXDLIN( 526)								while((_g1 < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g1);
HXDLIN( 526)									_g1 = (_g1 + 1);
HXDLIN( 526)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 526)								int state2 = -1;
HXDLIN( 526)								int _g2 = 0;
HXDLIN( 526)								while((_g2 < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g2);
HXDLIN( 526)									_g2 = (_g2 + 1);
HXDLIN( 526)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 526)								int state = 1;
HXDLIN( 526)								int _g = 0;
HXDLIN( 526)								while((_g < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g);
HXDLIN( 526)									_g = (_g + 1);
HXDLIN( 526)									action->addKey(key,state);
            								}
            							}
HXDLIN( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 526)								int state1 = 2;
HXDLIN( 526)								int _g1 = 0;
HXDLIN( 526)								while((_g1 < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g1);
HXDLIN( 526)									_g1 = (_g1 + 1);
HXDLIN( 526)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 526)								int state2 = -1;
HXDLIN( 526)								int _g2 = 0;
HXDLIN( 526)								while((_g2 < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g2);
HXDLIN( 526)									_g2 = (_g2 + 1);
HXDLIN( 526)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 526)								int state = 1;
HXDLIN( 526)								int _g = 0;
HXDLIN( 526)								while((_g < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g);
HXDLIN( 526)									_g = (_g + 1);
HXDLIN( 526)									action->addKey(key,state);
            								}
            							}
HXDLIN( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 526)								int state1 = 2;
HXDLIN( 526)								int _g1 = 0;
HXDLIN( 526)								while((_g1 < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g1);
HXDLIN( 526)									_g1 = (_g1 + 1);
HXDLIN( 526)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 526)							{
HXLINE( 526)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 526)								int state2 = -1;
HXDLIN( 526)								int _g2 = 0;
HXDLIN( 526)								while((_g2 < keys5->length)){
HXLINE( 526)									int key = keys5->__get(_g2);
HXDLIN( 526)									_g2 = (_g2 + 1);
HXDLIN( 526)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 526)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 526)							int state = 2;
HXDLIN( 526)							int _g = 0;
HXDLIN( 526)							while((_g < keys5->length)){
HXLINE( 526)								int key = keys5->__get(_g);
HXDLIN( 526)								_g = (_g + 1);
HXDLIN( 526)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 526)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 526)							int state = 2;
HXDLIN( 526)							int _g = 0;
HXDLIN( 526)							while((_g < keys5->length)){
HXLINE( 526)								int key = keys5->__get(_g);
HXDLIN( 526)								_g = (_g + 1);
HXDLIN( 526)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 526)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 526)							int state = 2;
HXDLIN( 526)							int _g = 0;
HXDLIN( 526)							while((_g < keys5->length)){
HXLINE( 526)								int key = keys5->__get(_g);
HXDLIN( 526)								_g = (_g + 1);
HXDLIN( 526)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 526)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 526)							int state = 2;
HXDLIN( 526)							int _g = 0;
HXDLIN( 526)							while((_g < keys5->length)){
HXLINE( 526)								int key = keys5->__get(_g);
HXDLIN( 526)								_g = (_g + 1);
HXDLIN( 526)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 526)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 526)							int state = 2;
HXDLIN( 526)							int _g = 0;
HXDLIN( 526)							while((_g < keys5->length)){
HXLINE( 526)								int key = keys5->__get(_g);
HXDLIN( 526)								_g = (_g + 1);
HXDLIN( 526)								action->addKey(key,state);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 527)				{
HXLINE( 527)					::Array< int > keys6 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_466,3);
HXDLIN( 527)					switch((int)(::gameFolder::meta::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 527)								int state = 1;
HXDLIN( 527)								int _g = 0;
HXDLIN( 527)								while((_g < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g);
HXDLIN( 527)									_g = (_g + 1);
HXDLIN( 527)									action->addKey(key,state);
            								}
            							}
HXDLIN( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 527)								int state1 = 2;
HXDLIN( 527)								int _g1 = 0;
HXDLIN( 527)								while((_g1 < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g1);
HXDLIN( 527)									_g1 = (_g1 + 1);
HXDLIN( 527)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 527)								int state2 = -1;
HXDLIN( 527)								int _g2 = 0;
HXDLIN( 527)								while((_g2 < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g2);
HXDLIN( 527)									_g2 = (_g2 + 1);
HXDLIN( 527)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 527)								int state = 1;
HXDLIN( 527)								int _g = 0;
HXDLIN( 527)								while((_g < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g);
HXDLIN( 527)									_g = (_g + 1);
HXDLIN( 527)									action->addKey(key,state);
            								}
            							}
HXDLIN( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 527)								int state1 = 2;
HXDLIN( 527)								int _g1 = 0;
HXDLIN( 527)								while((_g1 < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g1);
HXDLIN( 527)									_g1 = (_g1 + 1);
HXDLIN( 527)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 527)								int state2 = -1;
HXDLIN( 527)								int _g2 = 0;
HXDLIN( 527)								while((_g2 < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g2);
HXDLIN( 527)									_g2 = (_g2 + 1);
HXDLIN( 527)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 527)								int state = 1;
HXDLIN( 527)								int _g = 0;
HXDLIN( 527)								while((_g < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g);
HXDLIN( 527)									_g = (_g + 1);
HXDLIN( 527)									action->addKey(key,state);
            								}
            							}
HXDLIN( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 527)								int state1 = 2;
HXDLIN( 527)								int _g1 = 0;
HXDLIN( 527)								while((_g1 < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g1);
HXDLIN( 527)									_g1 = (_g1 + 1);
HXDLIN( 527)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 527)								int state2 = -1;
HXDLIN( 527)								int _g2 = 0;
HXDLIN( 527)								while((_g2 < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g2);
HXDLIN( 527)									_g2 = (_g2 + 1);
HXDLIN( 527)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 527)								int state = 1;
HXDLIN( 527)								int _g = 0;
HXDLIN( 527)								while((_g < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g);
HXDLIN( 527)									_g = (_g + 1);
HXDLIN( 527)									action->addKey(key,state);
            								}
            							}
HXDLIN( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 527)								int state1 = 2;
HXDLIN( 527)								int _g1 = 0;
HXDLIN( 527)								while((_g1 < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g1);
HXDLIN( 527)									_g1 = (_g1 + 1);
HXDLIN( 527)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 527)							{
HXLINE( 527)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 527)								int state2 = -1;
HXDLIN( 527)								int _g2 = 0;
HXDLIN( 527)								while((_g2 < keys6->length)){
HXLINE( 527)									int key = keys6->__get(_g2);
HXDLIN( 527)									_g2 = (_g2 + 1);
HXDLIN( 527)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 527)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 527)							int state = 2;
HXDLIN( 527)							int _g = 0;
HXDLIN( 527)							while((_g < keys6->length)){
HXLINE( 527)								int key = keys6->__get(_g);
HXDLIN( 527)								_g = (_g + 1);
HXDLIN( 527)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 527)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 527)							int state = 2;
HXDLIN( 527)							int _g = 0;
HXDLIN( 527)							while((_g < keys6->length)){
HXLINE( 527)								int key = keys6->__get(_g);
HXDLIN( 527)								_g = (_g + 1);
HXDLIN( 527)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 527)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 527)							int state = 2;
HXDLIN( 527)							int _g = 0;
HXDLIN( 527)							while((_g < keys6->length)){
HXLINE( 527)								int key = keys6->__get(_g);
HXDLIN( 527)								_g = (_g + 1);
HXDLIN( 527)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 527)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 527)							int state = 2;
HXDLIN( 527)							int _g = 0;
HXDLIN( 527)							while((_g < keys6->length)){
HXLINE( 527)								int key = keys6->__get(_g);
HXDLIN( 527)								_g = (_g + 1);
HXDLIN( 527)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 527)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 527)							int state = 2;
HXDLIN( 527)							int _g = 0;
HXDLIN( 527)							while((_g < keys6->length)){
HXLINE( 527)								int key = keys6->__get(_g);
HXDLIN( 527)								_g = (_g + 1);
HXDLIN( 527)								action->addKey(key,state);
            							}
            						}
            						break;
            					}
            				}
HXLINE( 528)				{
HXLINE( 528)					::Array< int > keys7 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_467,1);
HXDLIN( 528)					switch((int)(::gameFolder::meta::Control_obj::RESET_dyn()->_hx_getIndex())){
            						case (int)0: {
HXLINE( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 528)								int state = 1;
HXDLIN( 528)								int _g = 0;
HXDLIN( 528)								while((_g < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g);
HXDLIN( 528)									_g = (_g + 1);
HXDLIN( 528)									action->addKey(key,state);
            								}
            							}
HXDLIN( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 528)								int state1 = 2;
HXDLIN( 528)								int _g1 = 0;
HXDLIN( 528)								while((_g1 < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g1);
HXDLIN( 528)									_g1 = (_g1 + 1);
HXDLIN( 528)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 528)								int state2 = -1;
HXDLIN( 528)								int _g2 = 0;
HXDLIN( 528)								while((_g2 < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g2);
HXDLIN( 528)									_g2 = (_g2 + 1);
HXDLIN( 528)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 528)								int state = 1;
HXDLIN( 528)								int _g = 0;
HXDLIN( 528)								while((_g < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g);
HXDLIN( 528)									_g = (_g + 1);
HXDLIN( 528)									action->addKey(key,state);
            								}
            							}
HXDLIN( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 528)								int state1 = 2;
HXDLIN( 528)								int _g1 = 0;
HXDLIN( 528)								while((_g1 < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g1);
HXDLIN( 528)									_g1 = (_g1 + 1);
HXDLIN( 528)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 528)								int state2 = -1;
HXDLIN( 528)								int _g2 = 0;
HXDLIN( 528)								while((_g2 < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g2);
HXDLIN( 528)									_g2 = (_g2 + 1);
HXDLIN( 528)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 528)								int state = 1;
HXDLIN( 528)								int _g = 0;
HXDLIN( 528)								while((_g < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g);
HXDLIN( 528)									_g = (_g + 1);
HXDLIN( 528)									action->addKey(key,state);
            								}
            							}
HXDLIN( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 528)								int state1 = 2;
HXDLIN( 528)								int _g1 = 0;
HXDLIN( 528)								while((_g1 < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g1);
HXDLIN( 528)									_g1 = (_g1 + 1);
HXDLIN( 528)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 528)								int state2 = -1;
HXDLIN( 528)								int _g2 = 0;
HXDLIN( 528)								while((_g2 < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g2);
HXDLIN( 528)									_g2 = (_g2 + 1);
HXDLIN( 528)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 528)								int state = 1;
HXDLIN( 528)								int _g = 0;
HXDLIN( 528)								while((_g < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g);
HXDLIN( 528)									_g = (_g + 1);
HXDLIN( 528)									action->addKey(key,state);
            								}
            							}
HXDLIN( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 528)								int state1 = 2;
HXDLIN( 528)								int _g1 = 0;
HXDLIN( 528)								while((_g1 < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g1);
HXDLIN( 528)									_g1 = (_g1 + 1);
HXDLIN( 528)									action1->addKey(key,state1);
            								}
            							}
HXDLIN( 528)							{
HXLINE( 528)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 528)								int state2 = -1;
HXDLIN( 528)								int _g2 = 0;
HXDLIN( 528)								while((_g2 < keys7->length)){
HXLINE( 528)									int key = keys7->__get(_g2);
HXDLIN( 528)									_g2 = (_g2 + 1);
HXDLIN( 528)									action2->addKey(key,state2);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 528)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 528)							int state = 2;
HXDLIN( 528)							int _g = 0;
HXDLIN( 528)							while((_g < keys7->length)){
HXLINE( 528)								int key = keys7->__get(_g);
HXDLIN( 528)								_g = (_g + 1);
HXDLIN( 528)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 528)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 528)							int state = 2;
HXDLIN( 528)							int _g = 0;
HXDLIN( 528)							while((_g < keys7->length)){
HXLINE( 528)								int key = keys7->__get(_g);
HXDLIN( 528)								_g = (_g + 1);
HXDLIN( 528)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 528)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 528)							int state = 2;
HXDLIN( 528)							int _g = 0;
HXDLIN( 528)							while((_g < keys7->length)){
HXLINE( 528)								int key = keys7->__get(_g);
HXDLIN( 528)								_g = (_g + 1);
HXDLIN( 528)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 528)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 528)							int state = 2;
HXDLIN( 528)							int _g = 0;
HXDLIN( 528)							while((_g < keys7->length)){
HXLINE( 528)								int key = keys7->__get(_g);
HXDLIN( 528)								_g = (_g + 1);
HXDLIN( 528)								action->addKey(key,state);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 528)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 528)							int state = 2;
HXDLIN( 528)							int _g = 0;
HXDLIN( 528)							while((_g < keys7->length)){
HXLINE( 528)								int key = keys7->__get(_g);
HXDLIN( 528)								_g = (_g + 1);
HXDLIN( 528)								action->addKey(key,state);
            							}
            						}
            						break;
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 538)				if (scheme->_hx_getBool(0)) {
HXLINE( 530)					{
HXLINE( 530)						::Array< int > keys = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_468,1);
HXDLIN( 530)						switch((int)(::gameFolder::meta::Control_obj::UP_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 530)									int state = 1;
HXDLIN( 530)									int _g = 0;
HXDLIN( 530)									while((_g < keys->length)){
HXLINE( 530)										int key = keys->__get(_g);
HXDLIN( 530)										_g = (_g + 1);
HXDLIN( 530)										action->addKey(key,state);
            									}
            								}
HXDLIN( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 530)									int state1 = 2;
HXDLIN( 530)									int _g1 = 0;
HXDLIN( 530)									while((_g1 < keys->length)){
HXLINE( 530)										int key = keys->__get(_g1);
HXDLIN( 530)										_g1 = (_g1 + 1);
HXDLIN( 530)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 530)									int state2 = -1;
HXDLIN( 530)									int _g2 = 0;
HXDLIN( 530)									while((_g2 < keys->length)){
HXLINE( 530)										int key = keys->__get(_g2);
HXDLIN( 530)										_g2 = (_g2 + 1);
HXDLIN( 530)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 530)									int state = 1;
HXDLIN( 530)									int _g = 0;
HXDLIN( 530)									while((_g < keys->length)){
HXLINE( 530)										int key = keys->__get(_g);
HXDLIN( 530)										_g = (_g + 1);
HXDLIN( 530)										action->addKey(key,state);
            									}
            								}
HXDLIN( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 530)									int state1 = 2;
HXDLIN( 530)									int _g1 = 0;
HXDLIN( 530)									while((_g1 < keys->length)){
HXLINE( 530)										int key = keys->__get(_g1);
HXDLIN( 530)										_g1 = (_g1 + 1);
HXDLIN( 530)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 530)									int state2 = -1;
HXDLIN( 530)									int _g2 = 0;
HXDLIN( 530)									while((_g2 < keys->length)){
HXLINE( 530)										int key = keys->__get(_g2);
HXDLIN( 530)										_g2 = (_g2 + 1);
HXDLIN( 530)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 530)									int state = 1;
HXDLIN( 530)									int _g = 0;
HXDLIN( 530)									while((_g < keys->length)){
HXLINE( 530)										int key = keys->__get(_g);
HXDLIN( 530)										_g = (_g + 1);
HXDLIN( 530)										action->addKey(key,state);
            									}
            								}
HXDLIN( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 530)									int state1 = 2;
HXDLIN( 530)									int _g1 = 0;
HXDLIN( 530)									while((_g1 < keys->length)){
HXLINE( 530)										int key = keys->__get(_g1);
HXDLIN( 530)										_g1 = (_g1 + 1);
HXDLIN( 530)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 530)									int state2 = -1;
HXDLIN( 530)									int _g2 = 0;
HXDLIN( 530)									while((_g2 < keys->length)){
HXLINE( 530)										int key = keys->__get(_g2);
HXDLIN( 530)										_g2 = (_g2 + 1);
HXDLIN( 530)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 530)									int state = 1;
HXDLIN( 530)									int _g = 0;
HXDLIN( 530)									while((_g < keys->length)){
HXLINE( 530)										int key = keys->__get(_g);
HXDLIN( 530)										_g = (_g + 1);
HXDLIN( 530)										action->addKey(key,state);
            									}
            								}
HXDLIN( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 530)									int state1 = 2;
HXDLIN( 530)									int _g1 = 0;
HXDLIN( 530)									while((_g1 < keys->length)){
HXLINE( 530)										int key = keys->__get(_g1);
HXDLIN( 530)										_g1 = (_g1 + 1);
HXDLIN( 530)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 530)								{
HXLINE( 530)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 530)									int state2 = -1;
HXDLIN( 530)									int _g2 = 0;
HXDLIN( 530)									while((_g2 < keys->length)){
HXLINE( 530)										int key = keys->__get(_g2);
HXDLIN( 530)										_g2 = (_g2 + 1);
HXDLIN( 530)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 530)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 530)								int state = 2;
HXDLIN( 530)								int _g = 0;
HXDLIN( 530)								while((_g < keys->length)){
HXLINE( 530)									int key = keys->__get(_g);
HXDLIN( 530)									_g = (_g + 1);
HXDLIN( 530)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 530)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 530)								int state = 2;
HXDLIN( 530)								int _g = 0;
HXDLIN( 530)								while((_g < keys->length)){
HXLINE( 530)									int key = keys->__get(_g);
HXDLIN( 530)									_g = (_g + 1);
HXDLIN( 530)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 530)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 530)								int state = 2;
HXDLIN( 530)								int _g = 0;
HXDLIN( 530)								while((_g < keys->length)){
HXLINE( 530)									int key = keys->__get(_g);
HXDLIN( 530)									_g = (_g + 1);
HXDLIN( 530)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 530)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 530)								int state = 2;
HXDLIN( 530)								int _g = 0;
HXDLIN( 530)								while((_g < keys->length)){
HXLINE( 530)									int key = keys->__get(_g);
HXDLIN( 530)									_g = (_g + 1);
HXDLIN( 530)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 530)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 530)								int state = 2;
HXDLIN( 530)								int _g = 0;
HXDLIN( 530)								while((_g < keys->length)){
HXLINE( 530)									int key = keys->__get(_g);
HXDLIN( 530)									_g = (_g + 1);
HXDLIN( 530)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 531)					{
HXLINE( 531)						::Array< int > keys1 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_469,1);
HXDLIN( 531)						switch((int)(::gameFolder::meta::Control_obj::DOWN_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 531)									int state = 1;
HXDLIN( 531)									int _g = 0;
HXDLIN( 531)									while((_g < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g);
HXDLIN( 531)										_g = (_g + 1);
HXDLIN( 531)										action->addKey(key,state);
            									}
            								}
HXDLIN( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 531)									int state1 = 2;
HXDLIN( 531)									int _g1 = 0;
HXDLIN( 531)									while((_g1 < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g1);
HXDLIN( 531)										_g1 = (_g1 + 1);
HXDLIN( 531)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 531)									int state2 = -1;
HXDLIN( 531)									int _g2 = 0;
HXDLIN( 531)									while((_g2 < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g2);
HXDLIN( 531)										_g2 = (_g2 + 1);
HXDLIN( 531)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 531)									int state = 1;
HXDLIN( 531)									int _g = 0;
HXDLIN( 531)									while((_g < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g);
HXDLIN( 531)										_g = (_g + 1);
HXDLIN( 531)										action->addKey(key,state);
            									}
            								}
HXDLIN( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 531)									int state1 = 2;
HXDLIN( 531)									int _g1 = 0;
HXDLIN( 531)									while((_g1 < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g1);
HXDLIN( 531)										_g1 = (_g1 + 1);
HXDLIN( 531)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 531)									int state2 = -1;
HXDLIN( 531)									int _g2 = 0;
HXDLIN( 531)									while((_g2 < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g2);
HXDLIN( 531)										_g2 = (_g2 + 1);
HXDLIN( 531)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 531)									int state = 1;
HXDLIN( 531)									int _g = 0;
HXDLIN( 531)									while((_g < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g);
HXDLIN( 531)										_g = (_g + 1);
HXDLIN( 531)										action->addKey(key,state);
            									}
            								}
HXDLIN( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 531)									int state1 = 2;
HXDLIN( 531)									int _g1 = 0;
HXDLIN( 531)									while((_g1 < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g1);
HXDLIN( 531)										_g1 = (_g1 + 1);
HXDLIN( 531)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 531)									int state2 = -1;
HXDLIN( 531)									int _g2 = 0;
HXDLIN( 531)									while((_g2 < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g2);
HXDLIN( 531)										_g2 = (_g2 + 1);
HXDLIN( 531)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 531)									int state = 1;
HXDLIN( 531)									int _g = 0;
HXDLIN( 531)									while((_g < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g);
HXDLIN( 531)										_g = (_g + 1);
HXDLIN( 531)										action->addKey(key,state);
            									}
            								}
HXDLIN( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 531)									int state1 = 2;
HXDLIN( 531)									int _g1 = 0;
HXDLIN( 531)									while((_g1 < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g1);
HXDLIN( 531)										_g1 = (_g1 + 1);
HXDLIN( 531)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 531)								{
HXLINE( 531)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 531)									int state2 = -1;
HXDLIN( 531)									int _g2 = 0;
HXDLIN( 531)									while((_g2 < keys1->length)){
HXLINE( 531)										int key = keys1->__get(_g2);
HXDLIN( 531)										_g2 = (_g2 + 1);
HXDLIN( 531)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 531)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 531)								int state = 2;
HXDLIN( 531)								int _g = 0;
HXDLIN( 531)								while((_g < keys1->length)){
HXLINE( 531)									int key = keys1->__get(_g);
HXDLIN( 531)									_g = (_g + 1);
HXDLIN( 531)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 531)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 531)								int state = 2;
HXDLIN( 531)								int _g = 0;
HXDLIN( 531)								while((_g < keys1->length)){
HXLINE( 531)									int key = keys1->__get(_g);
HXDLIN( 531)									_g = (_g + 1);
HXDLIN( 531)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 531)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 531)								int state = 2;
HXDLIN( 531)								int _g = 0;
HXDLIN( 531)								while((_g < keys1->length)){
HXLINE( 531)									int key = keys1->__get(_g);
HXDLIN( 531)									_g = (_g + 1);
HXDLIN( 531)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 531)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 531)								int state = 2;
HXDLIN( 531)								int _g = 0;
HXDLIN( 531)								while((_g < keys1->length)){
HXLINE( 531)									int key = keys1->__get(_g);
HXDLIN( 531)									_g = (_g + 1);
HXDLIN( 531)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 531)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 531)								int state = 2;
HXDLIN( 531)								int _g = 0;
HXDLIN( 531)								while((_g < keys1->length)){
HXLINE( 531)									int key = keys1->__get(_g);
HXDLIN( 531)									_g = (_g + 1);
HXDLIN( 531)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 532)					{
HXLINE( 532)						::Array< int > keys2 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_470,1);
HXDLIN( 532)						switch((int)(::gameFolder::meta::Control_obj::LEFT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 532)									int state = 1;
HXDLIN( 532)									int _g = 0;
HXDLIN( 532)									while((_g < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g);
HXDLIN( 532)										_g = (_g + 1);
HXDLIN( 532)										action->addKey(key,state);
            									}
            								}
HXDLIN( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 532)									int state1 = 2;
HXDLIN( 532)									int _g1 = 0;
HXDLIN( 532)									while((_g1 < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g1);
HXDLIN( 532)										_g1 = (_g1 + 1);
HXDLIN( 532)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 532)									int state2 = -1;
HXDLIN( 532)									int _g2 = 0;
HXDLIN( 532)									while((_g2 < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g2);
HXDLIN( 532)										_g2 = (_g2 + 1);
HXDLIN( 532)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 532)									int state = 1;
HXDLIN( 532)									int _g = 0;
HXDLIN( 532)									while((_g < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g);
HXDLIN( 532)										_g = (_g + 1);
HXDLIN( 532)										action->addKey(key,state);
            									}
            								}
HXDLIN( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 532)									int state1 = 2;
HXDLIN( 532)									int _g1 = 0;
HXDLIN( 532)									while((_g1 < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g1);
HXDLIN( 532)										_g1 = (_g1 + 1);
HXDLIN( 532)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 532)									int state2 = -1;
HXDLIN( 532)									int _g2 = 0;
HXDLIN( 532)									while((_g2 < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g2);
HXDLIN( 532)										_g2 = (_g2 + 1);
HXDLIN( 532)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 532)									int state = 1;
HXDLIN( 532)									int _g = 0;
HXDLIN( 532)									while((_g < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g);
HXDLIN( 532)										_g = (_g + 1);
HXDLIN( 532)										action->addKey(key,state);
            									}
            								}
HXDLIN( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 532)									int state1 = 2;
HXDLIN( 532)									int _g1 = 0;
HXDLIN( 532)									while((_g1 < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g1);
HXDLIN( 532)										_g1 = (_g1 + 1);
HXDLIN( 532)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 532)									int state2 = -1;
HXDLIN( 532)									int _g2 = 0;
HXDLIN( 532)									while((_g2 < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g2);
HXDLIN( 532)										_g2 = (_g2 + 1);
HXDLIN( 532)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 532)									int state = 1;
HXDLIN( 532)									int _g = 0;
HXDLIN( 532)									while((_g < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g);
HXDLIN( 532)										_g = (_g + 1);
HXDLIN( 532)										action->addKey(key,state);
            									}
            								}
HXDLIN( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 532)									int state1 = 2;
HXDLIN( 532)									int _g1 = 0;
HXDLIN( 532)									while((_g1 < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g1);
HXDLIN( 532)										_g1 = (_g1 + 1);
HXDLIN( 532)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 532)								{
HXLINE( 532)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 532)									int state2 = -1;
HXDLIN( 532)									int _g2 = 0;
HXDLIN( 532)									while((_g2 < keys2->length)){
HXLINE( 532)										int key = keys2->__get(_g2);
HXDLIN( 532)										_g2 = (_g2 + 1);
HXDLIN( 532)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 532)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 532)								int state = 2;
HXDLIN( 532)								int _g = 0;
HXDLIN( 532)								while((_g < keys2->length)){
HXLINE( 532)									int key = keys2->__get(_g);
HXDLIN( 532)									_g = (_g + 1);
HXDLIN( 532)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 532)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 532)								int state = 2;
HXDLIN( 532)								int _g = 0;
HXDLIN( 532)								while((_g < keys2->length)){
HXLINE( 532)									int key = keys2->__get(_g);
HXDLIN( 532)									_g = (_g + 1);
HXDLIN( 532)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 532)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 532)								int state = 2;
HXDLIN( 532)								int _g = 0;
HXDLIN( 532)								while((_g < keys2->length)){
HXLINE( 532)									int key = keys2->__get(_g);
HXDLIN( 532)									_g = (_g + 1);
HXDLIN( 532)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 532)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 532)								int state = 2;
HXDLIN( 532)								int _g = 0;
HXDLIN( 532)								while((_g < keys2->length)){
HXLINE( 532)									int key = keys2->__get(_g);
HXDLIN( 532)									_g = (_g + 1);
HXDLIN( 532)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 532)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 532)								int state = 2;
HXDLIN( 532)								int _g = 0;
HXDLIN( 532)								while((_g < keys2->length)){
HXLINE( 532)									int key = keys2->__get(_g);
HXDLIN( 532)									_g = (_g + 1);
HXDLIN( 532)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 533)					{
HXLINE( 533)						::Array< int > keys3 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_471,1);
HXDLIN( 533)						switch((int)(::gameFolder::meta::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 533)									int state = 1;
HXDLIN( 533)									int _g = 0;
HXDLIN( 533)									while((_g < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g);
HXDLIN( 533)										_g = (_g + 1);
HXDLIN( 533)										action->addKey(key,state);
            									}
            								}
HXDLIN( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 533)									int state1 = 2;
HXDLIN( 533)									int _g1 = 0;
HXDLIN( 533)									while((_g1 < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g1);
HXDLIN( 533)										_g1 = (_g1 + 1);
HXDLIN( 533)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 533)									int state2 = -1;
HXDLIN( 533)									int _g2 = 0;
HXDLIN( 533)									while((_g2 < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g2);
HXDLIN( 533)										_g2 = (_g2 + 1);
HXDLIN( 533)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 533)									int state = 1;
HXDLIN( 533)									int _g = 0;
HXDLIN( 533)									while((_g < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g);
HXDLIN( 533)										_g = (_g + 1);
HXDLIN( 533)										action->addKey(key,state);
            									}
            								}
HXDLIN( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 533)									int state1 = 2;
HXDLIN( 533)									int _g1 = 0;
HXDLIN( 533)									while((_g1 < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g1);
HXDLIN( 533)										_g1 = (_g1 + 1);
HXDLIN( 533)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 533)									int state2 = -1;
HXDLIN( 533)									int _g2 = 0;
HXDLIN( 533)									while((_g2 < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g2);
HXDLIN( 533)										_g2 = (_g2 + 1);
HXDLIN( 533)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 533)									int state = 1;
HXDLIN( 533)									int _g = 0;
HXDLIN( 533)									while((_g < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g);
HXDLIN( 533)										_g = (_g + 1);
HXDLIN( 533)										action->addKey(key,state);
            									}
            								}
HXDLIN( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 533)									int state1 = 2;
HXDLIN( 533)									int _g1 = 0;
HXDLIN( 533)									while((_g1 < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g1);
HXDLIN( 533)										_g1 = (_g1 + 1);
HXDLIN( 533)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 533)									int state2 = -1;
HXDLIN( 533)									int _g2 = 0;
HXDLIN( 533)									while((_g2 < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g2);
HXDLIN( 533)										_g2 = (_g2 + 1);
HXDLIN( 533)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 533)									int state = 1;
HXDLIN( 533)									int _g = 0;
HXDLIN( 533)									while((_g < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g);
HXDLIN( 533)										_g = (_g + 1);
HXDLIN( 533)										action->addKey(key,state);
            									}
            								}
HXDLIN( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 533)									int state1 = 2;
HXDLIN( 533)									int _g1 = 0;
HXDLIN( 533)									while((_g1 < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g1);
HXDLIN( 533)										_g1 = (_g1 + 1);
HXDLIN( 533)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 533)								{
HXLINE( 533)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 533)									int state2 = -1;
HXDLIN( 533)									int _g2 = 0;
HXDLIN( 533)									while((_g2 < keys3->length)){
HXLINE( 533)										int key = keys3->__get(_g2);
HXDLIN( 533)										_g2 = (_g2 + 1);
HXDLIN( 533)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 533)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 533)								int state = 2;
HXDLIN( 533)								int _g = 0;
HXDLIN( 533)								while((_g < keys3->length)){
HXLINE( 533)									int key = keys3->__get(_g);
HXDLIN( 533)									_g = (_g + 1);
HXDLIN( 533)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 533)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 533)								int state = 2;
HXDLIN( 533)								int _g = 0;
HXDLIN( 533)								while((_g < keys3->length)){
HXLINE( 533)									int key = keys3->__get(_g);
HXDLIN( 533)									_g = (_g + 1);
HXDLIN( 533)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 533)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 533)								int state = 2;
HXDLIN( 533)								int _g = 0;
HXDLIN( 533)								while((_g < keys3->length)){
HXLINE( 533)									int key = keys3->__get(_g);
HXDLIN( 533)									_g = (_g + 1);
HXDLIN( 533)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 533)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 533)								int state = 2;
HXDLIN( 533)								int _g = 0;
HXDLIN( 533)								while((_g < keys3->length)){
HXLINE( 533)									int key = keys3->__get(_g);
HXDLIN( 533)									_g = (_g + 1);
HXDLIN( 533)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 533)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 533)								int state = 2;
HXDLIN( 533)								int _g = 0;
HXDLIN( 533)								while((_g < keys3->length)){
HXLINE( 533)									int key = keys3->__get(_g);
HXDLIN( 533)									_g = (_g + 1);
HXDLIN( 533)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 534)					{
HXLINE( 534)						::Array< int > keys4 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_472,2);
HXDLIN( 534)						switch((int)(::gameFolder::meta::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 534)									int state = 1;
HXDLIN( 534)									int _g = 0;
HXDLIN( 534)									while((_g < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g);
HXDLIN( 534)										_g = (_g + 1);
HXDLIN( 534)										action->addKey(key,state);
            									}
            								}
HXDLIN( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 534)									int state1 = 2;
HXDLIN( 534)									int _g1 = 0;
HXDLIN( 534)									while((_g1 < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g1);
HXDLIN( 534)										_g1 = (_g1 + 1);
HXDLIN( 534)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 534)									int state2 = -1;
HXDLIN( 534)									int _g2 = 0;
HXDLIN( 534)									while((_g2 < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g2);
HXDLIN( 534)										_g2 = (_g2 + 1);
HXDLIN( 534)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 534)									int state = 1;
HXDLIN( 534)									int _g = 0;
HXDLIN( 534)									while((_g < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g);
HXDLIN( 534)										_g = (_g + 1);
HXDLIN( 534)										action->addKey(key,state);
            									}
            								}
HXDLIN( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 534)									int state1 = 2;
HXDLIN( 534)									int _g1 = 0;
HXDLIN( 534)									while((_g1 < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g1);
HXDLIN( 534)										_g1 = (_g1 + 1);
HXDLIN( 534)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 534)									int state2 = -1;
HXDLIN( 534)									int _g2 = 0;
HXDLIN( 534)									while((_g2 < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g2);
HXDLIN( 534)										_g2 = (_g2 + 1);
HXDLIN( 534)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 534)									int state = 1;
HXDLIN( 534)									int _g = 0;
HXDLIN( 534)									while((_g < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g);
HXDLIN( 534)										_g = (_g + 1);
HXDLIN( 534)										action->addKey(key,state);
            									}
            								}
HXDLIN( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 534)									int state1 = 2;
HXDLIN( 534)									int _g1 = 0;
HXDLIN( 534)									while((_g1 < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g1);
HXDLIN( 534)										_g1 = (_g1 + 1);
HXDLIN( 534)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 534)									int state2 = -1;
HXDLIN( 534)									int _g2 = 0;
HXDLIN( 534)									while((_g2 < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g2);
HXDLIN( 534)										_g2 = (_g2 + 1);
HXDLIN( 534)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 534)									int state = 1;
HXDLIN( 534)									int _g = 0;
HXDLIN( 534)									while((_g < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g);
HXDLIN( 534)										_g = (_g + 1);
HXDLIN( 534)										action->addKey(key,state);
            									}
            								}
HXDLIN( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 534)									int state1 = 2;
HXDLIN( 534)									int _g1 = 0;
HXDLIN( 534)									while((_g1 < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g1);
HXDLIN( 534)										_g1 = (_g1 + 1);
HXDLIN( 534)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 534)								{
HXLINE( 534)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 534)									int state2 = -1;
HXDLIN( 534)									int _g2 = 0;
HXDLIN( 534)									while((_g2 < keys4->length)){
HXLINE( 534)										int key = keys4->__get(_g2);
HXDLIN( 534)										_g2 = (_g2 + 1);
HXDLIN( 534)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 534)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 534)								int state = 2;
HXDLIN( 534)								int _g = 0;
HXDLIN( 534)								while((_g < keys4->length)){
HXLINE( 534)									int key = keys4->__get(_g);
HXDLIN( 534)									_g = (_g + 1);
HXDLIN( 534)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 534)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 534)								int state = 2;
HXDLIN( 534)								int _g = 0;
HXDLIN( 534)								while((_g < keys4->length)){
HXLINE( 534)									int key = keys4->__get(_g);
HXDLIN( 534)									_g = (_g + 1);
HXDLIN( 534)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 534)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 534)								int state = 2;
HXDLIN( 534)								int _g = 0;
HXDLIN( 534)								while((_g < keys4->length)){
HXLINE( 534)									int key = keys4->__get(_g);
HXDLIN( 534)									_g = (_g + 1);
HXDLIN( 534)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 534)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 534)								int state = 2;
HXDLIN( 534)								int _g = 0;
HXDLIN( 534)								while((_g < keys4->length)){
HXLINE( 534)									int key = keys4->__get(_g);
HXDLIN( 534)									_g = (_g + 1);
HXDLIN( 534)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 534)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 534)								int state = 2;
HXDLIN( 534)								int _g = 0;
HXDLIN( 534)								while((_g < keys4->length)){
HXLINE( 534)									int key = keys4->__get(_g);
HXDLIN( 534)									_g = (_g + 1);
HXDLIN( 534)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 535)					{
HXLINE( 535)						::Array< int > keys5 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_473,2);
HXDLIN( 535)						switch((int)(::gameFolder::meta::Control_obj::BACK_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 535)									int state = 1;
HXDLIN( 535)									int _g = 0;
HXDLIN( 535)									while((_g < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g);
HXDLIN( 535)										_g = (_g + 1);
HXDLIN( 535)										action->addKey(key,state);
            									}
            								}
HXDLIN( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 535)									int state1 = 2;
HXDLIN( 535)									int _g1 = 0;
HXDLIN( 535)									while((_g1 < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g1);
HXDLIN( 535)										_g1 = (_g1 + 1);
HXDLIN( 535)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 535)									int state2 = -1;
HXDLIN( 535)									int _g2 = 0;
HXDLIN( 535)									while((_g2 < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g2);
HXDLIN( 535)										_g2 = (_g2 + 1);
HXDLIN( 535)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 535)									int state = 1;
HXDLIN( 535)									int _g = 0;
HXDLIN( 535)									while((_g < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g);
HXDLIN( 535)										_g = (_g + 1);
HXDLIN( 535)										action->addKey(key,state);
            									}
            								}
HXDLIN( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 535)									int state1 = 2;
HXDLIN( 535)									int _g1 = 0;
HXDLIN( 535)									while((_g1 < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g1);
HXDLIN( 535)										_g1 = (_g1 + 1);
HXDLIN( 535)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 535)									int state2 = -1;
HXDLIN( 535)									int _g2 = 0;
HXDLIN( 535)									while((_g2 < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g2);
HXDLIN( 535)										_g2 = (_g2 + 1);
HXDLIN( 535)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 535)									int state = 1;
HXDLIN( 535)									int _g = 0;
HXDLIN( 535)									while((_g < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g);
HXDLIN( 535)										_g = (_g + 1);
HXDLIN( 535)										action->addKey(key,state);
            									}
            								}
HXDLIN( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 535)									int state1 = 2;
HXDLIN( 535)									int _g1 = 0;
HXDLIN( 535)									while((_g1 < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g1);
HXDLIN( 535)										_g1 = (_g1 + 1);
HXDLIN( 535)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 535)									int state2 = -1;
HXDLIN( 535)									int _g2 = 0;
HXDLIN( 535)									while((_g2 < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g2);
HXDLIN( 535)										_g2 = (_g2 + 1);
HXDLIN( 535)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 535)									int state = 1;
HXDLIN( 535)									int _g = 0;
HXDLIN( 535)									while((_g < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g);
HXDLIN( 535)										_g = (_g + 1);
HXDLIN( 535)										action->addKey(key,state);
            									}
            								}
HXDLIN( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 535)									int state1 = 2;
HXDLIN( 535)									int _g1 = 0;
HXDLIN( 535)									while((_g1 < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g1);
HXDLIN( 535)										_g1 = (_g1 + 1);
HXDLIN( 535)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 535)								{
HXLINE( 535)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 535)									int state2 = -1;
HXDLIN( 535)									int _g2 = 0;
HXDLIN( 535)									while((_g2 < keys5->length)){
HXLINE( 535)										int key = keys5->__get(_g2);
HXDLIN( 535)										_g2 = (_g2 + 1);
HXDLIN( 535)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 535)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 535)								int state = 2;
HXDLIN( 535)								int _g = 0;
HXDLIN( 535)								while((_g < keys5->length)){
HXLINE( 535)									int key = keys5->__get(_g);
HXDLIN( 535)									_g = (_g + 1);
HXDLIN( 535)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 535)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 535)								int state = 2;
HXDLIN( 535)								int _g = 0;
HXDLIN( 535)								while((_g < keys5->length)){
HXLINE( 535)									int key = keys5->__get(_g);
HXDLIN( 535)									_g = (_g + 1);
HXDLIN( 535)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 535)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 535)								int state = 2;
HXDLIN( 535)								int _g = 0;
HXDLIN( 535)								while((_g < keys5->length)){
HXLINE( 535)									int key = keys5->__get(_g);
HXDLIN( 535)									_g = (_g + 1);
HXDLIN( 535)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 535)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 535)								int state = 2;
HXDLIN( 535)								int _g = 0;
HXDLIN( 535)								while((_g < keys5->length)){
HXLINE( 535)									int key = keys5->__get(_g);
HXDLIN( 535)									_g = (_g + 1);
HXDLIN( 535)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 535)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 535)								int state = 2;
HXDLIN( 535)								int _g = 0;
HXDLIN( 535)								while((_g < keys5->length)){
HXLINE( 535)									int key = keys5->__get(_g);
HXDLIN( 535)									_g = (_g + 1);
HXDLIN( 535)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 536)					{
HXLINE( 536)						::Array< int > keys6 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_474,1);
HXDLIN( 536)						switch((int)(::gameFolder::meta::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 536)									int state = 1;
HXDLIN( 536)									int _g = 0;
HXDLIN( 536)									while((_g < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g);
HXDLIN( 536)										_g = (_g + 1);
HXDLIN( 536)										action->addKey(key,state);
            									}
            								}
HXDLIN( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 536)									int state1 = 2;
HXDLIN( 536)									int _g1 = 0;
HXDLIN( 536)									while((_g1 < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g1);
HXDLIN( 536)										_g1 = (_g1 + 1);
HXDLIN( 536)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 536)									int state2 = -1;
HXDLIN( 536)									int _g2 = 0;
HXDLIN( 536)									while((_g2 < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g2);
HXDLIN( 536)										_g2 = (_g2 + 1);
HXDLIN( 536)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 536)									int state = 1;
HXDLIN( 536)									int _g = 0;
HXDLIN( 536)									while((_g < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g);
HXDLIN( 536)										_g = (_g + 1);
HXDLIN( 536)										action->addKey(key,state);
            									}
            								}
HXDLIN( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 536)									int state1 = 2;
HXDLIN( 536)									int _g1 = 0;
HXDLIN( 536)									while((_g1 < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g1);
HXDLIN( 536)										_g1 = (_g1 + 1);
HXDLIN( 536)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 536)									int state2 = -1;
HXDLIN( 536)									int _g2 = 0;
HXDLIN( 536)									while((_g2 < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g2);
HXDLIN( 536)										_g2 = (_g2 + 1);
HXDLIN( 536)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 536)									int state = 1;
HXDLIN( 536)									int _g = 0;
HXDLIN( 536)									while((_g < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g);
HXDLIN( 536)										_g = (_g + 1);
HXDLIN( 536)										action->addKey(key,state);
            									}
            								}
HXDLIN( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 536)									int state1 = 2;
HXDLIN( 536)									int _g1 = 0;
HXDLIN( 536)									while((_g1 < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g1);
HXDLIN( 536)										_g1 = (_g1 + 1);
HXDLIN( 536)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 536)									int state2 = -1;
HXDLIN( 536)									int _g2 = 0;
HXDLIN( 536)									while((_g2 < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g2);
HXDLIN( 536)										_g2 = (_g2 + 1);
HXDLIN( 536)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 536)									int state = 1;
HXDLIN( 536)									int _g = 0;
HXDLIN( 536)									while((_g < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g);
HXDLIN( 536)										_g = (_g + 1);
HXDLIN( 536)										action->addKey(key,state);
            									}
            								}
HXDLIN( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 536)									int state1 = 2;
HXDLIN( 536)									int _g1 = 0;
HXDLIN( 536)									while((_g1 < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g1);
HXDLIN( 536)										_g1 = (_g1 + 1);
HXDLIN( 536)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 536)								{
HXLINE( 536)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 536)									int state2 = -1;
HXDLIN( 536)									int _g2 = 0;
HXDLIN( 536)									while((_g2 < keys6->length)){
HXLINE( 536)										int key = keys6->__get(_g2);
HXDLIN( 536)										_g2 = (_g2 + 1);
HXDLIN( 536)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 536)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 536)								int state = 2;
HXDLIN( 536)								int _g = 0;
HXDLIN( 536)								while((_g < keys6->length)){
HXLINE( 536)									int key = keys6->__get(_g);
HXDLIN( 536)									_g = (_g + 1);
HXDLIN( 536)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 536)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 536)								int state = 2;
HXDLIN( 536)								int _g = 0;
HXDLIN( 536)								while((_g < keys6->length)){
HXLINE( 536)									int key = keys6->__get(_g);
HXDLIN( 536)									_g = (_g + 1);
HXDLIN( 536)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 536)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 536)								int state = 2;
HXDLIN( 536)								int _g = 0;
HXDLIN( 536)								while((_g < keys6->length)){
HXLINE( 536)									int key = keys6->__get(_g);
HXDLIN( 536)									_g = (_g + 1);
HXDLIN( 536)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 536)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 536)								int state = 2;
HXDLIN( 536)								int _g = 0;
HXDLIN( 536)								while((_g < keys6->length)){
HXLINE( 536)									int key = keys6->__get(_g);
HXDLIN( 536)									_g = (_g + 1);
HXDLIN( 536)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 536)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 536)								int state = 2;
HXDLIN( 536)								int _g = 0;
HXDLIN( 536)								while((_g < keys6->length)){
HXLINE( 536)									int key = keys6->__get(_g);
HXDLIN( 536)									_g = (_g + 1);
HXDLIN( 536)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 537)					{
HXLINE( 537)						::Array< int > keys7 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_475,1);
HXDLIN( 537)						switch((int)(::gameFolder::meta::Control_obj::RESET_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 537)									int state = 1;
HXDLIN( 537)									int _g = 0;
HXDLIN( 537)									while((_g < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g);
HXDLIN( 537)										_g = (_g + 1);
HXDLIN( 537)										action->addKey(key,state);
            									}
            								}
HXDLIN( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 537)									int state1 = 2;
HXDLIN( 537)									int _g1 = 0;
HXDLIN( 537)									while((_g1 < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g1);
HXDLIN( 537)										_g1 = (_g1 + 1);
HXDLIN( 537)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 537)									int state2 = -1;
HXDLIN( 537)									int _g2 = 0;
HXDLIN( 537)									while((_g2 < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g2);
HXDLIN( 537)										_g2 = (_g2 + 1);
HXDLIN( 537)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 537)									int state = 1;
HXDLIN( 537)									int _g = 0;
HXDLIN( 537)									while((_g < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g);
HXDLIN( 537)										_g = (_g + 1);
HXDLIN( 537)										action->addKey(key,state);
            									}
            								}
HXDLIN( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 537)									int state1 = 2;
HXDLIN( 537)									int _g1 = 0;
HXDLIN( 537)									while((_g1 < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g1);
HXDLIN( 537)										_g1 = (_g1 + 1);
HXDLIN( 537)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 537)									int state2 = -1;
HXDLIN( 537)									int _g2 = 0;
HXDLIN( 537)									while((_g2 < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g2);
HXDLIN( 537)										_g2 = (_g2 + 1);
HXDLIN( 537)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 537)									int state = 1;
HXDLIN( 537)									int _g = 0;
HXDLIN( 537)									while((_g < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g);
HXDLIN( 537)										_g = (_g + 1);
HXDLIN( 537)										action->addKey(key,state);
            									}
            								}
HXDLIN( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 537)									int state1 = 2;
HXDLIN( 537)									int _g1 = 0;
HXDLIN( 537)									while((_g1 < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g1);
HXDLIN( 537)										_g1 = (_g1 + 1);
HXDLIN( 537)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 537)									int state2 = -1;
HXDLIN( 537)									int _g2 = 0;
HXDLIN( 537)									while((_g2 < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g2);
HXDLIN( 537)										_g2 = (_g2 + 1);
HXDLIN( 537)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 537)									int state = 1;
HXDLIN( 537)									int _g = 0;
HXDLIN( 537)									while((_g < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g);
HXDLIN( 537)										_g = (_g + 1);
HXDLIN( 537)										action->addKey(key,state);
            									}
            								}
HXDLIN( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 537)									int state1 = 2;
HXDLIN( 537)									int _g1 = 0;
HXDLIN( 537)									while((_g1 < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g1);
HXDLIN( 537)										_g1 = (_g1 + 1);
HXDLIN( 537)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 537)								{
HXLINE( 537)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 537)									int state2 = -1;
HXDLIN( 537)									int _g2 = 0;
HXDLIN( 537)									while((_g2 < keys7->length)){
HXLINE( 537)										int key = keys7->__get(_g2);
HXDLIN( 537)										_g2 = (_g2 + 1);
HXDLIN( 537)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 537)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 537)								int state = 2;
HXDLIN( 537)								int _g = 0;
HXDLIN( 537)								while((_g < keys7->length)){
HXLINE( 537)									int key = keys7->__get(_g);
HXDLIN( 537)									_g = (_g + 1);
HXDLIN( 537)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 537)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 537)								int state = 2;
HXDLIN( 537)								int _g = 0;
HXDLIN( 537)								while((_g < keys7->length)){
HXLINE( 537)									int key = keys7->__get(_g);
HXDLIN( 537)									_g = (_g + 1);
HXDLIN( 537)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 537)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 537)								int state = 2;
HXDLIN( 537)								int _g = 0;
HXDLIN( 537)								while((_g < keys7->length)){
HXLINE( 537)									int key = keys7->__get(_g);
HXDLIN( 537)									_g = (_g + 1);
HXDLIN( 537)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 537)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 537)								int state = 2;
HXDLIN( 537)								int _g = 0;
HXDLIN( 537)								while((_g < keys7->length)){
HXLINE( 537)									int key = keys7->__get(_g);
HXDLIN( 537)									_g = (_g + 1);
HXDLIN( 537)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 537)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 537)								int state = 2;
HXDLIN( 537)								int _g = 0;
HXDLIN( 537)								while((_g < keys7->length)){
HXLINE( 537)									int key = keys7->__get(_g);
HXDLIN( 537)									_g = (_g + 1);
HXDLIN( 537)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
            				}
            				else {
HXLINE( 539)					{
HXLINE( 539)						::Array< int > keys = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_476,1);
HXDLIN( 539)						switch((int)(::gameFolder::meta::Control_obj::UP_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 539)									int state = 1;
HXDLIN( 539)									int _g = 0;
HXDLIN( 539)									while((_g < keys->length)){
HXLINE( 539)										int key = keys->__get(_g);
HXDLIN( 539)										_g = (_g + 1);
HXDLIN( 539)										action->addKey(key,state);
            									}
            								}
HXDLIN( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 539)									int state1 = 2;
HXDLIN( 539)									int _g1 = 0;
HXDLIN( 539)									while((_g1 < keys->length)){
HXLINE( 539)										int key = keys->__get(_g1);
HXDLIN( 539)										_g1 = (_g1 + 1);
HXDLIN( 539)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 539)									int state2 = -1;
HXDLIN( 539)									int _g2 = 0;
HXDLIN( 539)									while((_g2 < keys->length)){
HXLINE( 539)										int key = keys->__get(_g2);
HXDLIN( 539)										_g2 = (_g2 + 1);
HXDLIN( 539)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 539)									int state = 1;
HXDLIN( 539)									int _g = 0;
HXDLIN( 539)									while((_g < keys->length)){
HXLINE( 539)										int key = keys->__get(_g);
HXDLIN( 539)										_g = (_g + 1);
HXDLIN( 539)										action->addKey(key,state);
            									}
            								}
HXDLIN( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 539)									int state1 = 2;
HXDLIN( 539)									int _g1 = 0;
HXDLIN( 539)									while((_g1 < keys->length)){
HXLINE( 539)										int key = keys->__get(_g1);
HXDLIN( 539)										_g1 = (_g1 + 1);
HXDLIN( 539)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 539)									int state2 = -1;
HXDLIN( 539)									int _g2 = 0;
HXDLIN( 539)									while((_g2 < keys->length)){
HXLINE( 539)										int key = keys->__get(_g2);
HXDLIN( 539)										_g2 = (_g2 + 1);
HXDLIN( 539)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 539)									int state = 1;
HXDLIN( 539)									int _g = 0;
HXDLIN( 539)									while((_g < keys->length)){
HXLINE( 539)										int key = keys->__get(_g);
HXDLIN( 539)										_g = (_g + 1);
HXDLIN( 539)										action->addKey(key,state);
            									}
            								}
HXDLIN( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 539)									int state1 = 2;
HXDLIN( 539)									int _g1 = 0;
HXDLIN( 539)									while((_g1 < keys->length)){
HXLINE( 539)										int key = keys->__get(_g1);
HXDLIN( 539)										_g1 = (_g1 + 1);
HXDLIN( 539)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 539)									int state2 = -1;
HXDLIN( 539)									int _g2 = 0;
HXDLIN( 539)									while((_g2 < keys->length)){
HXLINE( 539)										int key = keys->__get(_g2);
HXDLIN( 539)										_g2 = (_g2 + 1);
HXDLIN( 539)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 539)									int state = 1;
HXDLIN( 539)									int _g = 0;
HXDLIN( 539)									while((_g < keys->length)){
HXLINE( 539)										int key = keys->__get(_g);
HXDLIN( 539)										_g = (_g + 1);
HXDLIN( 539)										action->addKey(key,state);
            									}
            								}
HXDLIN( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 539)									int state1 = 2;
HXDLIN( 539)									int _g1 = 0;
HXDLIN( 539)									while((_g1 < keys->length)){
HXLINE( 539)										int key = keys->__get(_g1);
HXDLIN( 539)										_g1 = (_g1 + 1);
HXDLIN( 539)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 539)								{
HXLINE( 539)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 539)									int state2 = -1;
HXDLIN( 539)									int _g2 = 0;
HXDLIN( 539)									while((_g2 < keys->length)){
HXLINE( 539)										int key = keys->__get(_g2);
HXDLIN( 539)										_g2 = (_g2 + 1);
HXDLIN( 539)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 539)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 539)								int state = 2;
HXDLIN( 539)								int _g = 0;
HXDLIN( 539)								while((_g < keys->length)){
HXLINE( 539)									int key = keys->__get(_g);
HXDLIN( 539)									_g = (_g + 1);
HXDLIN( 539)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 539)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 539)								int state = 2;
HXDLIN( 539)								int _g = 0;
HXDLIN( 539)								while((_g < keys->length)){
HXLINE( 539)									int key = keys->__get(_g);
HXDLIN( 539)									_g = (_g + 1);
HXDLIN( 539)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 539)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 539)								int state = 2;
HXDLIN( 539)								int _g = 0;
HXDLIN( 539)								while((_g < keys->length)){
HXLINE( 539)									int key = keys->__get(_g);
HXDLIN( 539)									_g = (_g + 1);
HXDLIN( 539)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 539)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 539)								int state = 2;
HXDLIN( 539)								int _g = 0;
HXDLIN( 539)								while((_g < keys->length)){
HXLINE( 539)									int key = keys->__get(_g);
HXDLIN( 539)									_g = (_g + 1);
HXDLIN( 539)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 539)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 539)								int state = 2;
HXDLIN( 539)								int _g = 0;
HXDLIN( 539)								while((_g < keys->length)){
HXLINE( 539)									int key = keys->__get(_g);
HXDLIN( 539)									_g = (_g + 1);
HXDLIN( 539)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 540)					{
HXLINE( 540)						::Array< int > keys1 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_477,1);
HXDLIN( 540)						switch((int)(::gameFolder::meta::Control_obj::DOWN_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 540)									int state = 1;
HXDLIN( 540)									int _g = 0;
HXDLIN( 540)									while((_g < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g);
HXDLIN( 540)										_g = (_g + 1);
HXDLIN( 540)										action->addKey(key,state);
            									}
            								}
HXDLIN( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 540)									int state1 = 2;
HXDLIN( 540)									int _g1 = 0;
HXDLIN( 540)									while((_g1 < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g1);
HXDLIN( 540)										_g1 = (_g1 + 1);
HXDLIN( 540)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 540)									int state2 = -1;
HXDLIN( 540)									int _g2 = 0;
HXDLIN( 540)									while((_g2 < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g2);
HXDLIN( 540)										_g2 = (_g2 + 1);
HXDLIN( 540)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 540)									int state = 1;
HXDLIN( 540)									int _g = 0;
HXDLIN( 540)									while((_g < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g);
HXDLIN( 540)										_g = (_g + 1);
HXDLIN( 540)										action->addKey(key,state);
            									}
            								}
HXDLIN( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 540)									int state1 = 2;
HXDLIN( 540)									int _g1 = 0;
HXDLIN( 540)									while((_g1 < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g1);
HXDLIN( 540)										_g1 = (_g1 + 1);
HXDLIN( 540)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 540)									int state2 = -1;
HXDLIN( 540)									int _g2 = 0;
HXDLIN( 540)									while((_g2 < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g2);
HXDLIN( 540)										_g2 = (_g2 + 1);
HXDLIN( 540)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 540)									int state = 1;
HXDLIN( 540)									int _g = 0;
HXDLIN( 540)									while((_g < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g);
HXDLIN( 540)										_g = (_g + 1);
HXDLIN( 540)										action->addKey(key,state);
            									}
            								}
HXDLIN( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 540)									int state1 = 2;
HXDLIN( 540)									int _g1 = 0;
HXDLIN( 540)									while((_g1 < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g1);
HXDLIN( 540)										_g1 = (_g1 + 1);
HXDLIN( 540)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 540)									int state2 = -1;
HXDLIN( 540)									int _g2 = 0;
HXDLIN( 540)									while((_g2 < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g2);
HXDLIN( 540)										_g2 = (_g2 + 1);
HXDLIN( 540)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 540)									int state = 1;
HXDLIN( 540)									int _g = 0;
HXDLIN( 540)									while((_g < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g);
HXDLIN( 540)										_g = (_g + 1);
HXDLIN( 540)										action->addKey(key,state);
            									}
            								}
HXDLIN( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 540)									int state1 = 2;
HXDLIN( 540)									int _g1 = 0;
HXDLIN( 540)									while((_g1 < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g1);
HXDLIN( 540)										_g1 = (_g1 + 1);
HXDLIN( 540)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 540)								{
HXLINE( 540)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 540)									int state2 = -1;
HXDLIN( 540)									int _g2 = 0;
HXDLIN( 540)									while((_g2 < keys1->length)){
HXLINE( 540)										int key = keys1->__get(_g2);
HXDLIN( 540)										_g2 = (_g2 + 1);
HXDLIN( 540)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 540)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 540)								int state = 2;
HXDLIN( 540)								int _g = 0;
HXDLIN( 540)								while((_g < keys1->length)){
HXLINE( 540)									int key = keys1->__get(_g);
HXDLIN( 540)									_g = (_g + 1);
HXDLIN( 540)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 540)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 540)								int state = 2;
HXDLIN( 540)								int _g = 0;
HXDLIN( 540)								while((_g < keys1->length)){
HXLINE( 540)									int key = keys1->__get(_g);
HXDLIN( 540)									_g = (_g + 1);
HXDLIN( 540)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 540)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 540)								int state = 2;
HXDLIN( 540)								int _g = 0;
HXDLIN( 540)								while((_g < keys1->length)){
HXLINE( 540)									int key = keys1->__get(_g);
HXDLIN( 540)									_g = (_g + 1);
HXDLIN( 540)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 540)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 540)								int state = 2;
HXDLIN( 540)								int _g = 0;
HXDLIN( 540)								while((_g < keys1->length)){
HXLINE( 540)									int key = keys1->__get(_g);
HXDLIN( 540)									_g = (_g + 1);
HXDLIN( 540)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 540)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 540)								int state = 2;
HXDLIN( 540)								int _g = 0;
HXDLIN( 540)								while((_g < keys1->length)){
HXLINE( 540)									int key = keys1->__get(_g);
HXDLIN( 540)									_g = (_g + 1);
HXDLIN( 540)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 541)					{
HXLINE( 541)						::Array< int > keys2 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_478,1);
HXDLIN( 541)						switch((int)(::gameFolder::meta::Control_obj::LEFT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 541)									int state = 1;
HXDLIN( 541)									int _g = 0;
HXDLIN( 541)									while((_g < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g);
HXDLIN( 541)										_g = (_g + 1);
HXDLIN( 541)										action->addKey(key,state);
            									}
            								}
HXDLIN( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 541)									int state1 = 2;
HXDLIN( 541)									int _g1 = 0;
HXDLIN( 541)									while((_g1 < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g1);
HXDLIN( 541)										_g1 = (_g1 + 1);
HXDLIN( 541)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 541)									int state2 = -1;
HXDLIN( 541)									int _g2 = 0;
HXDLIN( 541)									while((_g2 < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g2);
HXDLIN( 541)										_g2 = (_g2 + 1);
HXDLIN( 541)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 541)									int state = 1;
HXDLIN( 541)									int _g = 0;
HXDLIN( 541)									while((_g < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g);
HXDLIN( 541)										_g = (_g + 1);
HXDLIN( 541)										action->addKey(key,state);
            									}
            								}
HXDLIN( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 541)									int state1 = 2;
HXDLIN( 541)									int _g1 = 0;
HXDLIN( 541)									while((_g1 < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g1);
HXDLIN( 541)										_g1 = (_g1 + 1);
HXDLIN( 541)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 541)									int state2 = -1;
HXDLIN( 541)									int _g2 = 0;
HXDLIN( 541)									while((_g2 < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g2);
HXDLIN( 541)										_g2 = (_g2 + 1);
HXDLIN( 541)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 541)									int state = 1;
HXDLIN( 541)									int _g = 0;
HXDLIN( 541)									while((_g < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g);
HXDLIN( 541)										_g = (_g + 1);
HXDLIN( 541)										action->addKey(key,state);
            									}
            								}
HXDLIN( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 541)									int state1 = 2;
HXDLIN( 541)									int _g1 = 0;
HXDLIN( 541)									while((_g1 < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g1);
HXDLIN( 541)										_g1 = (_g1 + 1);
HXDLIN( 541)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 541)									int state2 = -1;
HXDLIN( 541)									int _g2 = 0;
HXDLIN( 541)									while((_g2 < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g2);
HXDLIN( 541)										_g2 = (_g2 + 1);
HXDLIN( 541)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 541)									int state = 1;
HXDLIN( 541)									int _g = 0;
HXDLIN( 541)									while((_g < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g);
HXDLIN( 541)										_g = (_g + 1);
HXDLIN( 541)										action->addKey(key,state);
            									}
            								}
HXDLIN( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 541)									int state1 = 2;
HXDLIN( 541)									int _g1 = 0;
HXDLIN( 541)									while((_g1 < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g1);
HXDLIN( 541)										_g1 = (_g1 + 1);
HXDLIN( 541)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 541)								{
HXLINE( 541)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 541)									int state2 = -1;
HXDLIN( 541)									int _g2 = 0;
HXDLIN( 541)									while((_g2 < keys2->length)){
HXLINE( 541)										int key = keys2->__get(_g2);
HXDLIN( 541)										_g2 = (_g2 + 1);
HXDLIN( 541)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 541)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 541)								int state = 2;
HXDLIN( 541)								int _g = 0;
HXDLIN( 541)								while((_g < keys2->length)){
HXLINE( 541)									int key = keys2->__get(_g);
HXDLIN( 541)									_g = (_g + 1);
HXDLIN( 541)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 541)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 541)								int state = 2;
HXDLIN( 541)								int _g = 0;
HXDLIN( 541)								while((_g < keys2->length)){
HXLINE( 541)									int key = keys2->__get(_g);
HXDLIN( 541)									_g = (_g + 1);
HXDLIN( 541)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 541)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 541)								int state = 2;
HXDLIN( 541)								int _g = 0;
HXDLIN( 541)								while((_g < keys2->length)){
HXLINE( 541)									int key = keys2->__get(_g);
HXDLIN( 541)									_g = (_g + 1);
HXDLIN( 541)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 541)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 541)								int state = 2;
HXDLIN( 541)								int _g = 0;
HXDLIN( 541)								while((_g < keys2->length)){
HXLINE( 541)									int key = keys2->__get(_g);
HXDLIN( 541)									_g = (_g + 1);
HXDLIN( 541)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 541)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 541)								int state = 2;
HXDLIN( 541)								int _g = 0;
HXDLIN( 541)								while((_g < keys2->length)){
HXLINE( 541)									int key = keys2->__get(_g);
HXDLIN( 541)									_g = (_g + 1);
HXDLIN( 541)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 542)					{
HXLINE( 542)						::Array< int > keys3 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_479,1);
HXDLIN( 542)						switch((int)(::gameFolder::meta::Control_obj::RIGHT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 542)									int state = 1;
HXDLIN( 542)									int _g = 0;
HXDLIN( 542)									while((_g < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g);
HXDLIN( 542)										_g = (_g + 1);
HXDLIN( 542)										action->addKey(key,state);
            									}
            								}
HXDLIN( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 542)									int state1 = 2;
HXDLIN( 542)									int _g1 = 0;
HXDLIN( 542)									while((_g1 < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g1);
HXDLIN( 542)										_g1 = (_g1 + 1);
HXDLIN( 542)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 542)									int state2 = -1;
HXDLIN( 542)									int _g2 = 0;
HXDLIN( 542)									while((_g2 < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g2);
HXDLIN( 542)										_g2 = (_g2 + 1);
HXDLIN( 542)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 542)									int state = 1;
HXDLIN( 542)									int _g = 0;
HXDLIN( 542)									while((_g < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g);
HXDLIN( 542)										_g = (_g + 1);
HXDLIN( 542)										action->addKey(key,state);
            									}
            								}
HXDLIN( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 542)									int state1 = 2;
HXDLIN( 542)									int _g1 = 0;
HXDLIN( 542)									while((_g1 < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g1);
HXDLIN( 542)										_g1 = (_g1 + 1);
HXDLIN( 542)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 542)									int state2 = -1;
HXDLIN( 542)									int _g2 = 0;
HXDLIN( 542)									while((_g2 < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g2);
HXDLIN( 542)										_g2 = (_g2 + 1);
HXDLIN( 542)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 542)									int state = 1;
HXDLIN( 542)									int _g = 0;
HXDLIN( 542)									while((_g < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g);
HXDLIN( 542)										_g = (_g + 1);
HXDLIN( 542)										action->addKey(key,state);
            									}
            								}
HXDLIN( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 542)									int state1 = 2;
HXDLIN( 542)									int _g1 = 0;
HXDLIN( 542)									while((_g1 < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g1);
HXDLIN( 542)										_g1 = (_g1 + 1);
HXDLIN( 542)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 542)									int state2 = -1;
HXDLIN( 542)									int _g2 = 0;
HXDLIN( 542)									while((_g2 < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g2);
HXDLIN( 542)										_g2 = (_g2 + 1);
HXDLIN( 542)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 542)									int state = 1;
HXDLIN( 542)									int _g = 0;
HXDLIN( 542)									while((_g < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g);
HXDLIN( 542)										_g = (_g + 1);
HXDLIN( 542)										action->addKey(key,state);
            									}
            								}
HXDLIN( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 542)									int state1 = 2;
HXDLIN( 542)									int _g1 = 0;
HXDLIN( 542)									while((_g1 < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g1);
HXDLIN( 542)										_g1 = (_g1 + 1);
HXDLIN( 542)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 542)								{
HXLINE( 542)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 542)									int state2 = -1;
HXDLIN( 542)									int _g2 = 0;
HXDLIN( 542)									while((_g2 < keys3->length)){
HXLINE( 542)										int key = keys3->__get(_g2);
HXDLIN( 542)										_g2 = (_g2 + 1);
HXDLIN( 542)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 542)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 542)								int state = 2;
HXDLIN( 542)								int _g = 0;
HXDLIN( 542)								while((_g < keys3->length)){
HXLINE( 542)									int key = keys3->__get(_g);
HXDLIN( 542)									_g = (_g + 1);
HXDLIN( 542)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 542)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 542)								int state = 2;
HXDLIN( 542)								int _g = 0;
HXDLIN( 542)								while((_g < keys3->length)){
HXLINE( 542)									int key = keys3->__get(_g);
HXDLIN( 542)									_g = (_g + 1);
HXDLIN( 542)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 542)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 542)								int state = 2;
HXDLIN( 542)								int _g = 0;
HXDLIN( 542)								while((_g < keys3->length)){
HXLINE( 542)									int key = keys3->__get(_g);
HXDLIN( 542)									_g = (_g + 1);
HXDLIN( 542)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 542)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 542)								int state = 2;
HXDLIN( 542)								int _g = 0;
HXDLIN( 542)								while((_g < keys3->length)){
HXLINE( 542)									int key = keys3->__get(_g);
HXDLIN( 542)									_g = (_g + 1);
HXDLIN( 542)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 542)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 542)								int state = 2;
HXDLIN( 542)								int _g = 0;
HXDLIN( 542)								while((_g < keys3->length)){
HXLINE( 542)									int key = keys3->__get(_g);
HXDLIN( 542)									_g = (_g + 1);
HXDLIN( 542)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 543)					{
HXLINE( 543)						::Array< int > keys4 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_480,1);
HXDLIN( 543)						switch((int)(::gameFolder::meta::Control_obj::ACCEPT_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 543)									int state = 1;
HXDLIN( 543)									int _g = 0;
HXDLIN( 543)									while((_g < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g);
HXDLIN( 543)										_g = (_g + 1);
HXDLIN( 543)										action->addKey(key,state);
            									}
            								}
HXDLIN( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 543)									int state1 = 2;
HXDLIN( 543)									int _g1 = 0;
HXDLIN( 543)									while((_g1 < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g1);
HXDLIN( 543)										_g1 = (_g1 + 1);
HXDLIN( 543)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 543)									int state2 = -1;
HXDLIN( 543)									int _g2 = 0;
HXDLIN( 543)									while((_g2 < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g2);
HXDLIN( 543)										_g2 = (_g2 + 1);
HXDLIN( 543)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 543)									int state = 1;
HXDLIN( 543)									int _g = 0;
HXDLIN( 543)									while((_g < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g);
HXDLIN( 543)										_g = (_g + 1);
HXDLIN( 543)										action->addKey(key,state);
            									}
            								}
HXDLIN( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 543)									int state1 = 2;
HXDLIN( 543)									int _g1 = 0;
HXDLIN( 543)									while((_g1 < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g1);
HXDLIN( 543)										_g1 = (_g1 + 1);
HXDLIN( 543)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 543)									int state2 = -1;
HXDLIN( 543)									int _g2 = 0;
HXDLIN( 543)									while((_g2 < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g2);
HXDLIN( 543)										_g2 = (_g2 + 1);
HXDLIN( 543)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 543)									int state = 1;
HXDLIN( 543)									int _g = 0;
HXDLIN( 543)									while((_g < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g);
HXDLIN( 543)										_g = (_g + 1);
HXDLIN( 543)										action->addKey(key,state);
            									}
            								}
HXDLIN( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 543)									int state1 = 2;
HXDLIN( 543)									int _g1 = 0;
HXDLIN( 543)									while((_g1 < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g1);
HXDLIN( 543)										_g1 = (_g1 + 1);
HXDLIN( 543)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 543)									int state2 = -1;
HXDLIN( 543)									int _g2 = 0;
HXDLIN( 543)									while((_g2 < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g2);
HXDLIN( 543)										_g2 = (_g2 + 1);
HXDLIN( 543)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 543)									int state = 1;
HXDLIN( 543)									int _g = 0;
HXDLIN( 543)									while((_g < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g);
HXDLIN( 543)										_g = (_g + 1);
HXDLIN( 543)										action->addKey(key,state);
            									}
            								}
HXDLIN( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 543)									int state1 = 2;
HXDLIN( 543)									int _g1 = 0;
HXDLIN( 543)									while((_g1 < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g1);
HXDLIN( 543)										_g1 = (_g1 + 1);
HXDLIN( 543)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 543)								{
HXLINE( 543)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 543)									int state2 = -1;
HXDLIN( 543)									int _g2 = 0;
HXDLIN( 543)									while((_g2 < keys4->length)){
HXLINE( 543)										int key = keys4->__get(_g2);
HXDLIN( 543)										_g2 = (_g2 + 1);
HXDLIN( 543)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 543)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 543)								int state = 2;
HXDLIN( 543)								int _g = 0;
HXDLIN( 543)								while((_g < keys4->length)){
HXLINE( 543)									int key = keys4->__get(_g);
HXDLIN( 543)									_g = (_g + 1);
HXDLIN( 543)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 543)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 543)								int state = 2;
HXDLIN( 543)								int _g = 0;
HXDLIN( 543)								while((_g < keys4->length)){
HXLINE( 543)									int key = keys4->__get(_g);
HXDLIN( 543)									_g = (_g + 1);
HXDLIN( 543)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 543)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 543)								int state = 2;
HXDLIN( 543)								int _g = 0;
HXDLIN( 543)								while((_g < keys4->length)){
HXLINE( 543)									int key = keys4->__get(_g);
HXDLIN( 543)									_g = (_g + 1);
HXDLIN( 543)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 543)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 543)								int state = 2;
HXDLIN( 543)								int _g = 0;
HXDLIN( 543)								while((_g < keys4->length)){
HXLINE( 543)									int key = keys4->__get(_g);
HXDLIN( 543)									_g = (_g + 1);
HXDLIN( 543)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 543)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 543)								int state = 2;
HXDLIN( 543)								int _g = 0;
HXDLIN( 543)								while((_g < keys4->length)){
HXLINE( 543)									int key = keys4->__get(_g);
HXDLIN( 543)									_g = (_g + 1);
HXDLIN( 543)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 544)					{
HXLINE( 544)						::Array< int > keys5 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_481,1);
HXDLIN( 544)						switch((int)(::gameFolder::meta::Control_obj::BACK_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 544)									int state = 1;
HXDLIN( 544)									int _g = 0;
HXDLIN( 544)									while((_g < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g);
HXDLIN( 544)										_g = (_g + 1);
HXDLIN( 544)										action->addKey(key,state);
            									}
            								}
HXDLIN( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 544)									int state1 = 2;
HXDLIN( 544)									int _g1 = 0;
HXDLIN( 544)									while((_g1 < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g1);
HXDLIN( 544)										_g1 = (_g1 + 1);
HXDLIN( 544)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 544)									int state2 = -1;
HXDLIN( 544)									int _g2 = 0;
HXDLIN( 544)									while((_g2 < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g2);
HXDLIN( 544)										_g2 = (_g2 + 1);
HXDLIN( 544)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 544)									int state = 1;
HXDLIN( 544)									int _g = 0;
HXDLIN( 544)									while((_g < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g);
HXDLIN( 544)										_g = (_g + 1);
HXDLIN( 544)										action->addKey(key,state);
            									}
            								}
HXDLIN( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 544)									int state1 = 2;
HXDLIN( 544)									int _g1 = 0;
HXDLIN( 544)									while((_g1 < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g1);
HXDLIN( 544)										_g1 = (_g1 + 1);
HXDLIN( 544)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 544)									int state2 = -1;
HXDLIN( 544)									int _g2 = 0;
HXDLIN( 544)									while((_g2 < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g2);
HXDLIN( 544)										_g2 = (_g2 + 1);
HXDLIN( 544)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 544)									int state = 1;
HXDLIN( 544)									int _g = 0;
HXDLIN( 544)									while((_g < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g);
HXDLIN( 544)										_g = (_g + 1);
HXDLIN( 544)										action->addKey(key,state);
            									}
            								}
HXDLIN( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 544)									int state1 = 2;
HXDLIN( 544)									int _g1 = 0;
HXDLIN( 544)									while((_g1 < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g1);
HXDLIN( 544)										_g1 = (_g1 + 1);
HXDLIN( 544)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 544)									int state2 = -1;
HXDLIN( 544)									int _g2 = 0;
HXDLIN( 544)									while((_g2 < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g2);
HXDLIN( 544)										_g2 = (_g2 + 1);
HXDLIN( 544)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 544)									int state = 1;
HXDLIN( 544)									int _g = 0;
HXDLIN( 544)									while((_g < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g);
HXDLIN( 544)										_g = (_g + 1);
HXDLIN( 544)										action->addKey(key,state);
            									}
            								}
HXDLIN( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 544)									int state1 = 2;
HXDLIN( 544)									int _g1 = 0;
HXDLIN( 544)									while((_g1 < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g1);
HXDLIN( 544)										_g1 = (_g1 + 1);
HXDLIN( 544)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 544)								{
HXLINE( 544)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 544)									int state2 = -1;
HXDLIN( 544)									int _g2 = 0;
HXDLIN( 544)									while((_g2 < keys5->length)){
HXLINE( 544)										int key = keys5->__get(_g2);
HXDLIN( 544)										_g2 = (_g2 + 1);
HXDLIN( 544)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 544)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 544)								int state = 2;
HXDLIN( 544)								int _g = 0;
HXDLIN( 544)								while((_g < keys5->length)){
HXLINE( 544)									int key = keys5->__get(_g);
HXDLIN( 544)									_g = (_g + 1);
HXDLIN( 544)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 544)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 544)								int state = 2;
HXDLIN( 544)								int _g = 0;
HXDLIN( 544)								while((_g < keys5->length)){
HXLINE( 544)									int key = keys5->__get(_g);
HXDLIN( 544)									_g = (_g + 1);
HXDLIN( 544)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 544)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 544)								int state = 2;
HXDLIN( 544)								int _g = 0;
HXDLIN( 544)								while((_g < keys5->length)){
HXLINE( 544)									int key = keys5->__get(_g);
HXDLIN( 544)									_g = (_g + 1);
HXDLIN( 544)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 544)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 544)								int state = 2;
HXDLIN( 544)								int _g = 0;
HXDLIN( 544)								while((_g < keys5->length)){
HXLINE( 544)									int key = keys5->__get(_g);
HXDLIN( 544)									_g = (_g + 1);
HXDLIN( 544)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 544)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 544)								int state = 2;
HXDLIN( 544)								int _g = 0;
HXDLIN( 544)								while((_g < keys5->length)){
HXLINE( 544)									int key = keys5->__get(_g);
HXDLIN( 544)									_g = (_g + 1);
HXDLIN( 544)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 545)					{
HXLINE( 545)						::Array< int > keys6 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_482,1);
HXDLIN( 545)						switch((int)(::gameFolder::meta::Control_obj::PAUSE_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 545)									int state = 1;
HXDLIN( 545)									int _g = 0;
HXDLIN( 545)									while((_g < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g);
HXDLIN( 545)										_g = (_g + 1);
HXDLIN( 545)										action->addKey(key,state);
            									}
            								}
HXDLIN( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 545)									int state1 = 2;
HXDLIN( 545)									int _g1 = 0;
HXDLIN( 545)									while((_g1 < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g1);
HXDLIN( 545)										_g1 = (_g1 + 1);
HXDLIN( 545)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 545)									int state2 = -1;
HXDLIN( 545)									int _g2 = 0;
HXDLIN( 545)									while((_g2 < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g2);
HXDLIN( 545)										_g2 = (_g2 + 1);
HXDLIN( 545)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 545)									int state = 1;
HXDLIN( 545)									int _g = 0;
HXDLIN( 545)									while((_g < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g);
HXDLIN( 545)										_g = (_g + 1);
HXDLIN( 545)										action->addKey(key,state);
            									}
            								}
HXDLIN( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 545)									int state1 = 2;
HXDLIN( 545)									int _g1 = 0;
HXDLIN( 545)									while((_g1 < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g1);
HXDLIN( 545)										_g1 = (_g1 + 1);
HXDLIN( 545)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 545)									int state2 = -1;
HXDLIN( 545)									int _g2 = 0;
HXDLIN( 545)									while((_g2 < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g2);
HXDLIN( 545)										_g2 = (_g2 + 1);
HXDLIN( 545)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 545)									int state = 1;
HXDLIN( 545)									int _g = 0;
HXDLIN( 545)									while((_g < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g);
HXDLIN( 545)										_g = (_g + 1);
HXDLIN( 545)										action->addKey(key,state);
            									}
            								}
HXDLIN( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 545)									int state1 = 2;
HXDLIN( 545)									int _g1 = 0;
HXDLIN( 545)									while((_g1 < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g1);
HXDLIN( 545)										_g1 = (_g1 + 1);
HXDLIN( 545)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 545)									int state2 = -1;
HXDLIN( 545)									int _g2 = 0;
HXDLIN( 545)									while((_g2 < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g2);
HXDLIN( 545)										_g2 = (_g2 + 1);
HXDLIN( 545)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 545)									int state = 1;
HXDLIN( 545)									int _g = 0;
HXDLIN( 545)									while((_g < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g);
HXDLIN( 545)										_g = (_g + 1);
HXDLIN( 545)										action->addKey(key,state);
            									}
            								}
HXDLIN( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 545)									int state1 = 2;
HXDLIN( 545)									int _g1 = 0;
HXDLIN( 545)									while((_g1 < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g1);
HXDLIN( 545)										_g1 = (_g1 + 1);
HXDLIN( 545)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 545)								{
HXLINE( 545)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 545)									int state2 = -1;
HXDLIN( 545)									int _g2 = 0;
HXDLIN( 545)									while((_g2 < keys6->length)){
HXLINE( 545)										int key = keys6->__get(_g2);
HXDLIN( 545)										_g2 = (_g2 + 1);
HXDLIN( 545)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 545)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 545)								int state = 2;
HXDLIN( 545)								int _g = 0;
HXDLIN( 545)								while((_g < keys6->length)){
HXLINE( 545)									int key = keys6->__get(_g);
HXDLIN( 545)									_g = (_g + 1);
HXDLIN( 545)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 545)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 545)								int state = 2;
HXDLIN( 545)								int _g = 0;
HXDLIN( 545)								while((_g < keys6->length)){
HXLINE( 545)									int key = keys6->__get(_g);
HXDLIN( 545)									_g = (_g + 1);
HXDLIN( 545)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 545)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 545)								int state = 2;
HXDLIN( 545)								int _g = 0;
HXDLIN( 545)								while((_g < keys6->length)){
HXLINE( 545)									int key = keys6->__get(_g);
HXDLIN( 545)									_g = (_g + 1);
HXDLIN( 545)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 545)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 545)								int state = 2;
HXDLIN( 545)								int _g = 0;
HXDLIN( 545)								while((_g < keys6->length)){
HXLINE( 545)									int key = keys6->__get(_g);
HXDLIN( 545)									_g = (_g + 1);
HXDLIN( 545)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 545)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 545)								int state = 2;
HXDLIN( 545)								int _g = 0;
HXDLIN( 545)								while((_g < keys6->length)){
HXLINE( 545)									int key = keys6->__get(_g);
HXDLIN( 545)									_g = (_g + 1);
HXDLIN( 545)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
HXLINE( 546)					{
HXLINE( 546)						::Array< int > keys7 = ::Array_obj< int >::fromData( _hx_array_data_6dc620b1_483,1);
HXDLIN( 546)						switch((int)(::gameFolder::meta::Control_obj::RESET_dyn()->_hx_getIndex())){
            							case (int)0: {
HXLINE( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 546)									int state = 1;
HXDLIN( 546)									int _g = 0;
HXDLIN( 546)									while((_g < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g);
HXDLIN( 546)										_g = (_g + 1);
HXDLIN( 546)										action->addKey(key,state);
            									}
            								}
HXDLIN( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 546)									int state1 = 2;
HXDLIN( 546)									int _g1 = 0;
HXDLIN( 546)									while((_g1 < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g1);
HXDLIN( 546)										_g1 = (_g1 + 1);
HXDLIN( 546)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 546)									int state2 = -1;
HXDLIN( 546)									int _g2 = 0;
HXDLIN( 546)									while((_g2 < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g2);
HXDLIN( 546)										_g2 = (_g2 + 1);
HXDLIN( 546)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 546)									int state = 1;
HXDLIN( 546)									int _g = 0;
HXDLIN( 546)									while((_g < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g);
HXDLIN( 546)										_g = (_g + 1);
HXDLIN( 546)										action->addKey(key,state);
            									}
            								}
HXDLIN( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 546)									int state1 = 2;
HXDLIN( 546)									int _g1 = 0;
HXDLIN( 546)									while((_g1 < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g1);
HXDLIN( 546)										_g1 = (_g1 + 1);
HXDLIN( 546)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 546)									int state2 = -1;
HXDLIN( 546)									int _g2 = 0;
HXDLIN( 546)									while((_g2 < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g2);
HXDLIN( 546)										_g2 = (_g2 + 1);
HXDLIN( 546)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 546)									int state = 1;
HXDLIN( 546)									int _g = 0;
HXDLIN( 546)									while((_g < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g);
HXDLIN( 546)										_g = (_g + 1);
HXDLIN( 546)										action->addKey(key,state);
            									}
            								}
HXDLIN( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 546)									int state1 = 2;
HXDLIN( 546)									int _g1 = 0;
HXDLIN( 546)									while((_g1 < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g1);
HXDLIN( 546)										_g1 = (_g1 + 1);
HXDLIN( 546)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 546)									int state2 = -1;
HXDLIN( 546)									int _g2 = 0;
HXDLIN( 546)									while((_g2 < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g2);
HXDLIN( 546)										_g2 = (_g2 + 1);
HXDLIN( 546)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)3: {
HXLINE( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 546)									int state = 1;
HXDLIN( 546)									int _g = 0;
HXDLIN( 546)									while((_g < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g);
HXDLIN( 546)										_g = (_g + 1);
HXDLIN( 546)										action->addKey(key,state);
            									}
            								}
HXDLIN( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 546)									int state1 = 2;
HXDLIN( 546)									int _g1 = 0;
HXDLIN( 546)									while((_g1 < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g1);
HXDLIN( 546)										_g1 = (_g1 + 1);
HXDLIN( 546)										action1->addKey(key,state1);
            									}
            								}
HXDLIN( 546)								{
HXLINE( 546)									 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 546)									int state2 = -1;
HXDLIN( 546)									int _g2 = 0;
HXDLIN( 546)									while((_g2 < keys7->length)){
HXLINE( 546)										int key = keys7->__get(_g2);
HXDLIN( 546)										_g2 = (_g2 + 1);
HXDLIN( 546)										action2->addKey(key,state2);
            									}
            								}
            							}
            							break;
            							case (int)4: {
HXLINE( 546)								 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 546)								int state = 2;
HXDLIN( 546)								int _g = 0;
HXDLIN( 546)								while((_g < keys7->length)){
HXLINE( 546)									int key = keys7->__get(_g);
HXDLIN( 546)									_g = (_g + 1);
HXDLIN( 546)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)5: {
HXLINE( 546)								 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 546)								int state = 2;
HXDLIN( 546)								int _g = 0;
HXDLIN( 546)								while((_g < keys7->length)){
HXLINE( 546)									int key = keys7->__get(_g);
HXDLIN( 546)									_g = (_g + 1);
HXDLIN( 546)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)6: {
HXLINE( 546)								 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 546)								int state = 2;
HXDLIN( 546)								int _g = 0;
HXDLIN( 546)								while((_g < keys7->length)){
HXLINE( 546)									int key = keys7->__get(_g);
HXDLIN( 546)									_g = (_g + 1);
HXDLIN( 546)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)7: {
HXLINE( 546)								 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 546)								int state = 2;
HXDLIN( 546)								int _g = 0;
HXDLIN( 546)								while((_g < keys7->length)){
HXLINE( 546)									int key = keys7->__get(_g);
HXDLIN( 546)									_g = (_g + 1);
HXDLIN( 546)									action->addKey(key,state);
            								}
            							}
            							break;
            							case (int)8: {
HXLINE( 546)								 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 546)								int state = 2;
HXDLIN( 546)								int _g = 0;
HXDLIN( 546)								while((_g < keys7->length)){
HXLINE( 546)									int key = keys7->__get(_g);
HXDLIN( 546)									_g = (_g + 1);
HXDLIN( 546)									action->addKey(key,state);
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            			break;
            			case (int)2: {
            			}
            			break;
            			case (int)3: {
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,setKeyboardScheme,(void))

void Controls_obj::removeKeyboard(){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_588_removeKeyboard)
HXDLIN( 588)		int _g = 0;
HXDLIN( 588)		::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 588)		while((_g < _g1->length)){
HXDLIN( 588)			 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 588)			_g = (_g + 1);
HXLINE( 590)			int i = action->inputs->length;
HXLINE( 591)			while(true){
HXLINE( 591)				i = (i - 1);
HXDLIN( 591)				if (!(((i + 1) > 0))) {
HXLINE( 591)					goto _hx_goto_485;
            				}
HXLINE( 593)				 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 594)				if (::hx::IsEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE( 595)					action->remove(input,null());
            				}
            			}
            			_hx_goto_485:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,removeKeyboard,(void))

void Controls_obj::addGamepad(int id, ::haxe::ds::EnumValueMap buttonMap){
            	HX_GC_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_601_addGamepad)
HXLINE( 602)		this->gamepadsAdded->push(id);
HXLINE( 605)		{
HXLINE( 605)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,buttonMap);
HXDLIN( 605)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 605)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 605)				 ::gameFolder::meta::Control control = _g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic);
HXDLIN( 605)				::Array< int > buttons = ( (::Array< int >)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 606)				{
HXLINE( 606)					int id1 = id;
HXDLIN( 606)					::Array< int > buttons1 = buttons;
HXDLIN( 606)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXLINE( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 606)								int state = 1;
HXDLIN( 606)								int _g = 0;
HXDLIN( 606)								while((_g < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g);
HXDLIN( 606)									_g = (_g + 1);
HXDLIN( 606)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 606)								int state1 = 2;
HXDLIN( 606)								int _g1 = 0;
HXDLIN( 606)								while((_g1 < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g1);
HXDLIN( 606)									_g1 = (_g1 + 1);
HXDLIN( 606)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 606)								int state2 = -1;
HXDLIN( 606)								int _g2 = 0;
HXDLIN( 606)								while((_g2 < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g2);
HXDLIN( 606)									_g2 = (_g2 + 1);
HXDLIN( 606)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 606)								int state = 1;
HXDLIN( 606)								int _g = 0;
HXDLIN( 606)								while((_g < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g);
HXDLIN( 606)									_g = (_g + 1);
HXDLIN( 606)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 606)								int state1 = 2;
HXDLIN( 606)								int _g1 = 0;
HXDLIN( 606)								while((_g1 < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g1);
HXDLIN( 606)									_g1 = (_g1 + 1);
HXDLIN( 606)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 606)								int state2 = -1;
HXDLIN( 606)								int _g2 = 0;
HXDLIN( 606)								while((_g2 < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g2);
HXDLIN( 606)									_g2 = (_g2 + 1);
HXDLIN( 606)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 606)								int state = 1;
HXDLIN( 606)								int _g = 0;
HXDLIN( 606)								while((_g < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g);
HXDLIN( 606)									_g = (_g + 1);
HXDLIN( 606)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 606)								int state1 = 2;
HXDLIN( 606)								int _g1 = 0;
HXDLIN( 606)								while((_g1 < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g1);
HXDLIN( 606)									_g1 = (_g1 + 1);
HXDLIN( 606)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 606)								int state2 = -1;
HXDLIN( 606)								int _g2 = 0;
HXDLIN( 606)								while((_g2 < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g2);
HXDLIN( 606)									_g2 = (_g2 + 1);
HXDLIN( 606)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 606)								int state = 1;
HXDLIN( 606)								int _g = 0;
HXDLIN( 606)								while((_g < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g);
HXDLIN( 606)									_g = (_g + 1);
HXDLIN( 606)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 606)								int state1 = 2;
HXDLIN( 606)								int _g1 = 0;
HXDLIN( 606)								while((_g1 < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g1);
HXDLIN( 606)									_g1 = (_g1 + 1);
HXDLIN( 606)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 606)							{
HXLINE( 606)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 606)								int state2 = -1;
HXDLIN( 606)								int _g2 = 0;
HXDLIN( 606)								while((_g2 < buttons1->length)){
HXLINE( 606)									int button = buttons1->__get(_g2);
HXDLIN( 606)									_g2 = (_g2 + 1);
HXDLIN( 606)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 606)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 606)							int state = 2;
HXDLIN( 606)							int _g = 0;
HXDLIN( 606)							while((_g < buttons1->length)){
HXLINE( 606)								int button = buttons1->__get(_g);
HXDLIN( 606)								_g = (_g + 1);
HXDLIN( 606)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 606)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 606)							int state = 2;
HXDLIN( 606)							int _g = 0;
HXDLIN( 606)							while((_g < buttons1->length)){
HXLINE( 606)								int button = buttons1->__get(_g);
HXDLIN( 606)								_g = (_g + 1);
HXDLIN( 606)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 606)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 606)							int state = 2;
HXDLIN( 606)							int _g = 0;
HXDLIN( 606)							while((_g < buttons1->length)){
HXLINE( 606)								int button = buttons1->__get(_g);
HXDLIN( 606)								_g = (_g + 1);
HXDLIN( 606)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 606)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 606)							int state = 2;
HXDLIN( 606)							int _g = 0;
HXDLIN( 606)							while((_g < buttons1->length)){
HXLINE( 606)								int button = buttons1->__get(_g);
HXDLIN( 606)								_g = (_g + 1);
HXDLIN( 606)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 606)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 606)							int state = 2;
HXDLIN( 606)							int _g = 0;
HXDLIN( 606)							while((_g < buttons1->length)){
HXLINE( 606)								int button = buttons1->__get(_g);
HXDLIN( 606)								_g = (_g + 1);
HXDLIN( 606)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,addGamepad,(void))

void Controls_obj::addGamepadLiteral(int id, ::haxe::ds::EnumValueMap buttonMap){
            	HX_GC_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_614_addGamepadLiteral)
HXLINE( 615)		this->gamepadsAdded->push(id);
HXLINE( 618)		{
HXLINE( 618)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,buttonMap);
HXDLIN( 618)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 618)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 618)				 ::gameFolder::meta::Control control = _g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic);
HXDLIN( 618)				::Array< int > buttons = ( (::Array< int >)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE( 619)				{
HXLINE( 619)					int id1 = id;
HXDLIN( 619)					::Array< int > buttons1 = buttons;
HXDLIN( 619)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXLINE( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 619)								int state = 1;
HXDLIN( 619)								int _g = 0;
HXDLIN( 619)								while((_g < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g);
HXDLIN( 619)									_g = (_g + 1);
HXDLIN( 619)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 619)								int state1 = 2;
HXDLIN( 619)								int _g1 = 0;
HXDLIN( 619)								while((_g1 < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g1);
HXDLIN( 619)									_g1 = (_g1 + 1);
HXDLIN( 619)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 619)								int state2 = -1;
HXDLIN( 619)								int _g2 = 0;
HXDLIN( 619)								while((_g2 < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g2);
HXDLIN( 619)									_g2 = (_g2 + 1);
HXDLIN( 619)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 619)								int state = 1;
HXDLIN( 619)								int _g = 0;
HXDLIN( 619)								while((_g < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g);
HXDLIN( 619)									_g = (_g + 1);
HXDLIN( 619)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 619)								int state1 = 2;
HXDLIN( 619)								int _g1 = 0;
HXDLIN( 619)								while((_g1 < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g1);
HXDLIN( 619)									_g1 = (_g1 + 1);
HXDLIN( 619)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 619)								int state2 = -1;
HXDLIN( 619)								int _g2 = 0;
HXDLIN( 619)								while((_g2 < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g2);
HXDLIN( 619)									_g2 = (_g2 + 1);
HXDLIN( 619)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 619)								int state = 1;
HXDLIN( 619)								int _g = 0;
HXDLIN( 619)								while((_g < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g);
HXDLIN( 619)									_g = (_g + 1);
HXDLIN( 619)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 619)								int state1 = 2;
HXDLIN( 619)								int _g1 = 0;
HXDLIN( 619)								while((_g1 < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g1);
HXDLIN( 619)									_g1 = (_g1 + 1);
HXDLIN( 619)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 619)								int state2 = -1;
HXDLIN( 619)								int _g2 = 0;
HXDLIN( 619)								while((_g2 < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g2);
HXDLIN( 619)									_g2 = (_g2 + 1);
HXDLIN( 619)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 619)								int state = 1;
HXDLIN( 619)								int _g = 0;
HXDLIN( 619)								while((_g < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g);
HXDLIN( 619)									_g = (_g + 1);
HXDLIN( 619)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 619)								int state1 = 2;
HXDLIN( 619)								int _g1 = 0;
HXDLIN( 619)								while((_g1 < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g1);
HXDLIN( 619)									_g1 = (_g1 + 1);
HXDLIN( 619)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 619)							{
HXLINE( 619)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 619)								int state2 = -1;
HXDLIN( 619)								int _g2 = 0;
HXDLIN( 619)								while((_g2 < buttons1->length)){
HXLINE( 619)									int button = buttons1->__get(_g2);
HXDLIN( 619)									_g2 = (_g2 + 1);
HXDLIN( 619)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 619)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 619)							int state = 2;
HXDLIN( 619)							int _g = 0;
HXDLIN( 619)							while((_g < buttons1->length)){
HXLINE( 619)								int button = buttons1->__get(_g);
HXDLIN( 619)								_g = (_g + 1);
HXDLIN( 619)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 619)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 619)							int state = 2;
HXDLIN( 619)							int _g = 0;
HXDLIN( 619)							while((_g < buttons1->length)){
HXLINE( 619)								int button = buttons1->__get(_g);
HXDLIN( 619)								_g = (_g + 1);
HXDLIN( 619)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXLINE( 619)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 619)							int state = 2;
HXDLIN( 619)							int _g = 0;
HXDLIN( 619)							while((_g < buttons1->length)){
HXLINE( 619)								int button = buttons1->__get(_g);
HXDLIN( 619)								_g = (_g + 1);
HXDLIN( 619)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 619)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 619)							int state = 2;
HXDLIN( 619)							int _g = 0;
HXDLIN( 619)							while((_g < buttons1->length)){
HXLINE( 619)								int button = buttons1->__get(_g);
HXDLIN( 619)								_g = (_g + 1);
HXDLIN( 619)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXLINE( 619)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 619)							int state = 2;
HXDLIN( 619)							int _g = 0;
HXDLIN( 619)							while((_g < buttons1->length)){
HXLINE( 619)								int button = buttons1->__get(_g);
HXDLIN( 619)								_g = (_g + 1);
HXDLIN( 619)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,addGamepadLiteral,(void))

void Controls_obj::removeGamepad(::hx::Null< int >  __o_deviceID){
            		int deviceID = __o_deviceID.Default(-1);
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_627_removeGamepad)
HXLINE( 628)		{
HXLINE( 628)			int _g = 0;
HXDLIN( 628)			::Array< ::Dynamic> _g1 = this->digitalActions;
HXDLIN( 628)			while((_g < _g1->length)){
HXLINE( 628)				 ::flixel::input::actions::FlxActionDigital action = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionDigital >();
HXDLIN( 628)				_g = (_g + 1);
HXLINE( 630)				int i = action->inputs->length;
HXLINE( 631)				while(true){
HXLINE( 631)					i = (i - 1);
HXDLIN( 631)					if (!(((i + 1) > 0))) {
HXLINE( 631)						goto _hx_goto_526;
            					}
HXLINE( 633)					 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 634)					bool _hx_tmp;
HXDLIN( 634)					if (::hx::IsEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 634)						if ((deviceID != -1)) {
HXLINE( 634)							_hx_tmp = (input->deviceID == deviceID);
            						}
            						else {
HXLINE( 634)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 634)						_hx_tmp = false;
            					}
HXDLIN( 634)					if (_hx_tmp) {
HXLINE( 635)						action->remove(input,null());
            					}
            				}
            				_hx_goto_526:;
            			}
            		}
HXLINE( 639)		this->gamepadsAdded->remove(deviceID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,removeGamepad,(void))

void Controls_obj::addDefaultGamepad(int id){
            	HX_GC_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_645_addDefaultGamepad)
HXDLIN( 645)		 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN( 645)		_g->set(::gameFolder::meta::Control_obj::ACCEPT_dyn(),::Array_obj< int >::fromData( _hx_array_data_6dc620b1_547,1));
HXDLIN( 645)		_g->set(::gameFolder::meta::Control_obj::BACK_dyn(),::Array_obj< int >::fromData( _hx_array_data_6dc620b1_548,1));
HXDLIN( 645)		_g->set(::gameFolder::meta::Control_obj::UP_dyn(),::Array_obj< int >::fromData( _hx_array_data_6dc620b1_549,2));
HXDLIN( 645)		_g->set(::gameFolder::meta::Control_obj::DOWN_dyn(),::Array_obj< int >::fromData( _hx_array_data_6dc620b1_550,2));
HXDLIN( 645)		_g->set(::gameFolder::meta::Control_obj::LEFT_dyn(),::Array_obj< int >::fromData( _hx_array_data_6dc620b1_551,2));
HXDLIN( 645)		_g->set(::gameFolder::meta::Control_obj::RIGHT_dyn(),::Array_obj< int >::fromData( _hx_array_data_6dc620b1_552,2));
HXDLIN( 645)		_g->set(::gameFolder::meta::Control_obj::PAUSE_dyn(),::Array_obj< int >::fromData( _hx_array_data_6dc620b1_553,1));
HXDLIN( 645)		_g->set(::gameFolder::meta::Control_obj::RESET_dyn(),::Array_obj< int >::fromData( _hx_array_data_6dc620b1_554,1));
HXDLIN( 645)		this->gamepadsAdded->push(id);
HXDLIN( 645)		{
HXDLIN( 645)			 ::Dynamic _g1 =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,_g);
HXDLIN( 645)			while(( (bool)(_g1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN( 645)				 ::Dynamic _g = _g1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN( 645)				 ::gameFolder::meta::Control control = _g->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic);
HXDLIN( 645)				::Array< int > buttons = ( (::Array< int >)(_g->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXDLIN( 645)				{
HXDLIN( 645)					int id1 = id;
HXDLIN( 645)					::Array< int > buttons1 = buttons;
HXDLIN( 645)					switch((int)(control->_hx_getIndex())){
            						case (int)0: {
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 645)								int state = 1;
HXDLIN( 645)								int _g = 0;
HXDLIN( 645)								while((_g < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g);
HXDLIN( 645)									_g = (_g + 1);
HXDLIN( 645)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 645)								int state1 = 2;
HXDLIN( 645)								int _g1 = 0;
HXDLIN( 645)								while((_g1 < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g1);
HXDLIN( 645)									_g1 = (_g1 + 1);
HXDLIN( 645)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 645)								int state2 = -1;
HXDLIN( 645)								int _g2 = 0;
HXDLIN( 645)								while((_g2 < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g2);
HXDLIN( 645)									_g2 = (_g2 + 1);
HXDLIN( 645)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 645)								int state = 1;
HXDLIN( 645)								int _g = 0;
HXDLIN( 645)								while((_g < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g);
HXDLIN( 645)									_g = (_g + 1);
HXDLIN( 645)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 645)								int state1 = 2;
HXDLIN( 645)								int _g1 = 0;
HXDLIN( 645)								while((_g1 < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g1);
HXDLIN( 645)									_g1 = (_g1 + 1);
HXDLIN( 645)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 645)								int state2 = -1;
HXDLIN( 645)								int _g2 = 0;
HXDLIN( 645)								while((_g2 < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g2);
HXDLIN( 645)									_g2 = (_g2 + 1);
HXDLIN( 645)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 645)								int state = 1;
HXDLIN( 645)								int _g = 0;
HXDLIN( 645)								while((_g < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g);
HXDLIN( 645)									_g = (_g + 1);
HXDLIN( 645)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 645)								int state1 = 2;
HXDLIN( 645)								int _g1 = 0;
HXDLIN( 645)								while((_g1 < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g1);
HXDLIN( 645)									_g1 = (_g1 + 1);
HXDLIN( 645)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 645)								int state2 = -1;
HXDLIN( 645)								int _g2 = 0;
HXDLIN( 645)								while((_g2 < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g2);
HXDLIN( 645)									_g2 = (_g2 + 1);
HXDLIN( 645)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 645)								int state = 1;
HXDLIN( 645)								int _g = 0;
HXDLIN( 645)								while((_g < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g);
HXDLIN( 645)									_g = (_g + 1);
HXDLIN( 645)									action->addGamepad(button,state,id1);
            								}
            							}
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 645)								int state1 = 2;
HXDLIN( 645)								int _g1 = 0;
HXDLIN( 645)								while((_g1 < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g1);
HXDLIN( 645)									_g1 = (_g1 + 1);
HXDLIN( 645)									action1->addGamepad(button,state1,id1);
            								}
            							}
HXDLIN( 645)							{
HXDLIN( 645)								 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 645)								int state2 = -1;
HXDLIN( 645)								int _g2 = 0;
HXDLIN( 645)								while((_g2 < buttons1->length)){
HXDLIN( 645)									int button = buttons1->__get(_g2);
HXDLIN( 645)									_g2 = (_g2 + 1);
HXDLIN( 645)									action2->addGamepad(button,state2,id1);
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXDLIN( 645)							 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 645)							int state = 2;
HXDLIN( 645)							int _g = 0;
HXDLIN( 645)							while((_g < buttons1->length)){
HXDLIN( 645)								int button = buttons1->__get(_g);
HXDLIN( 645)								_g = (_g + 1);
HXDLIN( 645)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)5: {
HXDLIN( 645)							 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 645)							int state = 2;
HXDLIN( 645)							int _g = 0;
HXDLIN( 645)							while((_g < buttons1->length)){
HXDLIN( 645)								int button = buttons1->__get(_g);
HXDLIN( 645)								_g = (_g + 1);
HXDLIN( 645)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)6: {
HXDLIN( 645)							 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 645)							int state = 2;
HXDLIN( 645)							int _g = 0;
HXDLIN( 645)							while((_g < buttons1->length)){
HXDLIN( 645)								int button = buttons1->__get(_g);
HXDLIN( 645)								_g = (_g + 1);
HXDLIN( 645)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)7: {
HXDLIN( 645)							 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 645)							int state = 2;
HXDLIN( 645)							int _g = 0;
HXDLIN( 645)							while((_g < buttons1->length)){
HXDLIN( 645)								int button = buttons1->__get(_g);
HXDLIN( 645)								_g = (_g + 1);
HXDLIN( 645)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            						case (int)8: {
HXDLIN( 645)							 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 645)							int state = 2;
HXDLIN( 645)							int _g = 0;
HXDLIN( 645)							while((_g < buttons1->length)){
HXDLIN( 645)								int button = buttons1->__get(_g);
HXDLIN( 645)								_g = (_g + 1);
HXDLIN( 645)								action->addGamepad(button,state,id1);
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,addDefaultGamepad,(void))

void Controls_obj::bindButtons( ::gameFolder::meta::Control control,int id,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_679_bindButtons)
HXDLIN( 679)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action = this->_up;
HXDLIN( 679)					int state = 1;
HXDLIN( 679)					int _g = 0;
HXDLIN( 679)					while((_g < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g);
HXDLIN( 679)						_g = (_g + 1);
HXDLIN( 679)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action1 = this->_upP;
HXDLIN( 679)					int state1 = 2;
HXDLIN( 679)					int _g1 = 0;
HXDLIN( 679)					while((_g1 < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g1);
HXDLIN( 679)						_g1 = (_g1 + 1);
HXDLIN( 679)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action2 = this->_upR;
HXDLIN( 679)					int state2 = -1;
HXDLIN( 679)					int _g2 = 0;
HXDLIN( 679)					while((_g2 < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g2);
HXDLIN( 679)						_g2 = (_g2 + 1);
HXDLIN( 679)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action = this->_left;
HXDLIN( 679)					int state = 1;
HXDLIN( 679)					int _g = 0;
HXDLIN( 679)					while((_g < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g);
HXDLIN( 679)						_g = (_g + 1);
HXDLIN( 679)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action1 = this->_leftP;
HXDLIN( 679)					int state1 = 2;
HXDLIN( 679)					int _g1 = 0;
HXDLIN( 679)					while((_g1 < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g1);
HXDLIN( 679)						_g1 = (_g1 + 1);
HXDLIN( 679)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action2 = this->_leftR;
HXDLIN( 679)					int state2 = -1;
HXDLIN( 679)					int _g2 = 0;
HXDLIN( 679)					while((_g2 < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g2);
HXDLIN( 679)						_g2 = (_g2 + 1);
HXDLIN( 679)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action = this->_right;
HXDLIN( 679)					int state = 1;
HXDLIN( 679)					int _g = 0;
HXDLIN( 679)					while((_g < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g);
HXDLIN( 679)						_g = (_g + 1);
HXDLIN( 679)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action1 = this->_rightP;
HXDLIN( 679)					int state1 = 2;
HXDLIN( 679)					int _g1 = 0;
HXDLIN( 679)					while((_g1 < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g1);
HXDLIN( 679)						_g1 = (_g1 + 1);
HXDLIN( 679)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action2 = this->_rightR;
HXDLIN( 679)					int state2 = -1;
HXDLIN( 679)					int _g2 = 0;
HXDLIN( 679)					while((_g2 < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g2);
HXDLIN( 679)						_g2 = (_g2 + 1);
HXDLIN( 679)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action = this->_down;
HXDLIN( 679)					int state = 1;
HXDLIN( 679)					int _g = 0;
HXDLIN( 679)					while((_g < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g);
HXDLIN( 679)						_g = (_g + 1);
HXDLIN( 679)						action->addGamepad(button,state,id);
            					}
            				}
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action1 = this->_downP;
HXDLIN( 679)					int state1 = 2;
HXDLIN( 679)					int _g1 = 0;
HXDLIN( 679)					while((_g1 < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g1);
HXDLIN( 679)						_g1 = (_g1 + 1);
HXDLIN( 679)						action1->addGamepad(button,state1,id);
            					}
            				}
HXDLIN( 679)				{
HXDLIN( 679)					 ::flixel::input::actions::FlxActionDigital action2 = this->_downR;
HXDLIN( 679)					int state2 = -1;
HXDLIN( 679)					int _g2 = 0;
HXDLIN( 679)					while((_g2 < buttons->length)){
HXDLIN( 679)						int button = buttons->__get(_g2);
HXDLIN( 679)						_g2 = (_g2 + 1);
HXDLIN( 679)						action2->addGamepad(button,state2,id);
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXDLIN( 679)				 ::flixel::input::actions::FlxActionDigital action = this->_reset;
HXDLIN( 679)				int state = 2;
HXDLIN( 679)				int _g = 0;
HXDLIN( 679)				while((_g < buttons->length)){
HXDLIN( 679)					int button = buttons->__get(_g);
HXDLIN( 679)					_g = (_g + 1);
HXDLIN( 679)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)5: {
HXDLIN( 679)				 ::flixel::input::actions::FlxActionDigital action = this->_accept;
HXDLIN( 679)				int state = 2;
HXDLIN( 679)				int _g = 0;
HXDLIN( 679)				while((_g < buttons->length)){
HXDLIN( 679)					int button = buttons->__get(_g);
HXDLIN( 679)					_g = (_g + 1);
HXDLIN( 679)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)6: {
HXDLIN( 679)				 ::flixel::input::actions::FlxActionDigital action = this->_back;
HXDLIN( 679)				int state = 2;
HXDLIN( 679)				int _g = 0;
HXDLIN( 679)				while((_g < buttons->length)){
HXDLIN( 679)					int button = buttons->__get(_g);
HXDLIN( 679)					_g = (_g + 1);
HXDLIN( 679)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)7: {
HXDLIN( 679)				 ::flixel::input::actions::FlxActionDigital action = this->_pause;
HXDLIN( 679)				int state = 2;
HXDLIN( 679)				int _g = 0;
HXDLIN( 679)				while((_g < buttons->length)){
HXDLIN( 679)					int button = buttons->__get(_g);
HXDLIN( 679)					_g = (_g + 1);
HXDLIN( 679)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            			case (int)8: {
HXDLIN( 679)				 ::flixel::input::actions::FlxActionDigital action = this->_cheat;
HXDLIN( 679)				int state = 2;
HXDLIN( 679)				int _g = 0;
HXDLIN( 679)				while((_g < buttons->length)){
HXDLIN( 679)					int button = buttons->__get(_g);
HXDLIN( 679)					_g = (_g + 1);
HXDLIN( 679)					action->addGamepad(button,state,id);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,bindButtons,(void))

void Controls_obj::unbindButtons( ::gameFolder::meta::Control control,int gamepadID,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_692_unbindButtons)
HXDLIN( 692)		switch((int)(control->_hx_getIndex())){
            			case (int)0: {
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_up,gamepadID,buttons);
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_upP,gamepadID,buttons);
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_upR,gamepadID,buttons);
            			}
            			break;
            			case (int)1: {
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_left,gamepadID,buttons);
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_leftP,gamepadID,buttons);
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_leftR,gamepadID,buttons);
            			}
            			break;
            			case (int)2: {
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_right,gamepadID,buttons);
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_rightP,gamepadID,buttons);
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_rightR,gamepadID,buttons);
            			}
            			break;
            			case (int)3: {
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_down,gamepadID,buttons);
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_downP,gamepadID,buttons);
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_downR,gamepadID,buttons);
            			}
            			break;
            			case (int)4: {
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_reset,gamepadID,buttons);
            			}
            			break;
            			case (int)5: {
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_accept,gamepadID,buttons);
            			}
            			break;
            			case (int)6: {
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_back,gamepadID,buttons);
            			}
            			break;
            			case (int)7: {
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_pause,gamepadID,buttons);
            			}
            			break;
            			case (int)8: {
HXDLIN( 692)				::gameFolder::meta::Controls_obj::removeButtons(this->_cheat,gamepadID,buttons);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,unbindButtons,(void))

::Array< int > Controls_obj::getInputsFor( ::gameFolder::meta::Control control, ::gameFolder::meta::Device device,::Array< int > list){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_716_getInputsFor)
HXLINE( 717)		if (::hx::IsNull( list )) {
HXLINE( 718)			list = ::Array_obj< int >::__new(0);
            		}
HXLINE( 720)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 723)				int _g = 0;
HXDLIN( 723)				::Array< ::Dynamic> _g1 = this->getActionFromControl(control)->inputs;
HXDLIN( 723)				while((_g < _g1->length)){
HXLINE( 723)					 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 723)					_g = (_g + 1);
HXLINE( 725)					if (::hx::IsEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE( 726)						list->push(input->inputID);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 728)				int id = device->_hx_getInt(0);
HXLINE( 729)				{
HXLINE( 729)					int _g = 0;
HXDLIN( 729)					::Array< ::Dynamic> _g1 = this->getActionFromControl(control)->inputs;
HXDLIN( 729)					while((_g < _g1->length)){
HXLINE( 729)						 ::flixel::input::actions::FlxActionInput input = _g1->__get(_g).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXDLIN( 729)						_g = (_g + 1);
HXLINE( 731)						if ((input->deviceID == id)) {
HXLINE( 732)							list->push(input->inputID);
            						}
            					}
            				}
            			}
            			break;
            		}
HXLINE( 735)		return list;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,getInputsFor,return )

void Controls_obj::removeDevice( ::gameFolder::meta::Device device){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_740_removeDevice)
HXDLIN( 740)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 743)				this->setKeyboardScheme(::gameFolder::meta::KeyboardScheme_obj::None_dyn(),null());
            			}
            			break;
            			case (int)1: {
HXLINE( 744)				int id = device->_hx_getInt(0);
HXLINE( 745)				this->removeGamepad(id);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Controls_obj,removeDevice,(void))

void Controls_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_337_init)
HXLINE( 338)		 ::flixel::input::actions::FlxActionManager actions =  ::flixel::input::actions::FlxActionManager_obj::__alloc( HX_CTX );
HXLINE( 339)		::flixel::FlxG_obj::inputs->add_flixel_input_actions_FlxActionManager(actions);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Controls_obj,init,(void))

void Controls_obj::addKeys( ::flixel::input::actions::FlxActionDigital action,::Array< int > keys,int state){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_495_addKeys)
HXDLIN( 495)		int _g = 0;
HXDLIN( 495)		while((_g < keys->length)){
HXDLIN( 495)			int key = keys->__get(_g);
HXDLIN( 495)			_g = (_g + 1);
HXLINE( 496)			action->addKey(key,state);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,addKeys,(void))

void Controls_obj::removeKeys( ::flixel::input::actions::FlxActionDigital action,::Array< int > keys){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_500_removeKeys)
HXLINE( 501)		int i = action->inputs->length;
HXLINE( 502)		while(true){
HXLINE( 502)			i = (i - 1);
HXDLIN( 502)			if (!(((i + 1) > 0))) {
HXLINE( 502)				goto _hx_goto_581;
            			}
HXLINE( 504)			 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 505)			bool _hx_tmp;
HXDLIN( 505)			if (::hx::IsEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() )) {
HXLINE( 505)				_hx_tmp = (keys->indexOf(input->inputID,null()) != -1);
            			}
            			else {
HXLINE( 505)				_hx_tmp = false;
            			}
HXDLIN( 505)			if (_hx_tmp) {
HXLINE( 506)				action->remove(input,null());
            			}
            		}
            		_hx_goto_581:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,removeKeys,(void))

void Controls_obj::addButtons( ::flixel::input::actions::FlxActionDigital action,::Array< int > buttons,int state,int id){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_700_addButtons)
HXDLIN( 700)		int _g = 0;
HXDLIN( 700)		while((_g < buttons->length)){
HXDLIN( 700)			int button = buttons->__get(_g);
HXDLIN( 700)			_g = (_g + 1);
HXLINE( 701)			action->addGamepad(button,state,id);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Controls_obj,addButtons,(void))

void Controls_obj::removeButtons( ::flixel::input::actions::FlxActionDigital action,int gamepadID,::Array< int > buttons){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_705_removeButtons)
HXLINE( 706)		int i = action->inputs->length;
HXLINE( 707)		while(true){
HXLINE( 707)			i = (i - 1);
HXDLIN( 707)			if (!(((i + 1) > 0))) {
HXLINE( 707)				goto _hx_goto_585;
            			}
HXLINE( 709)			 ::flixel::input::actions::FlxActionInput input = action->inputs->__get(i).StaticCast<  ::flixel::input::actions::FlxActionInput >();
HXLINE( 710)			bool _hx_tmp;
HXDLIN( 710)			bool _hx_tmp1;
HXDLIN( 710)			if (::hx::IsEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 710)				if ((gamepadID != -1)) {
HXLINE( 710)					_hx_tmp1 = (input->deviceID == gamepadID);
            				}
            				else {
HXLINE( 710)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE( 710)				_hx_tmp1 = false;
            			}
HXDLIN( 710)			if (_hx_tmp1) {
HXLINE( 710)				_hx_tmp = (buttons->indexOf(input->inputID,null()) != -1);
            			}
            			else {
HXLINE( 710)				_hx_tmp = false;
            			}
HXDLIN( 710)			if (_hx_tmp) {
HXLINE( 711)				action->remove(input,null());
            			}
            		}
            		_hx_goto_585:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Controls_obj,removeButtons,(void))

bool Controls_obj::isDevice( ::flixel::input::actions::FlxActionInput input, ::gameFolder::meta::Device device){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_751_isDevice)
HXDLIN( 751)		switch((int)(device->_hx_getIndex())){
            			case (int)0: {
HXLINE( 753)				return ::hx::IsEq( input->device,::flixel::input::actions::FlxInputDevice_obj::KEYBOARD_dyn() );
            			}
            			break;
            			case (int)1: {
HXLINE( 754)				int id = device->_hx_getInt(0);
HXDLIN( 754)				if (::hx::IsEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXLINE( 754)					if ((id != -1)) {
HXLINE( 754)						return (input->deviceID == id);
            					}
            					else {
HXLINE( 754)						return true;
            					}
            				}
            				else {
HXLINE( 754)					return false;
            				}
            			}
            			break;
            		}
HXLINE( 751)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,isDevice,return )

bool Controls_obj::isGamepad( ::flixel::input::actions::FlxActionInput input,int deviceID){
            	HX_STACKFRAME(&_hx_pos_1a9be1d3ed2fd945_760_isGamepad)
HXDLIN( 760)		if (::hx::IsEq( input->device,::flixel::input::actions::FlxInputDevice_obj::GAMEPAD_dyn() )) {
HXDLIN( 760)			if ((deviceID != -1)) {
HXDLIN( 760)				return (input->deviceID == deviceID);
            			}
            			else {
HXDLIN( 760)				return true;
            			}
            		}
            		else {
HXDLIN( 760)			return false;
            		}
HXDLIN( 760)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Controls_obj,isGamepad,return )


::hx::ObjectPtr< Controls_obj > Controls_obj::__new(::String name, ::gameFolder::meta::KeyboardScheme __o_scheme) {
	::hx::ObjectPtr< Controls_obj > __this = new Controls_obj();
	__this->__construct(name,__o_scheme);
	return __this;
}

::hx::ObjectPtr< Controls_obj > Controls_obj::__alloc(::hx::Ctx *_hx_ctx,::String name, ::gameFolder::meta::KeyboardScheme __o_scheme) {
	Controls_obj *__this = (Controls_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Controls_obj), true, "gameFolder.meta.Controls"));
	*(void **)__this = Controls_obj::_hx_vtable;
	__this->__construct(name,__o_scheme);
	return __this;
}

Controls_obj::Controls_obj()
{
}

void Controls_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Controls);
	HX_MARK_MEMBER_NAME(_up,"_up");
	HX_MARK_MEMBER_NAME(_left,"_left");
	HX_MARK_MEMBER_NAME(_right,"_right");
	HX_MARK_MEMBER_NAME(_down,"_down");
	HX_MARK_MEMBER_NAME(_upP,"_upP");
	HX_MARK_MEMBER_NAME(_leftP,"_leftP");
	HX_MARK_MEMBER_NAME(_rightP,"_rightP");
	HX_MARK_MEMBER_NAME(_downP,"_downP");
	HX_MARK_MEMBER_NAME(_upR,"_upR");
	HX_MARK_MEMBER_NAME(_leftR,"_leftR");
	HX_MARK_MEMBER_NAME(_rightR,"_rightR");
	HX_MARK_MEMBER_NAME(_downR,"_downR");
	HX_MARK_MEMBER_NAME(_accept,"_accept");
	HX_MARK_MEMBER_NAME(_back,"_back");
	HX_MARK_MEMBER_NAME(_pause,"_pause");
	HX_MARK_MEMBER_NAME(_reset,"_reset");
	HX_MARK_MEMBER_NAME(_cheat,"_cheat");
	HX_MARK_MEMBER_NAME(byName,"byName");
	HX_MARK_MEMBER_NAME(gamepadsAdded,"gamepadsAdded");
	HX_MARK_MEMBER_NAME(keyboardScheme,"keyboardScheme");
	 ::flixel::input::actions::FlxActionSet_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Controls_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_up,"_up");
	HX_VISIT_MEMBER_NAME(_left,"_left");
	HX_VISIT_MEMBER_NAME(_right,"_right");
	HX_VISIT_MEMBER_NAME(_down,"_down");
	HX_VISIT_MEMBER_NAME(_upP,"_upP");
	HX_VISIT_MEMBER_NAME(_leftP,"_leftP");
	HX_VISIT_MEMBER_NAME(_rightP,"_rightP");
	HX_VISIT_MEMBER_NAME(_downP,"_downP");
	HX_VISIT_MEMBER_NAME(_upR,"_upR");
	HX_VISIT_MEMBER_NAME(_leftR,"_leftR");
	HX_VISIT_MEMBER_NAME(_rightR,"_rightR");
	HX_VISIT_MEMBER_NAME(_downR,"_downR");
	HX_VISIT_MEMBER_NAME(_accept,"_accept");
	HX_VISIT_MEMBER_NAME(_back,"_back");
	HX_VISIT_MEMBER_NAME(_pause,"_pause");
	HX_VISIT_MEMBER_NAME(_reset,"_reset");
	HX_VISIT_MEMBER_NAME(_cheat,"_cheat");
	HX_VISIT_MEMBER_NAME(byName,"byName");
	HX_VISIT_MEMBER_NAME(gamepadsAdded,"gamepadsAdded");
	HX_VISIT_MEMBER_NAME(keyboardScheme,"keyboardScheme");
	 ::flixel::input::actions::FlxActionSet_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Controls_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"UP") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { return ::hx::Val( _up ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { return ::hx::Val( _upP ); }
		if (HX_FIELD_EQ(inName,"_upR") ) { return ::hx::Val( _upR ); }
		if (HX_FIELD_EQ(inName,"LEFT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT() ); }
		if (HX_FIELD_EQ(inName,"DOWN") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN() ); }
		if (HX_FIELD_EQ(inName,"UP_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP_P() ); }
		if (HX_FIELD_EQ(inName,"UP_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_UP_R() ); }
		if (HX_FIELD_EQ(inName,"BACK") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_BACK() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { return ::hx::Val( _left ); }
		if (HX_FIELD_EQ(inName,"_down") ) { return ::hx::Val( _down ); }
		if (HX_FIELD_EQ(inName,"_back") ) { return ::hx::Val( _back ); }
		if (HX_FIELD_EQ(inName,"RIGHT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT() ); }
		if (HX_FIELD_EQ(inName,"PAUSE") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_PAUSE() ); }
		if (HX_FIELD_EQ(inName,"RESET") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RESET() ); }
		if (HX_FIELD_EQ(inName,"CHEAT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_CHEAT() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { return ::hx::Val( _right ); }
		if (HX_FIELD_EQ(inName,"_leftP") ) { return ::hx::Val( _leftP ); }
		if (HX_FIELD_EQ(inName,"_downP") ) { return ::hx::Val( _downP ); }
		if (HX_FIELD_EQ(inName,"_leftR") ) { return ::hx::Val( _leftR ); }
		if (HX_FIELD_EQ(inName,"_downR") ) { return ::hx::Val( _downR ); }
		if (HX_FIELD_EQ(inName,"_pause") ) { return ::hx::Val( _pause ); }
		if (HX_FIELD_EQ(inName,"_reset") ) { return ::hx::Val( _reset ); }
		if (HX_FIELD_EQ(inName,"_cheat") ) { return ::hx::Val( _cheat ); }
		if (HX_FIELD_EQ(inName,"byName") ) { return ::hx::Val( byName ); }
		if (HX_FIELD_EQ(inName,"get_UP") ) { return ::hx::Val( get_UP_dyn() ); }
		if (HX_FIELD_EQ(inName,"LEFT_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT_P() ); }
		if (HX_FIELD_EQ(inName,"DOWN_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN_P() ); }
		if (HX_FIELD_EQ(inName,"LEFT_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_LEFT_R() ); }
		if (HX_FIELD_EQ(inName,"DOWN_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_DOWN_R() ); }
		if (HX_FIELD_EQ(inName,"ACCEPT") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_ACCEPT() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyTo") ) { return ::hx::Val( copyTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { return ::hx::Val( _rightP ); }
		if (HX_FIELD_EQ(inName,"_rightR") ) { return ::hx::Val( _rightR ); }
		if (HX_FIELD_EQ(inName,"_accept") ) { return ::hx::Val( _accept ); }
		if (HX_FIELD_EQ(inName,"RIGHT_P") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT_P() ); }
		if (HX_FIELD_EQ(inName,"RIGHT_R") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_RIGHT_R() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_LEFT") ) { return ::hx::Val( get_LEFT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN") ) { return ::hx::Val( get_DOWN_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_UP_P") ) { return ::hx::Val( get_UP_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_UP_R") ) { return ::hx::Val( get_UP_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_BACK") ) { return ::hx::Val( get_BACK_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindKeys") ) { return ::hx::Val( bindKeys_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_RIGHT") ) { return ::hx::Val( get_RIGHT_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_PAUSE") ) { return ::hx::Val( get_PAUSE_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RESET") ) { return ::hx::Val( get_RESET_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_CHEAT") ) { return ::hx::Val( get_CHEAT_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_LEFT_P") ) { return ::hx::Val( get_LEFT_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN_P") ) { return ::hx::Val( get_DOWN_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_LEFT_R") ) { return ::hx::Val( get_LEFT_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_DOWN_R") ) { return ::hx::Val( get_DOWN_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ACCEPT") ) { return ::hx::Val( get_ACCEPT_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbindKeys") ) { return ::hx::Val( unbindKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepad") ) { return ::hx::Val( addGamepad_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_RIGHT_P") ) { return ::hx::Val( get_RIGHT_P_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_RIGHT_R") ) { return ::hx::Val( get_RIGHT_R_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkByName") ) { return ::hx::Val( checkByName_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindButtons") ) { return ::hx::Val( bindButtons_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"forEachBound") ) { return ::hx::Val( forEachBound_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInputsFor") ) { return ::hx::Val( getInputsFor_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeDevice") ) { return ::hx::Val( removeDevice_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepadsAdded") ) { return ::hx::Val( gamepadsAdded ); }
		if (HX_FIELD_EQ(inName,"removeGamepad") ) { return ::hx::Val( removeGamepad_dyn() ); }
		if (HX_FIELD_EQ(inName,"unbindButtons") ) { return ::hx::Val( unbindButtons_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyboardScheme") ) { return ::hx::Val( keyboardScheme ); }
		if (HX_FIELD_EQ(inName,"replaceBinding") ) { return ::hx::Val( replaceBinding_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeKeyboard") ) { return ::hx::Val( removeKeyboard_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getDialogueName") ) { return ::hx::Val( getDialogueName_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setKeyboardScheme") ) { return ::hx::Val( setKeyboardScheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"addGamepadLiteral") ) { return ::hx::Val( addGamepadLiteral_dyn() ); }
		if (HX_FIELD_EQ(inName,"addDefaultGamepad") ) { return ::hx::Val( addDefaultGamepad_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mergeKeyboardScheme") ) { return ::hx::Val( mergeKeyboardScheme_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getActionFromControl") ) { return ::hx::Val( getActionFromControl_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"getDialogueNameFromToken") ) { return ::hx::Val( getDialogueNameFromToken_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Controls_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addKeys") ) { outValue = addKeys_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isDevice") ) { outValue = isDevice_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isGamepad") ) { outValue = isGamepad_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeKeys") ) { outValue = removeKeys_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addButtons") ) { outValue = addButtons_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeButtons") ) { outValue = removeButtons_dyn(); return true; }
	}
	return false;
}

::hx::Val Controls_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { _up=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_upP") ) { _upP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_upR") ) { _upR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_down") ) { _down=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_back") ) { _back=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftP") ) { _leftP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downP") ) { _downP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftR") ) { _leftR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downR") ) { _downR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pause") ) { _pause=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_reset") ) { _reset=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cheat") ) { _cheat=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"byName") ) { byName=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_rightP") ) { _rightP=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightR") ) { _rightR=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_accept") ) { _accept=inValue.Cast<  ::flixel::input::actions::FlxActionDigital >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gamepadsAdded") ) { gamepadsAdded=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keyboardScheme") ) { keyboardScheme=inValue.Cast<  ::gameFolder::meta::KeyboardScheme >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Controls_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_up",7a,7c,48,00));
	outFields->push(HX_("_left",e6,23,c1,fa));
	outFields->push(HX_("_right",1d,53,4b,e5));
	outFields->push(HX_("_down",41,14,7f,f5));
	outFields->push(HX_("_upP",96,6e,24,3f));
	outFields->push(HX_("_leftP",aa,45,3e,6e));
	outFields->push(HX_("_rightP",93,66,9d,bc));
	outFields->push(HX_("_downP",ef,a4,b2,d9));
	outFields->push(HX_("_upR",98,6e,24,3f));
	outFields->push(HX_("_leftR",ac,45,3e,6e));
	outFields->push(HX_("_rightR",95,66,9d,bc));
	outFields->push(HX_("_downR",f1,a4,b2,d9));
	outFields->push(HX_("_accept",a7,a4,7d,79));
	outFields->push(HX_("_back",06,f6,21,f4));
	outFields->push(HX_("_pause",37,1e,3f,b9));
	outFields->push(HX_("_reset",10,91,af,e2));
	outFields->push(HX_("_cheat",54,de,9d,41));
	outFields->push(HX_("byName",c2,2b,4e,0e));
	outFields->push(HX_("gamepadsAdded",ae,52,a9,94));
	outFields->push(HX_("keyboardScheme",2c,c8,f4,c5));
	outFields->push(HX_("UP",5b,4a,00,00));
	outFields->push(HX_("LEFT",07,d0,70,32));
	outFields->push(HX_("RIGHT",bc,43,52,67));
	outFields->push(HX_("DOWN",62,c0,2e,2d));
	outFields->push(HX_("UP_P",2c,2a,6c,38));
	outFields->push(HX_("LEFT_P",d8,72,4a,4c));
	outFields->push(HX_("RIGHT_P",cd,fd,37,93));
	outFields->push(HX_("DOWN_P",f3,6f,a9,e6));
	outFields->push(HX_("UP_R",2e,2a,6c,38));
	outFields->push(HX_("LEFT_R",da,72,4a,4c));
	outFields->push(HX_("RIGHT_R",cf,fd,37,93));
	outFields->push(HX_("DOWN_R",f5,6f,a9,e6));
	outFields->push(HX_("ACCEPT",08,3f,89,bd));
	outFields->push(HX_("BACK",27,a2,d1,2b));
	outFields->push(HX_("PAUSE",d6,0e,46,3b));
	outFields->push(HX_("RESET",af,81,b6,64));
	outFields->push(HX_("CHEAT",f3,ce,a4,c3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Controls_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_up),HX_("_up",7a,7c,48,00)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_left),HX_("_left",e6,23,c1,fa)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_right),HX_("_right",1d,53,4b,e5)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_down),HX_("_down",41,14,7f,f5)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_upP),HX_("_upP",96,6e,24,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_leftP),HX_("_leftP",aa,45,3e,6e)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_rightP),HX_("_rightP",93,66,9d,bc)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_downP),HX_("_downP",ef,a4,b2,d9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_upR),HX_("_upR",98,6e,24,3f)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_leftR),HX_("_leftR",ac,45,3e,6e)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_rightR),HX_("_rightR",95,66,9d,bc)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_downR),HX_("_downR",f1,a4,b2,d9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_accept),HX_("_accept",a7,a4,7d,79)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_back),HX_("_back",06,f6,21,f4)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_pause),HX_("_pause",37,1e,3f,b9)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_reset),HX_("_reset",10,91,af,e2)},
	{::hx::fsObject /*  ::flixel::input::actions::FlxActionDigital */ ,(int)offsetof(Controls_obj,_cheat),HX_("_cheat",54,de,9d,41)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Controls_obj,byName),HX_("byName",c2,2b,4e,0e)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Controls_obj,gamepadsAdded),HX_("gamepadsAdded",ae,52,a9,94)},
	{::hx::fsObject /*  ::gameFolder::meta::KeyboardScheme */ ,(int)offsetof(Controls_obj,keyboardScheme),HX_("keyboardScheme",2c,c8,f4,c5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Controls_obj_sStaticStorageInfo = 0;
#endif

static ::String Controls_obj_sMemberFields[] = {
	HX_("_up",7a,7c,48,00),
	HX_("_left",e6,23,c1,fa),
	HX_("_right",1d,53,4b,e5),
	HX_("_down",41,14,7f,f5),
	HX_("_upP",96,6e,24,3f),
	HX_("_leftP",aa,45,3e,6e),
	HX_("_rightP",93,66,9d,bc),
	HX_("_downP",ef,a4,b2,d9),
	HX_("_upR",98,6e,24,3f),
	HX_("_leftR",ac,45,3e,6e),
	HX_("_rightR",95,66,9d,bc),
	HX_("_downR",f1,a4,b2,d9),
	HX_("_accept",a7,a4,7d,79),
	HX_("_back",06,f6,21,f4),
	HX_("_pause",37,1e,3f,b9),
	HX_("_reset",10,91,af,e2),
	HX_("_cheat",54,de,9d,41),
	HX_("byName",c2,2b,4e,0e),
	HX_("gamepadsAdded",ae,52,a9,94),
	HX_("keyboardScheme",2c,c8,f4,c5),
	HX_("get_UP",a4,e1,2f,a3),
	HX_("get_LEFT",90,8b,2b,b2),
	HX_("get_RIGHT",13,a0,fb,aa),
	HX_("get_DOWN",eb,7b,e9,ac),
	HX_("get_UP_P",b5,e5,26,b8),
	HX_("get_LEFT_P",a1,e2,d1,3c),
	HX_("get_RIGHT_P",e4,5d,32,19),
	HX_("get_DOWN_P",bc,df,30,d7),
	HX_("get_UP_R",b7,e5,26,b8),
	HX_("get_LEFT_R",a3,e2,d1,3c),
	HX_("get_RIGHT_R",e6,5d,32,19),
	HX_("get_DOWN_R",be,df,30,d7),
	HX_("get_ACCEPT",d1,ae,10,ae),
	HX_("get_BACK",b0,5d,8c,ab),
	HX_("get_PAUSE",2d,6b,ef,7e),
	HX_("get_RESET",06,de,5f,a8),
	HX_("get_CHEAT",4a,2b,4e,07),
	HX_("update",09,86,05,87),
	HX_("checkByName",aa,fe,5f,f0),
	HX_("getDialogueName",39,8d,0f,32),
	HX_("getDialogueNameFromToken",b6,d0,32,d3),
	HX_("getActionFromControl",87,31,3f,3d),
	HX_("forEachBound",34,ae,22,2f),
	HX_("replaceBinding",71,99,ae,a4),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("copyTo",90,1c,33,c9),
	HX_("mergeKeyboardScheme",04,51,83,14),
	HX_("bindKeys",51,26,d1,b4),
	HX_("unbindKeys",aa,0d,95,3a),
	HX_("setKeyboardScheme",6e,4f,d6,5b),
	HX_("removeKeyboard",0b,f9,7f,32),
	HX_("addGamepad",80,0c,10,f1),
	HX_("addGamepadLiteral",cf,54,ef,a8),
	HX_("removeGamepad",bd,3c,40,62),
	HX_("addDefaultGamepad",e1,d7,98,02),
	HX_("bindButtons",04,66,e6,c6),
	HX_("unbindButtons",4b,dc,20,e8),
	HX_("getInputsFor",ea,35,e1,37),
	HX_("removeDevice",fa,77,a5,e0),
	::String(null()) };

::hx::Class Controls_obj::__mClass;

static ::String Controls_obj_sStaticFields[] = {
	HX_("init",10,3b,bb,45),
	HX_("addKeys",b5,24,44,83),
	HX_("removeKeys",58,1c,26,c4),
	HX_("addButtons",20,7e,ff,31),
	HX_("removeButtons",5d,ae,2f,a3),
	HX_("isDevice",20,78,e1,c9),
	HX_("isGamepad",d7,5d,84,8d),
	::String(null())
};

void Controls_obj::__register()
{
	Controls_obj _hx_dummy;
	Controls_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("gameFolder.meta.Controls",b1,20,c6,6d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Controls_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Controls_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Controls_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Controls_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Controls_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Controls_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gameFolder
} // end namespace meta
